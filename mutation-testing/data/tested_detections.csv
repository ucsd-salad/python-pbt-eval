user,project_name,namespace,function,assert_stmt,roundtrip,partial_roundtrip,hetero_gv_roundtrip,commutative,partial_commutative,const_eq,const_inclusion,inclusion,typecheck,const_bounds,gen_val_bounds,cross_gv_bounds,exception,const_neq,gen_val_neq
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('_arm_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertEqual(token['_chocolate_id'], 77)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('b', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertEqual(p['a'], 5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertEqual(p['b'], 8)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_connection.py,test_invalid_ending_name_connect,"self.assertRaises(RuntimeError, SQLiteConnection, engine_str)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(comp[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_ancestor_id', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(comp[0][0]['_ancestor_id'], 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(comp[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_parent_idx', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,self.assertIsNotNone(instance),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,self.assertIsNone(retcode),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,op.assert_has_calls(task_id_calls),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,log_op.assert_has_calls(task_id_calls),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.transitive_nodes), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.nodes), 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(str(Q.nodes[0]), 'Arrival Node')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(str(Q.nodes[-1]), 'Exit Node')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual([str(n) for n in Q.transitive_nodes], ['Node 1'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.inter_arrival_times), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.inter_arrival_times[1]), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.service_times), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.service_times[1]), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual([str(obs) for obs in Q.nodes], ['Arrival Node', 'Node 1', 'Exit Node'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_mminf_node,"self.assertEqual(sum(waits), 0.0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_uniform_dist_hypothesis,self.assertTrue(ul <= Nu.simulation.service_times[Nu.id_number]['Customer']._sample() <= uh),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_uniform_dist_hypothesis,self.assertTrue(ul <= Nu.simulation.inter_arrival_times[Nu.id_number]['Customer']._sample() <= uh),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_deterministic_dist_hypothesis,"self.assertEqual(Nd.simulation.service_times[Nd.id_number]['Customer']._sample(), d)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_deterministic_dist_hypothesis,"self.assertEqual(Nd.simulation.inter_arrival_times[Nd.id_number]['Customer']._sample(), d)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_triangular_dist_hypothesis,self.assertTrue(tl <= Nt.simulation.service_times[Nt.id_number]['Customer']._sample() <= th),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_triangular_dist_hypothesis,self.assertTrue(tl <= Nt.simulation.inter_arrival_times[Nt.id_number]['Customer']._sample() <= th),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_exponential_dist_hypothesis,self.assertTrue(Ne.simulation.service_times[Ne.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_exponential_dist_hypothesis,self.assertTrue(Ne.simulation.inter_arrival_times[Ne.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_gamma_dist_hypothesis,self.assertTrue(Ng.simulation.service_times[Ng.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_gamma_dist_hypothesis,self.assertTrue(Ng.simulation.inter_arrival_times[Ng.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_lognormal_dist_hypothesis,self.assertTrue(Nl.simulation.service_times[Nl.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_lognormal_dist_hypothesis,self.assertTrue(Nl.simulation.inter_arrival_times[Nl.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_weibull_dist_hypothesis,self.assertTrue(Nw.simulation.service_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_weibull_dist_hypothesis,self.assertTrue(Nw.simulation.inter_arrival_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_normal_dist_hypothesis,self.assertTrue(Nw.simulation.service_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_normal_dist_hypothesis,self.assertTrue(Nw.simulation.inter_arrival_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_empirical_dist_hypothesis,"self.assertTrue(Nem.simulation.service_times[Nem.id_number]['Customer']._sample() in set([7.0, 7.1, 7.2, 7.3, 7.7, 7.8]))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_empirical_dist_hypothesis,self.assertTrue(Nem.simulation.inter_arrival_times[Nem.id_number]['Customer']._sample() in set(my_empirical_dist)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_pmf_dist_hypothesis,self.assertTrue(Nc.simulation.service_times[Nc.id_number]['Customer']._sample() in set(cust_vals)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_pmf_dist_hypothesis,self.assertTrue(Nc.simulation.inter_arrival_times[Nc.id_number]['Customer']._sample() in set(cust_vals)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_sequential_dist_hypothesis,"self.assertEqual(inter_arrivals, expected_inter_arrival_times[1:])",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_sequential_dist_hypothesis,"self.assertEqual(services, expected_service_times)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_erlang_dist_hypothesis,self.assertTrue(Nw.simulation.service_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_erlang_dist_hypothesis,self.assertTrue(Nw.simulation.inter_arrival_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_auxiliary.py,test_seedh,"self.assertEqual(a1, a2)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_auxiliary.py,test_seedh,"self.assertEqual(b1, b2)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_network.py,test_init_method_h,"self.assertEqual(SC.number_of_servers, number_of_servers)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_network.py,test_init_method_h,"self.assertEqual(SC.queueing_capacity, queueing_capacity)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_network.py,test_init_method_h,"self.assertEqual(SC.class_change_matrix, class_change_matrix)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_node.py,test_utilisation_always_1_or_less,"self.assertGreaterEqual(srvr.total_time, srvr.busy_time)",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
CiwPython,Ciw,ciw/tests/test_node.py,test_utilisation_always_1_or_less,"self.assertLessEqual(Q.transitive_nodes[0].server_utilisation, 1.0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_node.py,test_utilisation_always_1_or_less,"self.assertGreaterEqual(Q.transitive_nodes[0].server_utilisation, 0.0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.customer_class, customer_class)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.previous_class, customer_class)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.priority_class, priority_class)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.id_number, id_num)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.service_start_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.service_time, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.service_end_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.arrival_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.destination, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.queue_size_at_arrival, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.queue_size_at_departure, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.data_records, [])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.customer_class, 'Customer')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.previous_class, 'Customer')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.priority_class, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.id_number, id_num)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.service_start_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.service_time, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.service_end_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.arrival_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.destination, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.queue_size_at_arrival, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.queue_size_at_departure, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.data_records, [])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_repr_methodh,"self.assertEqual(str(i), 'Individual ' + str(id_num))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.id_number, id_number)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.customer_class, customer_class)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.node, node)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.arrival_date, arrival_date)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.waiting_time, waiting_time)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.service_start_date, service_start_date)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.service_time, service_time)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.service_end_date, service_end_date)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.time_blocked, time_blocked)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.exit_date, exit_date)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.destination, destination)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.queue_size_at_arrival, queue_size_at_arrival)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.queue_size_at_departure, queue_size_at_departure)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.server_id, server_id)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.record_type, 'service')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ContinuumIO,cyberpandas,tests/ip/test_ip.py,test_ops,"tm.assert_numpy_array_equal(r1, r2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_output_type,"self.assertIsInstance(duration_to_string(duration), str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_year_output,"self.assertIn('year', duration_to_string(duration))",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_week_output,"self.assertIn('week', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_week_output,"self.assertNotIn('week', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_day_without_week_output,"self.assertIn('day', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_day_without_week_output,"self.assertNotIn('day', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_day_with_week_output,"self.assertIn('day', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_day_with_week_output,"self.assertNotIn('day', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_hour_output,"self.assertIn('hour', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_hour_output,"self.assertNotIn('hour', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_minute_output,"self.assertIn('minute', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_minute_output,"self.assertNotIn('minute', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_second_output,"self.assertIn(' second', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_second_output,"self.assertNotIn(' second', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_millisecond_output,"self.assertIn('millisecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_millisecond_output,"self.assertNotIn('millisecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_microsecond_without_millisecond_output,"self.assertIn('microsecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_microsecond_without_millisecond_output,"self.assertNotIn('microsecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_microsecond_with_millisecond_output,"self.assertIn('microsecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_microsecond_with_millisecond_output,"self.assertNotIn('microsecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_abbreviations,self.assertTrue(unit[:-2].lstrip('-').isdecimal()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_abbreviations,self.assertTrue(unit[:-1].lstrip('-').isdecimal()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_abbreviations,self.assertTrue(unit[-1].isalpha()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_negative_duration,self.assertTrue(unit.startswith('-')),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_unit_plurality,self.assertTrue(unit.endswith('s')),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_unit_plurality,self.assertFalse(unit.endswith('s')),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_cryptography.py,test_decode_inverts_encode,"self.assertEqual(message, decode_caesar_cipher(encode_caesar_cipher(message, key), key))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_cryptography.py,test_decode_inverts_encode,"self.assertEqual(message.upper(), decode_morse_code(encode_morse_code(message)))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_identity,"self.assertEqual(calculate(str(number)), number)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_addition,"self.assertEqual(calculate('+'.join(map(str, summands))), sum(summands))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_subtraction,"self.assertEqual(calculate(f'{minuend}-{subtrahend}'), minuend - subtrahend)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_multiplication,"self.assertEqual(calculate('*'.join(map(str, factors))), math.prod(factors))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_division,"self.assertEqual(calculate(f'{dividend}/{divisor}'), dividend / divisor)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}+{operand_2}*{operand_3}'), operand_1 + operand_2 * operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}+{operand_2}/{operand_3}'), operand_1 + operand_2 / operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}-{operand_2}+{operand_3}'), operand_1 - operand_2 + operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}-{operand_2}-{operand_3}'), operand_1 - operand_2 - operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}-{operand_2}*{operand_3}'), operand_1 - operand_2 * operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}-{operand_2}/{operand_3}'), operand_1 - operand_2 / operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}*{operand_2}+{operand_3}'), operand_1 * operand_2 + operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}*{operand_2}-{operand_3}'), operand_1 * operand_2 - operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}/{operand_2}+{operand_3}'), operand_1 / operand_2 + operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}/{operand_2}-{operand_3}'), operand_1 / operand_2 - operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}/{operand_2}*{operand_3}'), operand_1 / operand_2 * operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}/{operand_2}/{operand_3}'), operand_1 / operand_2 / operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'({operand_1}+{operand_2})*{operand_3}'), (operand_1 + operand_2) * operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'({operand_1}+{operand_2})/{operand_3}'), (operand_1 + operand_2) / operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}-({operand_2}+{operand_3})'), operand_1 - (operand_2 + operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}-({operand_2}-{operand_3})'), operand_1 - (operand_2 - operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'({operand_1}-{operand_2})*{operand_3}'), (operand_1 - operand_2) * operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'({operand_1}-{operand_2})/{operand_3}'), (operand_1 - operand_2) / operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}*({operand_2}+{operand_3})'), operand_1 * (operand_2 + operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}*({operand_2}-{operand_3})'), operand_1 * (operand_2 - operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}/({operand_2}+{operand_3})'), operand_1 / (operand_2 + operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}/({operand_2}-{operand_3})'), operand_1 / (operand_2 - operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}/({operand_2}*{operand_3})'), operand_1 / (operand_2 * operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}/({operand_2}/{operand_3})'), operand_1 / (operand_2 / operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_whitespace,"self.assertEqual(calculate(f'{whitespace}{numbers[0]}{whitespace}'), numbers[0])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_whitespace,"self.assertEqual(calculate(f'{whitespace}+{whitespace}'.join(map(str, numbers))), sum(numbers))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_whitespace,"self.assertEqual(calculate(f'{numbers[0]}{whitespace}-{whitespace}{numbers[1]}'), numbers[0] - numbers[1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_whitespace,"self.assertEqual(calculate(f'{whitespace}*{whitespace}'.join(map(str, numbers))), math.prod(numbers))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_non_numeric,"self.assertRaises(pyparsing.ParseException, calculate, non_numeric)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
Harmon758,Harmonbot,tests/test_location.py,test_output_type,"self.assertIsInstance(wind_degrees_to_direction(degrees), str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_low_n_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'N')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_ne_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'NE')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_ene_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'ENE')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_e_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'E')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_ese_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'ESE')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_se_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'SE')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_sse_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'SSE')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_s_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'S')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_ssw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'SSW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_sw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'SW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_wsw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'WSW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_w_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'W')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_wnw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'WNW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_nw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'NW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_nnw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'NNW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_high_n_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'N')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Kharacternyk,barva,tests/utils/test_color.py,test_to_hex_within_000000_FFFFFF,assert s >= '#000000' and s <= '#FFFFFF',False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
MAVENSDC,cdflib,tests/test_epochs.py,test_compute_cdfepoch,"assert t == random_time[i], f'Time {random_time} was not equal to {x}'",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
MAVENSDC,cdflib,tests/test_epochs.py,test_compute_cdfepoch16,"assert t == random_time[i], f'Time {random_time} was not equal to {x}'",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
MAVENSDC,cdflib,tests/test_epochs.py,test_compute_cdftt2000,"assert t == random_time[i], f'Time {random_time} was not equal to {x}'",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
NoRedInk,elm-ops-tooling,tests/test_elm_deps_sync.py,test_spec_order_is_preserved,assert list(new_spec.keys()) == spec_keys + ['test-dependencies'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
NoRedInk,elm-ops-tooling,tests/test_elm_deps_sync.py,test_spec_order_is_preserved,"assert list(new_spec['dependencies'].keys()) == ['NoRedInk/spec-1', 'NoRedInk/spec-2', 'NoRedInk/top-1', 'NoRedInk/top-2', 'NoRedInk/top-3']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
NoRedInk,elm-ops-tooling,tests/test_elm_deps_sync.py,test_spec_order_is_preserved,"assert list(new_spec['test-dependencies'].keys()) == ['NoRedInk/spec-1', 'NoRedInk/spec-2']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
NoRedInk,elm-ops-tooling,tests/test_native_deps_sync.py,test_spec_order_is_preserved,"assert list(new_spec.keys()) == ['NoRedInk/spec-1', 'NoRedInk/spec-2', 'NoRedInk/top-1', 'NoRedInk/top-2', 'NoRedInk/top-3']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Phelimb,BIGSI,bigsi/tests/matrix/test_transpose.py,test_transpose,"assert npmatrix[i, j] == tbitarrays[i][j]",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_missing_residue,assert mr.resid == mr_roundtrip.resid,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_missing_residue,assert mr.res_name == mr_roundtrip.res_name,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqidList_index_and_getitem_consistent,assert seqlist[seqlist.index(elem)] == elem,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqlist_equal,assert fgs.SeqidList(seq1) != fgs.SeqidList(seq2),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqlist_equal,assert fgs.SeqidList(seq1) == fgs.SeqidList(seq1),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqlist_equal,assert fgs.SeqidList(seq2) == fgs.SeqidList(seq2),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqids_strategy,assert len(seqids) >= 3,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqids_strategy,assert seqids[i - 1] < s,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqids_strategy,"assert seqids[i - 1][1][1] == s[1][1], '{}, {}'.format(seqids[i - 1], s)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_coords_to_points_and_points_to_coords,"assert np.array_equal(points_to_coords(coords_to_points(coords)), coords)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,"assert set(sum(list(poly_to_pts.values()), [])) == set(available_points)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,"assert isinstance(pts_to_poly, dict)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,assert len(pts_to_poly) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,assert len(pts_to_poly) == n_pts,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,assert set(list(pts_to_poly.keys())) == set(available_points),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,assert set(list(pts_to_poly.values())) == set(list(range(n_poly))),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(res, tuple)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert len(res) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(unassigned_pts, set)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert all([pt in range(n_pts) for pt in unassigned_pts]),False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert len(res) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_polys, dict)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_pts, dict)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert list(region_polys.keys()) == list(region_pts.keys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert list(region_polys.keys()) == list(region_pts.keys()) == [0],False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert 0 <= i_geom < n_geoms,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_polys_in_geom, dict)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_pts_in_geom, dict)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert list(region_polys_in_geom.keys()) == list(region_pts_in_geom.keys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert len(region_polys) <= n_pts,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert len(region_pts) == len(region_polys),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert set(range(n_pts)) - set(pts_region.keys()) == unassigned_pts,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_polys, dict)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_pts, dict)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert list(region_polys.keys()) == list(region_pts.keys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert n_pts < 4,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Session_repr,assert repr(Session(s)) == 'Session(0x{:08X})'.format(s),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Session_eq,assert (Session(s) == Session(t)) == (s == t),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Session_eq,assert Session(s) != False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
alexshpilkin,dvrip,test_dvrip.py,test_Session_hash,assert hash(Session(s)) == hash(s),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Session_forjson,assert Session(s).for_json() == '0x{:08X}'.format(s),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_version_jsonto,assert s == 'Unknown' or _json_to_version(s) == s,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_version_forjson,assert s is None or _version_for_json(s) == s,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Info_repr,assert repr(cmd) == 'Info.{}'.format(cmd.name),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Info_str,assert str(cmd) == cmd.value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Info_forjson,assert cmd.for_json() == cmd.value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_info_jsonto,assert Info.json_to(cmd.value) == cmd,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ip_forjson,"assert _ip_for_json('{}.{}.{}.{}'.format(a, b, c, d)) == '0x{3:02X}{2:02X}{1:02X}{0:02X}'.format(a, b, c, d)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ip_jsonto,"assert _json_to_ip('0x{3:02X}{2:02X}{1:02X}{0:02X}'.format(a, b, c, d)) == '{}.{}.{}.{}'.format(a, b, c, d)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ip_forjson_jsonto,assert _json_to_ip(_ip_for_json(value)) == value,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ip_jsonto_forjson,assert _ip_for_json(_json_to_ip(value)) == value,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_str,"assert str(ConnectionEntry(user=user, service=service)) == 'user {} service {}'.format(user, service)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_str,"assert str(ConnectionEntry(user=user, service=service, host=host)) == 'user {} service {} host {}'.format(user, service, host)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_repr,"assert repr(ConnectionEntry(user=user, service=service)) == 'ConnectionEntry(user={!r}, service={!r}, host=None)'.format(user, service, host)",False,False,True,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_repr,"assert repr(ConnectionEntry(user=user, service=service, host=host)) == 'ConnectionEntry(user={!r}, service={!r}, host={!r})'.format(user, service, host)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_eq,"assert (ConnectionEntry(user=auser, service=aservice, host=ahost) == ConnectionEntry(user=buser, service=bservice, host=bhost)) == (auser == buser and aservice == bservice and (ahost == bhost))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_eq,"assert ConnectionEntry(user=auser, service=aservice, host=ahost) != False",False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_forjson,"assert ConnectionEntry(user=user, service=service).for_json() == '{},{}'.format(user, service)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_forjson,"assert ConnectionEntry(user=user, service=service, host=host).for_json() == '{},{}:{}'.format(user, service, host)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_jsonto,"assert ConnectionEntry.json_to('{},{}'.format(user, service)) == ConnectionEntry(user=user, service=service)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_jsonto,"assert ConnectionEntry.json_to('{},{}:{}'.format(user, service, host)) == ConnectionEntry(user=user, service=service, host=host)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_forjson_jsonto,assert ConnectionEntry.json_to(value.for_json()) == value,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_jsonto_forjson,assert ConnectionEntry.json_to(datum).for_json() == datum,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_str,"assert str(RecordEntry(channel=channel, trigger=trigger)) == 'channel {} trigger {}'.format(channel, trigger.name.lower())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_repr,"assert repr(RecordEntry(channel=channel, trigger=trigger)) == 'RecordEntry(channel={!r}, trigger={!r})'.format(channel, trigger)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_eq,"assert (RecordEntry(channel=achannel, trigger=atrigger) == RecordEntry(channel=bchannel, trigger=btrigger)) == (achannel == bchannel and atrigger == btrigger)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_eq,"assert RecordEntry(channel=achannel, trigger=atrigger) != False",False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_forjson,"assert RecordEntry(channel=channel, trigger=trigger).for_json() == '{},{}'.format(trigger.value, channel)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_jsonto,"assert RecordEntry.json_to('{},{}'.format(trigger.value, channel)) == RecordEntry(channel=channel, trigger=trigger)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_forjson_jsonto,assert RecordEntry.json_to(value.for_json()) == value,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_jsonto_forjson,assert RecordEntry.json_to(datum).for_json() == datum,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_EntryType_repr,assert repr(value) == 'EntryType.{}'.format(value.name),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_EntryType_forjson,assert value.for_json() == value.value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_EntryType_jsonto,assert EntryType.json_to(value.value) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_EntryType_forjson_jsonto,assert EntryType.json_to(value.for_json()) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_EntryType_jsonto_forjson,assert EntryType.json_to(value.value).for_json() == value.value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_bool_forjson,assert for_json(b) == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_bool_jsonto,assert json_to(bool)(b) == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_bool_forjson_jsonto,assert json_to(bool)(for_json(b)) == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_bool_jsonto_forjson,assert for_json(json_to(bool)(b)) == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_int_forjson,assert for_json(i) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_int_jsonto,assert json_to(int)(i) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_int_forjson_jsonto,assert json_to(int)(for_json(i)) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_int_jsonto_forjson,assert for_json(json_to(int)(i)) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_str_forjson,assert for_json(s) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_str_jsonto,assert json_to(str)(s) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_str_forjson_jsonto,assert json_to(str)(for_json(s)) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_str_jsonto_forjson,assert for_json(json_to(str)(s)) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optional_forjson,assert for_json(o) == o,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optional_jsonto,assert json_to(Optional[int])(o) == o,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optional_forjson_jsonto,assert json_to(Optional[int])(for_json(o)) == o,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optional_jsonto_forjson,assert for_json(json_to(Optional[int])(o)) == o,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_list_forjson,assert for_json(l) == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_list_jsonto,assert json_to(List[int])(l) == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_list_forjson_jsonto,assert json_to(List[int])(for_json(l)) == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_list_jsonto_forjson,assert for_json(json_to(List[int])(l)) == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_dict_forjson,assert for_json(d) == d,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_dict_jsonto,"assert json_to(Dict[str, int])(d) == d",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_dict_forjson_jsonto,"assert json_to(Dict[str, int])(for_json(d)) == d",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_dict_jsonto_forjson,"assert for_json(json_to(Dict[str, int])(d)) == d",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_compose,"assert _compose(lambda x: x + 1, lambda x: 2 * x)(i) == 2 * i + 1",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_get,assert mobj.mint == i and mobj.mhex == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_set,assert mobj.mint == i and mobj.mhex == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_set,assert mobj.mint == j and mobj.mhex == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_set,assert mobj.mint == j and mobj.mhex == c,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_repr,"assert repr(Example(mint=i, mhex=b)) == 'Example(mint={!r}, mhex={!r})'.format(i, b)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_eq,"assert (Example(mint=i, mhex=b) == Example(mint=j, mhex=c)) == (i == j and b == c)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_eq,"assert Example(mint=i, mhex=b) != Ellipsis",False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
alexshpilkin,dvrip,test_typing.py,test_Object_forjson,"assert Example(mint=i, mhex=b).for_json() == {'Int': i, 'Hex': b.hex()}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_jsonto,"assert Example.json_to({'Int': i, 'Hex': h}) == Example(mint=i, mhex=bytes.fromhex(h))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_forjson_jsonto,assert Example.json_to(mobj.for_json()) == mobj,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_forjson_jsonto,assert NestedExample.json_to(nst.for_json()) == nst,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_jsonto_forjson,assert Example.json_to(obj).for_json() == obj,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_jsonto_forjson,assert NestedExample.json_to(nst).for_json() == nst,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optionalmember_forjson,"assert value.for_json() == {'Int1': i, 'Int2': j, 'Int3': k}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optionalmember_forjson,"assert value.for_json() == {'Int1': i, 'Int3': k}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optionalmember_jsonto,"assert OptionalExample.json_to(datum) == OptionalExample(mint=i, nint=j, kint=k)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optionalmember_jsonto,"assert OptionalExample.json_to(datum) == OptionalExample(mint=i, nint=NotImplemented, kint=k)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
anibali,dsntnn,tests/test_flat_softmax.py,test_flat_softmax_gives_valid_distribution,assert np.all(np.asarray(res) >= 0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_bootstrap.py,test_bootstrap,assert result is value,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_encrypt_decrypt_message,assert message.encode() != guest_enc_message.ciphertext != counselor_enc_message.ciphertext,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_encrypt_decrypt_message,assert message.encode() == dec_counselor_message == dec_guest_message,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_key_rotation,assert sent_message_1.ciphertext != sent_message_2.ciphertext,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_key_rotation,assert recieved_message_1 == recieved_message_2 == message.encode(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_out_of_order_recieve,assert counselor.decrypt_message(enc_message_3) == message_3.encode(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_out_of_order_recieve,assert counselor.decrypt_message(enc_message_1) == message_1.encode(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_out_of_order_recieve,assert counselor.decrypt_message(enc_message_2) == message_2.encode(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_available_port.py,test_unused_port,assert min_port <= port <= max_port,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_request_to_dict_is_json_serializable,"assert isinstance(request.raw_body, bytes)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_request_to_dict_is_json_serializable,"assert json.dumps(request_dict, default=handle_extra_types)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_response_to_dict,assert 'headers' in serialized,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_response_to_dict,assert 'statusCode' in serialized,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_response_to_dict,assert 'body' in serialized,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_response_to_dict,"assert isinstance(serialized['body'], six.string_types)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_handles_binary_responses,assert serialized['isBase64Encoded'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_handles_binary_responses,"assert isinstance(serialized['body'], six.string_types)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_handles_binary_responses,"assert isinstance(base64.b64decode(serialized['body']), bytes)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_failed_is_json_serializable,assert event.status == OperationStatus.FAILED,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_failed_is_json_serializable,assert event.errorCode == error_code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_failed_is_json_serializable,assert event.message == message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_failed_is_json_serializable,"assert json.loads(json.dumps(event._serialize())) == {'status': OperationStatus.FAILED.value, 'errorCode': error_code.value, 'message': message, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_serialize_to_response_with_context,"assert event._serialize() == {'status': OperationStatus.SUCCESS.name, 'message': message, 'callbackContext': {'a': 'b'}, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_serialize_to_response_with_model,"assert event._serialize() == {'status': OperationStatus.SUCCESS.name, 'message': message, 'resourceModel': {'somekey': 'a', 'someotherkey': 'b'}, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_serialize_to_response_with_models,"assert event._serialize() == {'status': OperationStatus.SUCCESS.name, 'message': message, 'resourceModels': [{'somekey': 'a', 'someotherkey': 'b'}, {'somekey': 'c', 'someotherkey': 'd'}], 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_serialize_to_response_with_error_code,"assert event._serialize() == {'status': OperationStatus.SUCCESS.name, 'message': message, 'errorCode': HandlerErrorCode.InvalidRequest.name, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_failed_is_json_serializable,assert event.hookStatus == HookStatus.FAILED,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_failed_is_json_serializable,assert event.errorCode == error_code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_failed_is_json_serializable,assert event.message == message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_failed_is_json_serializable,"assert json.loads(json.dumps(event._serialize())) == {'hookStatus': HookStatus.FAILED.value, 'errorCode': error_code.value, 'message': message, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_serialize_to_response_with_context,"assert event._serialize() == {'hookStatus': HookStatus.SUCCESS.name, 'message': message, 'callbackContext': {'a': 'b'}, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_serialize_to_response_with_data,"assert event._serialize() == {'hookStatus': HookStatus.SUCCESS.name, 'message': message, 'callbackDelaySeconds': 0, 'result': result}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_serialize_to_response_with_error_code,"assert event._serialize() == {'hookStatus': HookStatus.SUCCESS.name, 'message': message, 'errorCode': HandlerErrorCode.InvalidRequest.name, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
bigchaindb,cryptoconditions,tests/test_condition.py,test_from_uri_prefix_error,"assert exc_info.value.args == ('Serialized condition must start with ""{}:""'.format(CONDITION_URI_SCHEME),)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
bigchaindb,cryptoconditions,tests/test_condition.py,test_from_uri_parse_error_missing_fpt,"assert exc_info.value.args == ('Invalid condition format: ""fpt"" parameter or value missing.',)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
bigchaindb,cryptoconditions,tests/test_condition.py,test_from_uri_parse_error_missing_cost,"assert exc_info.value.args == ('Invalid condition format: ""cost"" parameter or value missing.',)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
bigchaindb,cryptoconditions,tests/test_condition.py,test_from_uri_parse_error_invalid_cost,"assert exc_info.value.args == ('No or invalid cost provided',)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
bigchaindb,cryptoconditions,tests/test_condition.py,test_from_uri_with_unsupported_type,"assert exc_info.value.args == ('Type {} is not supported'.format(condition_type),)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_dict_struct.py,test_plain,"assert validate({'a': int, 'b': str}, dct) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_dict_struct.py,test_plain_no_strict,"assert validate({'a': str}, dct, strict=False) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_dict_struct.py,test_nested_dict,"assert validate({'a': {'b': int}}, dct) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_dict_struct.py,test_advanced,"assert validate(structure, dct) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_tuple_struct.py,test_plain,"assert validate((int,), tpl) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_simple_ints,assert pformat(lst) == '[int]',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_simple_strs,assert pformat(lst) == '[str]',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_simple_mix,"assert pformat(lst) == '[str, int, int, str]'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_simple_dict,"assert pformat(dct) == ""{'a': int, 'b': int}""",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_dict_mix,"assert pformat(dct) == ""{'a': [int], 'b': str}""",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_advanced,assert pformat(request) == expected,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_str.py,test_simple,"assert validate(str, string) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_list_struct.py,test_plain,"assert validate([int], li) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_list_struct.py,test_nested,"assert validate([[int]], lst) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_list_struct.py,test_heavy_nested,"assert validate([[int], float, [[float]]], lst) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_customtype.py,test_simple_pos_int,"assert validate(positive_int, num) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_customtype.py,test_simple_title,"assert validate(title, words) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_customtype.py,test_simple_ti_list,"assert validate(two_item_list, lst) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_customtype.py,test_nested,"assert validate(type_mask, data) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_customtype.py,test_deep_nesting,"assert validate(type_mask, data) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_structure_check.py,test_dict_nested,"assert validate([{'a': {'b': [dict]}}], lst) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_exception,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_response_exception,"assert issubclass(excinfo.type, SMTPException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_response_exception,assert excinfo.value.code == code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_response_exception,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_connection_exceptions,"assert issubclass(excinfo.type, SMTPException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_connection_exceptions,"assert issubclass(excinfo.type, ConnectionError)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_connection_exceptions,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_timeout_exceptions,"assert issubclass(excinfo.type, SMTPException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_timeout_exceptions,"assert issubclass(excinfo.type, asyncio.TimeoutError)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_timeout_exceptions,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_simple_response_exceptions,"assert issubclass(excinfo.type, SMTPResponseException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_simple_response_exceptions,assert excinfo.value.code == code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_simple_response_exceptions,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_sender_refused,"assert issubclass(excinfo.type, SMTPResponseException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_sender_refused,assert excinfo.value.code == code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_sender_refused,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_sender_refused,assert excinfo.value.sender == sender,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_recipient_refused,"assert issubclass(excinfo.type, SMTPResponseException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_recipient_refused,assert excinfo.value.code == code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_recipient_refused,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_recipient_refused,assert excinfo.value.recipient == recipient,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_not_supported,"assert issubclass(excinfo.type, SMTPException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_not_supported,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_renderer.py,test_calc_limits_xs,assert xs[0] == min,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_renderer.py,test_calc_limits_xs,assert xs[-1] == max,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_renderer.py,test_calc_limits_xs,"assert np.mean([xs[N // 2 - 1], xs[N // 2]]) == pytest.approx(center)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert cfg.trigger_ms == trigger_ms,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert cfg.render_ms == render_ms,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert channel._render_samp == ideal_rsamp,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert channel._trigger_stride == tsub * c_trigger_width,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert channel.render_stride == rsub * c_render_width,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,"assert kwargs['amplification'] == coalesce(c_amplification, amplification)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert trigger._tsamp == ideal_tsamp,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert trigger._stride == channel._trigger_stride,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert _return_nsamp == channel._render_samp,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert _subsampling == channel.render_stride,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert len(render_inputs.data) == channel._render_samp,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert label == 'label',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert label == 'sine440',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert label == '1',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert label == '',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_edges,assert bool(edges & Edges.Left) == (col == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_edges,assert bool(edges & Edges.Right) == (col == ncols - 1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_edges,assert bool(edges & Edges.Top) == (row == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_edges,assert bool(edges & Edges.Bottom) == (row == nrows - 1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"assert layout.wave_ncol == ncols or ceildiv(nwaves, nrows)",False,False,True,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"assert layout.wave_nrow == nrows or ceildiv(nwaves, ncols)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert len(region2d) == len(wave_nchans),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert len(wave_chans) == stereo_nchan,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert stereo_orientation == StereoOrientation.h,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert (np.add.reduce(wave_chans[0].pos) != 0) == (wave_i != 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"npt.assert_equal(wave_chans[0].pos % chans_per_wave, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"assert chan.pos.shape == chan.size.shape == (2,)",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"npt.assert_equal(chan.pos // chans_per_wave, wave_chans[0].pos // chans_per_wave)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"npt.assert_equal(chan_wave_pos, [0, 0])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"npt.assert_equal(chan_wave_pos, [chan_j, 0])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert stereo_orientation == StereoOrientation.h,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"npt.assert_equal(chan_wave_pos, [0, chan_j])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(screen_edges & Edges.Top) == (chan.row == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(screen_edges & Edges.Left) == (chan.col == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(screen_edges & Edges.Bottom) == (chan.row == chan.nrow - 1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(screen_edges & Edges.Right) == (chan.col == chan.ncol - 1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert wave_edges == ~Edges.NONE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert wave_edges & lr == lr,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(wave_edges & Edges.Top) == (chan.row % stereo_nchan == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(wave_edges & Edges.Bottom) == ((chan.row + 1) % stereo_nchan == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert stereo_orientation == StereoOrientation.h,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert wave_edges & tb == tb,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(wave_edges & Edges.Left) == (chan.col % stereo_nchan == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(wave_edges & Edges.Right) == ((chan.col + 1) % stereo_nchan == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_popcount.py,test_popcnt_array,assert output_counts[0] == input_as_bitarray[:array_size * 8].count(),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_popcount.py,test_popcnt_array,assert sum(output_counts) == bitarray_count,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_popcount.py,test_popcnt_array_len_1,assert len(resulting_popcount_array) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_popcount.py,test_popcnt_array_len_1,assert sum(resulting_popcount_array) == resulting_popcount_array[0],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_popcount.py,test_popcnt_array_len_1,assert sum(resulting_popcount_array) == input_as_bitarray.count(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_bigram_encoding_deterministic,assert set(ngram_comparator.tokenize(myinput)) == set(ngram_comparator.tokenize(myinput)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_ngram_spaces,assert tokens[0].endswith(' ' * (ngram_comparator.n - 1) + myinput[0]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_ngram_spaces,assert tokens[-1].endswith(myinput[-1] + ' ' * (ngram_comparator.n - 1)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_string_bigram_token_size,assert len(myinput) == len(tokens) - (ngram_comparator.n - 1),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_positional,"assert indices == set(range(1, len(tokens) + 1))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_exact_deterministic,assert ExactComparison().tokenize(word) == ExactComparison().tokenize(word),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_exact_uniqueness,assert set(list(ExactComparison().tokenize(word1))) != set(list(ExactComparison().tokenize(word2))),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
data61,clkhash,tests/test_comparators.py,test_exact_num_tokens,assert len(list(ExactComparison().tokenize(word))) == (1 if len(word) > 0 else 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties,"assert len(tokens) == 2 * resolution + 1, 'unexpected number of tokens'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties,"assert tokens == tokens_again, 'NumericComparison should be deterministic'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties,"assert len(set(tokens)) == 2 * resolution + 1, 'tokens should be unique'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_around_threshdistance,"assert num_common_tokens == 1, 'numbers exactly thresh_dist apart have 1 token in common'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_around_threshdistance,"assert 0 <= num_common_tokens <= 2, 'numbers close to thresh_dist apart have 0-2 tokens in common'",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_around_threshdistance,"assert len(set(cand_tokens).intersection(set(other_tokens))) == 0, 'numbers more than thresh_dist apart have no tokens in common'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_around_threshdistance,"assert len(set(cand_tokens).intersection(set(other_tokens))) >= len(cand_tokens) - 2, 'numbers that are not more than the modulus apart have all or all - 2 tokens in common'",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps,assert overlaps[0] == len(cand_tokens),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps,assert overlaps[-1] == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties_with_integers,"assert len(tokens) == 2 * resolution + 1, 'unexpected number of tokens'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties_with_integers,"assert tokens == tokens_again, 'NumericComparison should be deterministic'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties_with_integers,"assert len(set(tokens)) == 2 * resolution + 1, 'tokens should be unique'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_with_integers,"assert len(set(cand_tokens).intersection(set(other_tokens))) == 1, 'numbers exactly thresh_dist apart have 1 token in common'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_with_integers,"assert len(set(cand_tokens).intersection(set(other_tokens))) == 0, 'numbers more than thresh_dist apart have no tokens in common'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_with_integers,"assert len(set(cand_tokens).intersection(set(other_tokens))) >= len(cand_tokens) - 2, 'numbers that are not more than the modulus apart have all or all - 2 tokens in common'",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_with_integers,assert overlaps[0] == len(cand_tokens),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_with_integers,assert overlaps[-1] == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_similarities_hist,assert sorted(bin_edges) == list(bin_edges),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_similarities_hist,assert len(counts) == bins,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_similarities_hist,assert count == sum((bin_edge_left <= s < bin_edge_right for s in sims)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_similarities_hist,assert counts[-1] == sum((bin_edges[-2] <= s <= bin_edges[-1] for s in sims)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_cumul_number_matches_vs_threshold,assert len(counts) == len(thresholds) == steps + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_cumul_number_matches_vs_threshold,assert len(set(thresholds)) == len(thresholds),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_cumul_number_matches_vs_threshold,assert sorted(thresholds) == list(thresholds),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_cumul_number_matches_vs_threshold,assert count == len(solution),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert len(matches_nums) == len(nonmatches_nums) == bins,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert len(bin_boundaries) == bins + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert len(set(bin_boundaries)) == len(bin_boundaries),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert sorted(bin_boundaries) == list(bin_boundaries),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert matches_num == matches_num_true,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert nonmatches_num == nonmatches_num_true,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert matches_num == matches_num_true,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert nonmatches_num == nonmatches_num_true,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_nonmatch_index_score,"assert i == anonlink.stats.nonmatch_index_score(candidate_pairs, n)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_similarity_dice.py,test_bytes_bitarray_agree,assert res_bytes == res_ba,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_greedy_np,"assert all((matched[i] <= 1 and matched[j] <= 1 for _, (i, j) in candidate_pairs))",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_greedy_np,"assert any((tuple(sorted((r1, r2))) not in all_candidate_pairs for r1 in g1 for r2 in g2))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_greedy_2p,assert all((len(group) <= 2 for group in solution)),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_greedy_2p,"assert all((i in matched or j in matched for _, (i, j) in candidate_pairs))",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_greedy_2p,"assert (i, j) in matches or match_similarities.get(i, float('-inf')) >= sim or match_similarities.get(j, float('-inf')) >= sim",False,False,False,False,False,False,True,False,False,False,True,False,False,False,False
data61,anonlink,tests/test_solving.py,test_python_native_match_2p,assert solution_python == solution_native,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_python_native_match_np,assert solution_python == solution_native,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_pairs_from_groups,assert groups == _groups_from_pairs(pairs_from_groups(groups)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_probabilistic_python_native_match_2p,assert solution_python == solution_native,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_probabilistic_python_native_match_np,assert solution_python == solution_native,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_probabilistic_python_native_match_np_ndedup,assert solution_python == solution_native,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_probabilistic_nonprobabilistic_match,assert solution_probabilistic == solution_nonprobabilistic,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_probabilistic_nonprobabilistic_match_ndedup,assert solution_probabilistic == solution_nonprobabilistic,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_kvs,assert node[k] is v,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_leaf_with_leaf,assert api.leaf(leaf) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_leaf_with_node,assert api.leaf(node) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_walk,"assert isinstance(k, tuple)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_walk,assert len(k) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_get,"assert api.get(node, k) is v",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_has,"assert api.has(node, k) is True",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_has,"assert api.has(node, k + (0,)) is False",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_expand,assert count == len(result),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_expand,assert segments == result[-1],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_types,"assert type(api.get(node, ta)) is tt",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_leaves,assert api.leafy(v),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_match,"assert api.match(segments, glob) is True",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_match_nonmatching,"assert api.match(segments, glob) is False",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_set_walkable,"assert api.get(node, segments) is value",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_set_create_missing,"assert api.get(node, destination) is value",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_fold,assert count == len(tuple(api.walk(thing))),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_view,"assert api.get(view, segments) == api.get(node, segments)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_backends.py,test_compress_decompress_inversion,assert decompressed == original,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_backends.py,test_signatures_with_high_s,assert coerce_low_s(low_s_signature.s) == low_s_signature.s,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_backends.py,test_signatures_with_high_s,assert coerce_low_s(high_s) == low_s_signature.s,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_backends.py,test_signatures_with_high_s,"assert key_api.ecdsa_verify(message_hash, high_s_signature, private_key.public_key)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_public_key_generation_is_equal,assert native_public_key == coincurve_public_key,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_signing_is_equal,assert native_signature == coincurve_signature,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_signing_is_equal,assert native_non_recoverable_signature == coincurve_non_recoverable_signature,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_native_to_coincurve_recover,assert public_key_b == public_key_a,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_native_to_coincurve_recover,"assert backend_b.ecdsa_verify(message_hash, signature_a, public_key_b)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_coincurve_to_native_invalid_signatures,assert public_key_b == public_key_a,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_public_key_compression_is_equal,assert native_compressed_public_key == coincurve_compressed_public_key,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_public_key_decompression_is_equal,assert native_public_key == coincurve_public_key,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/core/test_utils_der.py,test_encode_decode_pairings,"assert (end_r, end_s) == (r, s)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_reader.py,test_balance,"self.assertRaisesRegex(SyntaxError, 'Too many `\\)`s.|This form is missing a `\\)`.', list, self.parser.reads(lissp))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_compiler.py,test_compile_pickle,"self.assertEqual(form, eval(compiler.Compiler().pickle(form)))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_compiler.py,test_compile_literal,"self.assertEqual(form, eval(compiler.Compiler().atom(form)))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_munger.py,test_munge_symbol,self.assertTrue(munger.munge(s).isidentifier()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_munger.py,test_un_qz_quote,self.assertTrue(('x' + x).isidentifier()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_munger.py,test_un_qz_quote,"self.assertEqual(char, munger._qz_decode(match))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
glue-viz,glue,glue/utils/tests/test_array.py,test_combine_slices_hypot,assert actual == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
hynek,argon2-cffi,tests/test_utils.py,test_decoded_str_len,assert len(bs) == _decoded_str_len(len(b64encode(bs).rstrip(b'='))),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
hynek,argon2-cffi,tests/test_low_level.py,test_argument_ranges,"assert verify_secret(hash, password, Type.I)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jarun,buku,tests/test_bukuDb.py,test_browse_by_index,assert not res,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jarun,buku,tests/test_bukuDb.py,test_browse_by_index,assert res,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jarun,buku,tests/test_bukuDb.py,test_browse_by_index,assert not res,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jarun,buku,tests/test_bukuDb.py,test_browse_by_index,assert not res,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jarun,buku,tests/test_bukuDb.py,test_browse_by_index,assert not res,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jarun,buku,tests/test_bukuDb.py,test_browse_by_index,assert not res,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jarun,buku,tests/test_bukuDb.py,test_browse_by_index,assert res,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ecdf_formal,"assert np.allclose(dcst.ecdf_formal(x, data), correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ecdf,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ecdf,"assert np.allclose(y, y_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_swap_random,assert len(a_out) == len(b_out) == len(a) == len(b),False,True,False,True,True,False,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_swap_random,"assert np.allclose(ab, ab_out, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_swap_random,assert ab[0] in ab_out,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_swap_random,assert ab[1] in ab_out,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_bootstrap_replicate_1d,"assert np.isnan(x) and np.isnan(x_correct, atol=atol, equal_nan=True) or np.isclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_bootstrap_replicate_1d,"assert np.isnan(x) and np.isnan(x_correct, atol=atol, equal_nan=True) or np.isclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_bootstrap_replicate_1d,"assert np.isnan(x) and np.isnan(x_correct, atol=atol, equal_nan=True) or np.isclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps_not_numbaable,assert not numba_success,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps_not_numbaable,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_pairs,"assert np.allclose(bs_reps, bs_reps_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_permutation_sample,"assert np.allclose(x_correct, x, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_permutation_sample,"assert np.allclose(y_correct, y, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_permutation_sample,"assert np.allclose(np.sort(np.concatenate((data_1, data_2))), np.sort(np.concatenate((x, y))), atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_perm_reps,"assert np.allclose(x_correct, x, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_perm_reps,"assert np.allclose(x_correct, x, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_perm_reps,"assert np.allclose(x_correct, x, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_perm_reps,"assert np.allclose(x_correct, x, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_diff_of_means,"assert np.allclose(dcst.diff_of_means(data_1, data_2), np.mean(data_1) - np.mean(data_2), atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_studentized_diff_of_means,"assert np.isnan(dcst.studentized_diff_of_means(data_1, data_2))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_studentized_diff_of_means,"assert np.isclose(dcst.studentized_diff_of_means(data_1, data_2), t)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_pearson_r,"assert np.isnan(dcst.pearson_r(x, y))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_pearson_r,"assert np.isclose(dcst.pearson_r(x, y), original.pearson_r(x, y))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_pearson_r,"assert np.isclose(dcst.pearson_r(x, y), np.corrcoef(x, y)[0, 1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ks_stat,"assert np.isclose(dcst.ks_stat(x, theor_data), correct)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ks_stat,"assert np.isclose(dcst.ks_stat(x, theor_data), correct)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ks_stat,"assert np.isclose(dcst.ks_stat(x, theor_data), correct)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data,"assert np.allclose(data, dcst_private._convert_data(data), atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data,"assert np.allclose(data, dcst_private._convert_data(df.loc[:, 'test']), atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data,"assert np.allclose(data, dcst_private._convert_data(s), atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data_scalar,assert type(conv_data) == np.ndarray,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data_scalar,assert len(conv_data) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data_scalar,"assert np.isclose(conv_data[0], data, atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_two_data,"assert np.allclose(x, x_correct, atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_two_data,"assert np.allclose(y, y_correct, atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_two_data,"assert np.allclose(x, x_correct, atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_two_data,"assert np.allclose(y, y_correct, atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
lidatong,dataclasses-json,tests/test_invariants.py,test_generic_encode_and_decode_are_inverses,assert dc.from_json(dc.to_json()) == dc,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
lordmauve,chopsticks,tests/test_pencode.py,test_roundtrip_bool,"assert isinstance(res, bool)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
meshy,framewirc,tests/test_message.py,test_split_garbage,assert len(line) <= max_length,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
meshy,framewirc,tests/test_message.py,test_split_garbage,"assert ''.join(map(bytes.decode, result)) == message",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nubank,fklearn,tests/preprocessing/test_splitting.py,test_stratified_split_dataset,assert abs(len(train_data) - expected_train_size) <= MAX_STRATIFIED_SPLIT_SIZE_DIFFERENCE,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nubank,fklearn,tests/preprocessing/test_splitting.py,test_stratified_split_dataset,assert abs(len(test_data) - expected_test_size) <= MAX_STRATIFIED_SPLIT_SIZE_DIFFERENCE,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
opendatacube,datacube-core,tests/storage/test_netcdfwriter.py,test_create_string_variable,assert returned == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
opendatacube,datacube-core,tests/test_utils_other.py,test_clamp,assert new_x == x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
opendatacube,datacube-core,tests/test_utils_other.py,test_clamp,assert lower_bound <= new_x <= upper_bound,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
opendatacube,datacube-core,tests/test_utils_other.py,test_gen_pass,assert len(password1) >= n_bytes,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
opendatacube,datacube-core,tests/test_utils_other.py,test_gen_pass,assert len(password2) >= n_bytes,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
opendatacube,datacube-core,tests/test_utils_other.py,test_gen_pass,assert password1 != password2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
opendatacube,datacube-core,tests/test_utils_other.py,test_write_user_secret_file,assert txt == txt_back,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
opendatacube,datacube-core,tests/test_utils_other.py,test_write_user_secret_file,assert slurp(fname) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_str,assert (str(e) == repr(e)) is add_str,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_hash_mirrors_eq,assert i == i,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_hash_mirrors_eq,assert hash(i) == hash(i),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_init,"assert e.value.args[0].endswith(""__init__() got an unexpected keyword argument 'a'"")",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_no_init_default,"assert (42, [], 23) == (i._a, i._b, i.c)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_validator_others,assert 1 == i.a,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_validator_others,assert 'foo' == i.b,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_instance,assert 'Passed object must be a class.' == e.value.args[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_fields,"assert all((isinstance(a, Attribute) for a in fields(C)))",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_fields_properties,"assert getattr(fields(C), attribute.name) is attribute",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_instance,assert 'Passed object must be a class.' == e.value.args[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_fields_dict,"assert isinstance(d, dict)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_fields_dict,assert list(fields(C)) == list(d.values()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_fields_dict,assert [a.name for a in fields(C)] == list(d),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_convert_property,assert c.x == val + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_convert_property,assert c.y == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_converter_factory_property,assert c.x == val + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_converter_factory_property,assert c.y == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_metadata_present,assert class_attr.metadata is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
python-attrs,attrs,tests/test_make.py,test_metadata_present,assert len(class_attr.metadata) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_metadata_present,assert hyp_attr.metadata == class_attr.metadata,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_metadata_present,assert hyp_attr.metadata[k] == class_attr.metadata[k],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_metadata_present,assert hyp_attr.metadata.get(k) == class_attr.metadata.get(k),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_empty_metadata_singleton,assert a.metadata is fields(C)[0].metadata,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_empty_countingattr_metadata_independent,assert x.metadata is not y.metadata,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
python-attrs,attrs,tests/test_make.py,test_not_none_metadata,assert len(fields(C)) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_not_none_metadata,assert cls_a.metadata != {},False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
python-attrs,attrs,tests/test_make.py,test_not_none_metadata,assert cls_a.metadata == raw_a.metadata,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_functional.py,test_programmatic,"assert (Attribute(name='a', alias='a', default=NOTHING, validator=None, repr=True, cmp=None, eq=True, order=True, hash=None, init=True, inherited=False), Attribute(name='b', alias='b', default=NOTHING, validator=None, repr=True, cmp=None, eq=True, order=True, hash=None, init=True, inherited=False)) == attr.fields(PC)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_shallow,"assert {'x': 1, 'y': 2} == asdict(C(x=1, y=2), False, dict_factory=dict_factory)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_recurse,"assert {'x': {'x': 1, 'y': 2}, 'y': {'x': 3, 'y': 4}} == asdict(C(C(1, 2), C(3, 4)), dict_factory=dict_class)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_filter,"assert {'x': {'x': 1}} == asdict(C(C(1, 2), C(3, 4)), filter=lambda a, v: a.name != 'y', dict_factory=dict_factory)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_sets_no_retain,"assert {'x': 1, 'y': [1, 2, 3]} == d",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_dicts,"assert {'x': 1, 'y': {'a': {'x': 4, 'y': 5}}} == res",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_dicts,"assert isinstance(res, dict_factory)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_roundtrip,"assert isinstance(dict_instance, dict_class)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_roundtrip,assert instance == roundtrip_instance,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_asdict_preserve_order,assert [a.name for a in fields(cls)] == list(dict_instance.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_shallow,"assert tuple_factory([1, 2]) == astuple(C(x=1, y=2), False, tuple_factory=tuple_factory)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_recurse,"assert tuple_factory([tuple_factory([1, 2]), tuple_factory([3, 4])]) == astuple(C(C(1, 2), C(3, 4)), tuple_factory=tuple_factory)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_filter,"assert tuple_factory([tuple_factory([1])]) == astuple(C(C(1, 2), C(3, 4)), filter=lambda a, v: a.name != 'y', tuple_factory=tuple_factory)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_dicts,"assert tuple_factory([1, {'a': tuple_factory([4, 5])}]) == res",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_dicts,"assert isinstance(res, tuple_factory)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_roundtrip,"assert isinstance(tuple_instance, tuple_class)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_roundtrip,assert instance == roundtrip_instance,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_sets_no_retain,"assert (1, [1, 2, 3]) == d",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_no_changes,assert i1 is not i2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
python-attrs,attrs,tests/test_funcs.py,test_no_changes,assert i1 == i2,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_change,"assert getattr(changed, k) == v",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_unknown,"assert (f'aaaa is not an attrs attribute on {C!r}.',) == e.value.args",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_no_changes,assert i1 is not i2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
python-attrs,attrs,tests/test_funcs.py,test_no_changes,assert i1 == i2,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_change,"assert getattr(changed, name) == change_dict[name.replace('_', '')]",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_unknown,assert e.value.args[0].endswith(expected),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_enable_push,assert e.value.error_code == h2.errors.ErrorCodes.PROTOCOL_ERROR,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_enable_push,assert s.enable_push == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_enable_push,assert e.value.error_code == h2.errors.ErrorCodes.PROTOCOL_ERROR,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_enable_push,assert s[h2.settings.SettingCodes.ENABLE_PUSH] == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_vals_for_initial_window_size,assert s.initial_window_size == val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_vals_for_initial_window_size,assert e.value.error_code == h2.errors.ErrorCodes.FLOW_CONTROL_ERROR,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_vals_for_initial_window_size,assert s.initial_window_size == 65535,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_vals_for_initial_window_size,assert e.value.error_code == h2.errors.ErrorCodes.FLOW_CONTROL_ERROR,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_vals_for_initial_window_size,assert s[h2.settings.SettingCodes.INITIAL_WINDOW_SIZE] == 65535,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_max_frame_size,assert s.max_frame_size == val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_max_frame_size,assert e.value.error_code == h2.errors.ErrorCodes.PROTOCOL_ERROR,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_max_frame_size,assert s.max_frame_size == 16384,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_max_frame_size,assert e.value.error_code == h2.errors.ErrorCodes.PROTOCOL_ERROR,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_max_frame_size,assert s[h2.settings.SettingCodes.MAX_FRAME_SIZE] == 16384,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_max_header_list_size,assert s.max_header_list_size == val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_max_header_list_size,assert e.value.error_code == h2.errors.ErrorCodes.PROTOCOL_ERROR,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_max_header_list_size,assert s.max_header_list_size is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_max_header_list_size,assert e.value.error_code == h2.errors.ErrorCodes.PROTOCOL_ERROR,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_enable_connect_protocol,assert e.value.error_code == h2.errors.ErrorCodes.PROTOCOL_ERROR,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_enable_connect_protocol,assert s.enable_connect_protocol == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_enable_connect_protocol,assert e.value.error_code == h2.errors.ErrorCodes.PROTOCOL_ERROR,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_cannot_set_invalid_values_for_enable_connect_protocol,assert s[h2.settings.SettingCodes.ENABLE_CONNECT_PROTOCOL] == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_equality_reflexive,assert settings == settings,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_equality_reflexive,assert not settings != settings,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_equality_multiple,assert settings == o_settings,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_equality_multiple,assert not settings != o_settings,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_equality_multiple,assert settings != o_settings,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
python-hyper,h2,test/test_settings.py,test_equality_multiple,assert not settings == o_settings,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_another_type_equality,assert settings != obj,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
python-hyper,h2,test/test_settings.py,test_another_type_equality,assert not settings == obj,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_delegated_eq,assert (settings == delg) == [delg],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_settings.py,test_delegated_eq,assert (settings != delg) == [delg],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_idna_text_min_max,"self.assertRaises(AssertionError, data.draw, idna_text(min_size=0))",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_idna_text_min_max,"self.assertRaises(AssertionError, data.draw, idna_text(max_size=0))",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_port_numbers_bounds,"self.assertGreaterEqual(port, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_port_numbers_bounds,"self.assertLessEqual(port, 65535)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_port_numbers_bounds_allow_zero,"self.assertGreaterEqual(port, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_port_numbers_bounds_allow_zero,"self.assertLessEqual(port, 65535)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_hostnames_idn_nolead,self.assertTrue(hostname == hostname.lstrip(digits)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_hostnames_ascii_nolead,self.assertTrue(hostname == hostname.lstrip(digits)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_paths,"self.assertNotIn('#/?', segment)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_encoded_urls,"self.assertIsInstance(url, EncodedURL)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_decoded_urls,"self.assertIsInstance(url, DecodedURL)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-hyper,h2,test/test_basic_logic.py,test_changing_max_frame_size,assert len(events) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_basic_logic.py,test_changing_max_frame_size,"assert isinstance(events[0], h2.events.DataReceived)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
python-hyper,h2,test/test_basic_logic.py,test_changing_max_frame_size,assert events[0].flow_controlled_length == frame_size,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_flow_control_window.py,test_acknowledging_1024_bytes_when_empty_increments,assert c.data_to_send() == expected_data,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_flow_control_window.py,test_connection_only_empty,assert c.data_to_send() == expected_data,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_flow_control_window.py,test_mixing_update_forms,assert c.data_to_send() == expected_data,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_events.py,test_building_settings_from_scratch,assert e.changed_settings[setting].setting == setting,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_events.py,test_building_settings_from_scratch,assert e.changed_settings[setting].original_value is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_events.py,test_building_settings_from_scratch,assert e.changed_settings[setting].new_value == new_value,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_events.py,test_only_reports_changed_settings,assert len(e.changed_settings) == len(new_settings_dict),False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_events.py,test_only_reports_changed_settings,assert sorted(list(e.changed_settings.keys())) == sorted(list(new_settings_dict.keys())),False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_events.py,test_correctly_reports_changed_settings,assert e.changed_settings[setting].setting == setting,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_events.py,test_correctly_reports_changed_settings,assert e.changed_settings[setting].original_value == original_value,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,h2,test/test_events.py,test_correctly_reports_changed_settings,assert e.changed_settings[setting].new_value == new_value,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-hyper,hpack,test/test_hpack.py,test_ordering,assert special_keys == received_special,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,hpack,test/test_hpack.py,test_ordering,assert boring_keys == received_boring,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,hpack,test/test_hpack.py,test_ordering_applies_to_encoding,assert expected_special == received_special,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-hyper,hpack,test/test_hpack.py,test_ordering_applies_to_encoding,assert expected_boring == received_boring,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-hyper,hpack,test/test_encode_decode.py,test_encode_positive_integer_always_valid,"assert isinstance(result, bytearray)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
python-hyper,hpack,test/test_encode_decode.py,test_encode_positive_integer_always_valid,assert len(result) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-hyper,hpack,test/test_encode_decode.py,test_encode_decode_round_trips,assert integer == decoded_integer,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,hpack,test/test_encode_decode.py,test_encode_decode_round_trips,assert consumed > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(StellarLuminosity(R, None, L).T, T, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(StellarLuminosity(None, T, L).R, R, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(KeplersThirdLaw(None, M_s, P, M_p).a, a, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(KeplersThirdLaw(a, None, P, M_p).M_s, M_s, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(KeplersThirdLaw(a, M_s, P, None).M_p, M_p, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(SurfaceGravity(M, R, None).g, g, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(SurfaceGravity(M, None, g).R, R, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(SurfaceGravity(None, R, g).M, M, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(TransitDepth(R_s, R_p).depth, depth, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(TransitDepth(R_s, None, depth).R_p, R_p, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(TransitDepth(None, R_p, depth).R_s, R_s, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(Density(M, None, density).R, R, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(Density(None, R, density).M, M, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(eq.ImpactParameter(a, None, i, b).R_s, R_s, 3)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(eq.ImpactParameter(None, R_s, i, b).a, a, 3)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
seatgeek,fuzzywuzzy,test_fuzzywuzzy_hypothesis.py,test_identical_strings_extracted,assert result != [],False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
seatgeek,fuzzywuzzy,test_fuzzywuzzy_hypothesis.py,test_identical_strings_extracted,"assert (choice, 100) in result",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
seatgeek,fuzzywuzzy,test_fuzzywuzzy_hypothesis.py,test_only_identical_strings_extracted,assert result != [],False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
seatgeek,fuzzywuzzy,test_fuzzywuzzy_hypothesis.py,test_only_identical_strings_extracted,assert pchoice == processor(r[0]),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
