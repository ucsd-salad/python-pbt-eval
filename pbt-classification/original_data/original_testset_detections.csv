user,project_name,namespace,function,assert_stmt,roundtrip,partial_roundtrip,hetero_gv_roundtrip,commutative,partial_commutative,const_eq,const_inclusion,inclusion,typecheck,const_bounds,gen_val_bounds,cross_gv_bounds,exception,const_neq,gen_val_neq
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('_arm_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertEqual(token['_chocolate_id'], 77)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('b', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertEqual(p['a'], 5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertEqual(p['b'], 8)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_connection.py,test_invalid_ending_name_connect,"self.assertRaises(RuntimeError, SQLiteConnection, engine_str)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(comp[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_ancestor_id', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(comp[0][0]['_ancestor_id'], 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(comp[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_parent_idx', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,self.assertIsNotNone(instance),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,self.assertIsNone(retcode),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,op.assert_has_calls(task_id_calls),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,log_op.assert_has_calls(task_id_calls),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_elements.py,test_partial_from_element,assert partial.id_ == id_,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_elements.py,test_partial_from_element,assert partial.part_total == len(packets),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_elements.py,test_partial_from_element,assert len(partial) == partial.part_total,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_elements.py,test_partial_from_element,assert partial.to_element() == element,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_elements.py,test_partial_to_packets,assert partial.to_packets() == packets,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_packets.py,test_build_intro_packet,"assert isinstance(packets.IntroductionPacket.build(data), packets.IntroductionPacket)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_packets.py,test_build_regular_packet,"assert isinstance(packets.RegularPacket.build(data), packets.RegularPacket)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_packets.py,test_build_reply_packet,"assert isinstance(packets.ReplyPacket.build(data), packets.ReplyPacket)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_packets.py,test_build_request_packet,"assert isinstance(packets.RequestPacket.build(data), packets.RequestPacket)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_packets.py,test_build_handshake_packet,"assert isinstance(packets.HandshakePacket.build(data), packets.HandshakePacket)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Apress,clean-python,chapter08/hypothesis_use_for_property_testing.py,test_decode_inverts_encode,assert decode(encode(s)) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/strategies/test_titfortat.py,test_is_tit_for_tat_with_no_noise,"self.assertEqual(m1.play(), m2.play())",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_filtering.py,test_boolean_filtering,"self.assertEqual(comprehension, filtered)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_filtering.py,test_memory_depth_filtering,"self.assertEqual(min_comprehension, min_filtered)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_filtering.py,test_memory_depth_filtering,"self.assertEqual(max_comprehension, max_filtered)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_filtering.py,test_memory_depth_filtering,"self.assertEqual(comprehension, filtered)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_filtering.py,test_makes_use_of_filtering,"self.assertEqual(comprehension, filtered, msg='classifier: {}'.format(classifier))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_moran.py,test_seeding_equality,"self.assertEqual(mp1.populations, mp2.populations)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_moran.py,test_property_players,"self.assertEqual(populations, mp.populations)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_moran.py,test_property_players,"self.assertIn(mp.winning_strategy_name, [str(p) for p in players])",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_resultset.py,test_summarise_without_failure,"self.assertIsInstance(sd, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_resultset.py,test_summarise_without_failure,"self.assertTrue(total_rate in [0, 1])",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_resultset.py,test_summarise_without_failure,self.assertTrue(0 <= player.Initial_C_rate <= 1),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/strategies/test_player.py,test_clone_reproducible_play,"self.assertEqual(m1.result, m2.result)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/strategies/test_player.py,test_clone_reproducible_play,"self.assertEqual(op, op_clone)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/strategies/test_player.py,test_memory_depth_upper_bound,"self.assertTrue(test_memory(player=player, opponent=opponent, seed=seed, turns=turns, memory_length=max_memory), msg='{} failed for seed={} and opponent={}'.format(player.name, seed, opponent))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertIsInstance(results, axl.ResultSet)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertEqual(results.num_players, len(tournament.players))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertEqual(results.players, [str(p) for p in tournament.players])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_play_matches,"self.assertEqual(len(index_pair), 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_play_matches,"self.assertEqual(len(plays), self.test_repetitions)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_play_matches,"self.assertEqual(len(actions), turns)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_play_matches,"self.assertEqual(len(results), 10)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_seeding_equality,"self.assertEqual(results1.wins, results2.wins)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_seeding_equality,"self.assertEqual(results1.match_lengths, results2.match_lengths)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_seeding_equality,"self.assertEqual(results1.scores, results2.scores)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_seeding_equality,"self.assertEqual(results1.cooperation, results2.cooperation)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertIsInstance(results, axl.ResultSet)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertEqual(results.num_players, len(tournament.players))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertEqual(results.players, [str(p) for p in tournament.players])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.ranked_names, spatial_results.ranked_names)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.num_players, spatial_results.num_players)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.repetitions, spatial_results.repetitions)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.payoff_diffs_means, spatial_results.payoff_diffs_means)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.payoff_matrix, spatial_results.payoff_matrix)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.payoff_stddevs, spatial_results.payoff_stddevs)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.payoffs, spatial_results.payoffs)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.cooperating_rating, spatial_results.cooperating_rating)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.cooperation, spatial_results.cooperation)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.normalised_cooperation, spatial_results.normalised_cooperation)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.normalised_scores, spatial_results.normalised_scores)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.good_partner_matrix, spatial_results.good_partner_matrix)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.good_partner_rating, spatial_results.good_partner_rating)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.match_lengths, spatial_results.match_lengths)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.ranked_names, spatial_results.ranked_names)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.wins, spatial_results.wins)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.scores, spatial_results.scores)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.cooperation, spatial_results.cooperation)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_one_turn_tournament,"self.assertEqual(prob_end_results.scores, one_turn_results.scores)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_one_turn_tournament,"self.assertEqual(prob_end_results.wins, one_turn_results.wins)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_one_turn_tournament,"self.assertEqual(prob_end_results.cooperation, one_turn_results.cooperation)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/strategies/test_meta.py,test_players_return_valid_actions,"self.assertTrue(player_actions <= set((C, D)))",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_matches.py,test_outcome_repeats,"self.assertEqual(matches[0].play(), matches[1].play())",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_matches.py,test_outcome_repeats,"self.assertEqual(matches[1].play(), matches[2].play())",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_matches.py,test_outcome_repeats_stochastic,"self.assertEqual(results[0], results[1])",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_matches.py,test_outcome_repeats_stochastic,"self.assertEqual(results[1], results[2])",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_fingerprint.py,test_fingerprint_reproducibility,"self.assertEqual(data, data2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_strategy_utils.py,test_finds_cycle,self.assertIsNotNone(detected),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_strategy_utils.py,test_finds_cycle,"self.assertIn(''.join(map(str, detected)), ''.join(map(str, cycle)))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.result, [])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.players, [p1, p2])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.turns, turns)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.prob_end, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.noise, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.game.RPST(), game.RPST())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.players[0].match_attributes['length'], turns)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match._cache, {})",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.result, [])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.players, [p1, p2])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.turns, float('inf'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.prob_end, prob_end)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.noise, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.game.RPST(), game.RPST())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.players[0].match_attributes['length'], float('inf'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match._cache, {})",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.result, [])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.players, [p1, p2])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.turns, turns)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.prob_end, prob_end)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.noise, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.game.RPST(), game.RPST())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.players[0].match_attributes['length'], float('inf'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match._cache, {})",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_non_default_attributes,"self.assertEqual(match.players[0].match_attributes['length'], 500)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_non_default_attributes,"self.assertEqual(match.players[0].match_attributes['noise'], 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_len,"self.assertEqual(len(match), turns)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_tournament.py,test_big_tournaments,"self.assertIsNone(tournament.play(progress_bar=False, filename=filename, build_results=False))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match_generator.py,test_build_match_chunks,"self.assertEqual(sorted(match_definitions), sorted(expected_match_definitions))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match_generator.py,test_seeding_equality,"self.assertEqual(chunks1, chunks2)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match_generator.py,test_spatial_build_match_chunks,"self.assertEqual(sorted(match_definitions), sorted(expected_match_definitions))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(strategies, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(len(strategies), 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(len(strategies), 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIsInstance(strategies, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(match, axl.Match)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(len(match), 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(len(match), 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(match.noise, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(match.noise, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_no_noise,"self.assertIsInstance(match, axl.Match)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_no_noise,"self.assertGreaterEqual(len(match), 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_no_noise,"self.assertLessEqual(len(match), 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_no_noise,"self.assertEqual(match.noise, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.turns, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.turns, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.noise, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.noise, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.repetitions, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.repetitions, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIn(str(p), basic_player_names)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.prob_end, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.prob_end, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.noise, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.noise, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.repetitions, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.repetitions, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIn(str(p), basic_player_names)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.turns, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.turns, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.noise, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.noise, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.repetitions, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.repetitions, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIn(str(p), basic_player_names)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.prob_end, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.prob_end, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.noise, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.noise, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.repetitions, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.repetitions, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIn(str(p), basic_player_names)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(game, axl.Game)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,self.assertTrue(2 * r > t + s and t > r > p > s),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_unconstrained,"self.assertIsInstance(game, axl.Game)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_inequality_filter,"self.assertTrue(passes_operator_filter(self.TestStrategy, 'memory_depth', smaller, operator.ge))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_inequality_filter,"self.assertTrue(passes_operator_filter(self.TestStrategy, 'memory_depth', larger, operator.le))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_inequality_filter,"self.assertFalse(passes_operator_filter(self.TestStrategy, 'memory_depth', smaller, operator.le))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_inequality_filter,"self.assertFalse(passes_operator_filter(self.TestStrategy, 'memory_depth', larger, operator.ge))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_passes_filterset,"self.assertTrue(passes_filterset(self.TestStrategy, full_passing_filterset_1))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_passes_filterset,"self.assertFalse(passes_filterset(self.TestStrategy, full_failing_filterset))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_passes_filterset,"self.assertFalse(passes_filterset(self.TestStrategy, sparse_failing_filterset))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_init,"self.assertEqual(game.scores, expected_scores)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_RPST,"self.assertEqual(game.RPST(), (r, p, s, t))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_score,"self.assertEqual(game.score((C, C)), (r, r))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_score,"self.assertEqual(game.score((D, D)), (p, p))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_score,"self.assertEqual(game.score((C, D)), (s, t))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_score,"self.assertEqual(game.score((D, C)), (t, s))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_repr,"self.assertEqual(expected_repr, game.__repr__())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_repr,"self.assertEqual(expected_repr, str(game))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_integer_actions,"self.assertEqual(game.score(key), game.score(value))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_invalid_matrices,"self.assertEqual(error_raised, A.shape != B.transpose().shape)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_repr,"self.assertEqual(expected_repr, asymgame.__repr__())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_repr,"self.assertEqual(expected_repr, str(asymgame))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_equality,self.assertFalse(asymgame1 == 'foo'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_equality,"self.assertEqual(asymgame1, asymgame1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_equality,"self.assertEqual(asymgame2, asymgame2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_equality,"self.assertEqual(asymgame1 == asymgame2, asymgame1.A.all() == asymgame2.A.all() and asymgame1.B.all() == asymgame2.B.all())",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BBVA,apicheck,tools/curl/test/test_parse_hypothesis.py,test_decode_random_headers,assert reqres['request']['headers'] == headers,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BitBotFactory,MikaLendingBot,tests/test_MarketAnalysis.py,test_get_percentile,assert np_perc == math_perc,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos1.position == pos1,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(pos1.distance_to(pos2) - dist) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(pos1.distance_to_point2(pos2) - dist) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(pos1._distance_squared(pos2) ** 0.5 - dist) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert pos1.sort_by_distance(points2) == sorted(points2, key=lambda p: pos1._distance_squared(p))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos1.closest(points2) == pos1,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos1.closest(points) in {p for p in points2 if abs(pos1.distance_to(p) - dist_closest_point) < epsilon},False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(pos1.distance_to_closest(points) - pos1._distance_squared(closest_point) ** 0.5) < epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos1.furthest(points) in {p for p in points2 if abs(pos1.distance_to(p) - dist_furthest_point) < epsilon},False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(pos1.distance_to_furthest(points) - pos1._distance_squared(furthest_point) ** 0.5) < epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert pos1.offset(pos2) == Point2((pos1.x + pos2.x, pos1.y + pos2.y))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert pos1.unit_axes_towards(pos2) != Point2((0, 0))",False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(dist1 - dist2) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(dist1 - dist2) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(dist1 - dist2) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos1 == pos1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos2 == pos2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos3 == pos3,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert isinstance(hash(pos1), int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert isinstance(hash(pos2), int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert isinstance(hash(pos3), int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.x == x1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.y == y1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.to2 == pos1,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1.to3 == Point3((x1, y1, 0))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(pos1.length - length1) < 0.001,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(pos1.normalized.is_same_as(pos1 / length1)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(normalized1.length - 1) < 0.001,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(pos2.length - length2) < 0.001,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(pos2.normalized.is_same_as(normalized2)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(normalized2.length - 1) < 0.001,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert isinstance(pos1.distance_to(pos2), float)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert isinstance(pos1.distance_to_point2(pos2), float)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.random_on_distance(x2) != pos1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1.towards_with_random_angle(pos2, x2) != pos1",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.towards_with_random_angle(pos2) != pos1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert len(intersections1) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert len(intersections2) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert len(neighbors4) == 4,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert len(neighbors8) == 8,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1 + pos2 == Point2((x1 + x2, y1 + y2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1 - pos2 == Point2((x1 - x2, y1 - y2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1 * pos2 == Point2((x1 * x2, y1 * y2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1 / pos2 == Point2((x1 / x2, y1 / y2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1.is_same_as(pos2, dist=0.1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.unit_axes_towards(pos2) == pos1.direction_vector(pos2),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point3,assert pos1.z == z1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point3,assert pos1.to3 == pos1,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_size,assert size.width == w,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_size,assert size.height == h,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.x == x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.y == y,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.width == w,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.height == h,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.right == x + w,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.top == y + h,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,"assert rect.size == Size((w, h))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,"assert rect.center == Point2((rect.x + rect.width / 2, rect.y + rect.height / 2))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,"assert rect.offset((1, 1)) == Rect((x + 1, y + 1, w, h))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.transitive_nodes), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.nodes), 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(str(Q.nodes[0]), 'Arrival Node')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(str(Q.nodes[-1]), 'Exit Node')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual([str(n) for n in Q.transitive_nodes], ['Node 1'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.inter_arrival_times), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.inter_arrival_times[1]), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.service_times), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual(len(Q.service_times[1]), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_init_method_h,"self.assertEqual([str(obs) for obs in Q.nodes], ['Arrival Node', 'Node 1', 'Exit Node'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_simulation.py,test_mminf_node,"self.assertEqual(sum(waits), 0.0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_uniform_dist_hypothesis,self.assertTrue(ul <= Nu.simulation.service_times[Nu.id_number]['Customer']._sample() <= uh),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_uniform_dist_hypothesis,self.assertTrue(ul <= Nu.simulation.inter_arrival_times[Nu.id_number]['Customer']._sample() <= uh),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_deterministic_dist_hypothesis,"self.assertEqual(Nd.simulation.service_times[Nd.id_number]['Customer']._sample(), d)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_deterministic_dist_hypothesis,"self.assertEqual(Nd.simulation.inter_arrival_times[Nd.id_number]['Customer']._sample(), d)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_triangular_dist_hypothesis,self.assertTrue(tl <= Nt.simulation.service_times[Nt.id_number]['Customer']._sample() <= th),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_triangular_dist_hypothesis,self.assertTrue(tl <= Nt.simulation.inter_arrival_times[Nt.id_number]['Customer']._sample() <= th),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_exponential_dist_hypothesis,self.assertTrue(Ne.simulation.service_times[Ne.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_exponential_dist_hypothesis,self.assertTrue(Ne.simulation.inter_arrival_times[Ne.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_gamma_dist_hypothesis,self.assertTrue(Ng.simulation.service_times[Ng.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_gamma_dist_hypothesis,self.assertTrue(Ng.simulation.inter_arrival_times[Ng.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_lognormal_dist_hypothesis,self.assertTrue(Nl.simulation.service_times[Nl.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_lognormal_dist_hypothesis,self.assertTrue(Nl.simulation.inter_arrival_times[Nl.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_weibull_dist_hypothesis,self.assertTrue(Nw.simulation.service_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_weibull_dist_hypothesis,self.assertTrue(Nw.simulation.inter_arrival_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_normal_dist_hypothesis,self.assertTrue(Nw.simulation.service_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_normal_dist_hypothesis,self.assertTrue(Nw.simulation.inter_arrival_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_empirical_dist_hypothesis,"self.assertTrue(Nem.simulation.service_times[Nem.id_number]['Customer']._sample() in set([7.0, 7.1, 7.2, 7.3, 7.7, 7.8]))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_empirical_dist_hypothesis,self.assertTrue(Nem.simulation.inter_arrival_times[Nem.id_number]['Customer']._sample() in set(my_empirical_dist)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_pmf_dist_hypothesis,self.assertTrue(Nc.simulation.service_times[Nc.id_number]['Customer']._sample() in set(cust_vals)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_pmf_dist_hypothesis,self.assertTrue(Nc.simulation.inter_arrival_times[Nc.id_number]['Customer']._sample() in set(cust_vals)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_sequential_dist_hypothesis,"self.assertEqual(inter_arrivals, expected_inter_arrival_times[1:])",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_sequential_dist_hypothesis,"self.assertEqual(services, expected_service_times)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_erlang_dist_hypothesis,self.assertTrue(Nw.simulation.service_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_sampling.py,test_sampling_erlang_dist_hypothesis,self.assertTrue(Nw.simulation.inter_arrival_times[Nw.id_number]['Customer']._sample() >= 0.0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_auxiliary.py,test_seedh,"self.assertEqual(a1, a2)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_auxiliary.py,test_seedh,"self.assertEqual(b1, b2)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_network.py,test_init_method_h,"self.assertEqual(SC.number_of_servers, number_of_servers)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_network.py,test_init_method_h,"self.assertEqual(SC.queueing_capacity, queueing_capacity)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_network.py,test_init_method_h,"self.assertEqual(SC.class_change_matrix, class_change_matrix)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_node.py,test_utilisation_always_1_or_less,"self.assertGreaterEqual(srvr.total_time, srvr.busy_time)",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
CiwPython,Ciw,ciw/tests/test_node.py,test_utilisation_always_1_or_less,"self.assertLessEqual(Q.transitive_nodes[0].server_utilisation, 1.0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_node.py,test_utilisation_always_1_or_less,"self.assertGreaterEqual(Q.transitive_nodes[0].server_utilisation, 0.0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.customer_class, customer_class)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.previous_class, customer_class)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.priority_class, priority_class)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.id_number, id_num)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.service_start_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.service_time, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.service_end_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.arrival_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.destination, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.queue_size_at_arrival, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.queue_size_at_departure, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_1h,"self.assertEqual(i.data_records, [])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.customer_class, 'Customer')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.previous_class, 'Customer')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.priority_class, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.id_number, id_num)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.service_start_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.service_time, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.service_end_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.arrival_date, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.destination, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.queue_size_at_arrival, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.queue_size_at_departure, False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_init_method_2h,"self.assertEqual(i.data_records, [])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_individual.py,test_repr_methodh,"self.assertEqual(str(i), 'Individual ' + str(id_num))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.id_number, id_number)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.customer_class, customer_class)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.node, node)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.arrival_date, arrival_date)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.waiting_time, waiting_time)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.service_start_date, service_start_date)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.service_time, service_time)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.service_end_date, service_end_date)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.time_blocked, time_blocked)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.exit_date, exit_date)",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.destination, destination)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.queue_size_at_arrival, queue_size_at_arrival)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.queue_size_at_departure, queue_size_at_departure)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.server_id, server_id)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
CiwPython,Ciw,ciw/tests/test_data_record.py,test_init_methodh,"self.assertEqual(r.record_type, 'service')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_diffing.py,test_deployment_diffing,"self.assertThat(should_b_b, Equals(deployment_b))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_diffing.py,test_deployment_diffing_composable,"self.assertThat(full_diff.apply(deployments[0]), Equals(deployments[-1]))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_roundtrip,"self.assertEqual(decoded_deployment, deployment)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_to_unserialized_json,"self.assertEquals(wire_decode(json.dumps(unserialized)), deployment)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_upgrade_configuration_versions,"self.assertEqual(json.loads(upgraded_json), json.loads(target_json))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_no_hash_collisions,"self.assertThat(should_be_equal, Is(True))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_no_hash_collisions,"self.assertThat(hash_a, Equals(hash_b))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_no_hash_collisions,"self.assertThat(hash_a, Not(Equals(hash_b)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_algebraic.py,test_valid_strategy,"self.assertIsInstance(AlgebraicType(**args), AlgebraicType)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_algebraic.py,test_extra_attributes,"self.assertIn(""can't be specified in state"", exc.invariant_errors[0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_algebraic.py,test_missing_attributes,"self.assertIn('must be specified in state', exc.invariant_errors[0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_algebraic.py,test_invalid_states,"self.assertIn('can only be in states', exc.invariant_errors[0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
