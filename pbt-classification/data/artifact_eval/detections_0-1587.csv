user,project_name,namespace,function,assert_stmt,roundtrip,partial_roundtrip,hetero_gv_roundtrip,commutative,partial_commutative,const_eq,const_inclusion,inclusion,typecheck,const_bounds,gen_val_bounds,cross_gv_bounds,exception,const_neq,gen_val_neq
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_random.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('_arm_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertEqual(token['_chocolate_id'], 77)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertIn('b', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertEqual(p['a'], 5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_thompson.py,test_next,"self.assertEqual(p['b'], 8)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_connection.py,test_invalid_ending_name_connect,"self.assertRaises(RuntimeError, SQLiteConnection, engine_str)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_quasirandom.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(comp[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_ancestor_id', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(comp[0][0]['_ancestor_id'], 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', token)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(token['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('a', p)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(p['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(p['a'], 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', res[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(res[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertGreaterEqual(res[0][0]['a'], 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertLess(res[0][0]['a'], 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_chocolate_id', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertEqual(comp[0][0]['_chocolate_id'], 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
AIworx-Labs,chocolate,tests/test_cmaes.py,test_losses,"self.assertIn('_parent_idx', comp[0][0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,self.assertIsNotNone(instance),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,self.assertIsNone(retcode),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,op.assert_has_calls(task_id_calls),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ASMfreaK,habitipy,tests/test_cli.py,test_tasks_change,log_op.assert_has_calls(task_id_calls),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_elements.py,test_partial_from_element,assert partial.id_ == id_,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_elements.py,test_partial_from_element,assert partial.part_total == len(packets),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_elements.py,test_partial_from_element,assert len(partial) == partial.part_total,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_elements.py,test_partial_from_element,assert partial.to_element() == element,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_elements.py,test_partial_to_packets,assert partial.to_packets() == packets,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_packets.py,test_build_intro_packet,"assert isinstance(packets.IntroductionPacket.build(data), packets.IntroductionPacket)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_packets.py,test_build_regular_packet,"assert isinstance(packets.RegularPacket.build(data), packets.RegularPacket)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_packets.py,test_build_reply_packet,"assert isinstance(packets.ReplyPacket.build(data), packets.ReplyPacket)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_packets.py,test_build_request_packet,"assert isinstance(packets.RequestPacket.build(data), packets.RequestPacket)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
AnemoneLabs,unmessage,tests/test_packets.py,test_build_handshake_packet,"assert isinstance(packets.HandshakePacket.build(data), packets.HandshakePacket)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Apress,clean-python,chapter08/hypothesis_use_for_property_testing.py,test_decode_inverts_encode,assert decode(encode(s)) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/strategies/test_titfortat.py,test_is_tit_for_tat_with_no_noise,"self.assertEqual(m1.play(), m2.play())",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_filtering.py,test_boolean_filtering,"self.assertEqual(comprehension, filtered)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_filtering.py,test_memory_depth_filtering,"self.assertEqual(min_comprehension, min_filtered)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_filtering.py,test_memory_depth_filtering,"self.assertEqual(max_comprehension, max_filtered)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_filtering.py,test_memory_depth_filtering,"self.assertEqual(comprehension, filtered)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_filtering.py,test_makes_use_of_filtering,"self.assertEqual(comprehension, filtered, msg='classifier: {}'.format(classifier))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_moran.py,test_seeding_equality,"self.assertEqual(mp1.populations, mp2.populations)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_moran.py,test_property_players,"self.assertEqual(populations, mp.populations)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_moran.py,test_property_players,"self.assertIn(mp.winning_strategy_name, [str(p) for p in players])",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_resultset.py,test_summarise_without_failure,"self.assertIsInstance(sd, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_resultset.py,test_summarise_without_failure,"self.assertTrue(total_rate in [0, 1])",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_resultset.py,test_summarise_without_failure,self.assertTrue(0 <= player.Initial_C_rate <= 1),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/strategies/test_player.py,test_clone_reproducible_play,"self.assertEqual(m1.result, m2.result)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/strategies/test_player.py,test_clone_reproducible_play,"self.assertEqual(op, op_clone)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/strategies/test_player.py,test_memory_depth_upper_bound,"self.assertTrue(test_memory(player=player, opponent=opponent, seed=seed, turns=turns, memory_length=max_memory), msg='{} failed for seed={} and opponent={}'.format(player.name, seed, opponent))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertIsInstance(results, axl.ResultSet)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertEqual(results.num_players, len(tournament.players))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertEqual(results.players, [str(p) for p in tournament.players])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_play_matches,"self.assertEqual(len(index_pair), 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_play_matches,"self.assertEqual(len(plays), self.test_repetitions)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_play_matches,"self.assertEqual(len(actions), turns)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_play_matches,"self.assertEqual(len(results), 10)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_seeding_equality,"self.assertEqual(results1.wins, results2.wins)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_seeding_equality,"self.assertEqual(results1.match_lengths, results2.match_lengths)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_seeding_equality,"self.assertEqual(results1.scores, results2.scores)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_seeding_equality,"self.assertEqual(results1.cooperation, results2.cooperation)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertIsInstance(results, axl.ResultSet)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertEqual(results.num_players, len(tournament.players))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_property_serial_play,"self.assertEqual(results.players, [str(p) for p in tournament.players])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.ranked_names, spatial_results.ranked_names)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.num_players, spatial_results.num_players)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.repetitions, spatial_results.repetitions)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.payoff_diffs_means, spatial_results.payoff_diffs_means)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.payoff_matrix, spatial_results.payoff_matrix)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.payoff_stddevs, spatial_results.payoff_stddevs)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.payoffs, spatial_results.payoffs)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.cooperating_rating, spatial_results.cooperating_rating)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.cooperation, spatial_results.cooperation)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.normalised_cooperation, spatial_results.normalised_cooperation)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.normalised_scores, spatial_results.normalised_scores)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.good_partner_matrix, spatial_results.good_partner_matrix)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.good_partner_rating, spatial_results.good_partner_rating)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.match_lengths, spatial_results.match_lengths)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.ranked_names, spatial_results.ranked_names)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.wins, spatial_results.wins)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.scores, spatial_results.scores)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_complete_tournament,"self.assertEqual(results.cooperation, spatial_results.cooperation)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_one_turn_tournament,"self.assertEqual(prob_end_results.scores, one_turn_results.scores)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_one_turn_tournament,"self.assertEqual(prob_end_results.wins, one_turn_results.wins)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_tournament.py,test_one_turn_tournament,"self.assertEqual(prob_end_results.cooperation, one_turn_results.cooperation)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/strategies/test_meta.py,test_players_return_valid_actions,"self.assertTrue(player_actions <= set((C, D)))",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_matches.py,test_outcome_repeats,"self.assertEqual(matches[0].play(), matches[1].play())",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_matches.py,test_outcome_repeats,"self.assertEqual(matches[1].play(), matches[2].play())",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_matches.py,test_outcome_repeats_stochastic,"self.assertEqual(results[0], results[1])",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_matches.py,test_outcome_repeats_stochastic,"self.assertEqual(results[1], results[2])",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_fingerprint.py,test_fingerprint_reproducibility,"self.assertEqual(data, data2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_strategy_utils.py,test_finds_cycle,self.assertIsNotNone(detected),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_strategy_utils.py,test_finds_cycle,"self.assertIn(''.join(map(str, detected)), ''.join(map(str, cycle)))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.result, [])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.players, [p1, p2])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.turns, turns)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.prob_end, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.noise, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.game.RPST(), game.RPST())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match.players[0].match_attributes['length'], turns)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init,"self.assertEqual(match._cache, {})",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.result, [])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.players, [p1, p2])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.turns, float('inf'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.prob_end, prob_end)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.noise, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.game.RPST(), game.RPST())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match.players[0].match_attributes['length'], float('inf'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end,"self.assertEqual(match._cache, {})",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.result, [])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.players, [p1, p2])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.turns, turns)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.prob_end, prob_end)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.noise, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.game.RPST(), game.RPST())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match.players[0].match_attributes['length'], float('inf'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_init_with_prob_end_and_turns,"self.assertEqual(match._cache, {})",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_non_default_attributes,"self.assertEqual(match.players[0].match_attributes['length'], 500)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_non_default_attributes,"self.assertEqual(match.players[0].match_attributes['noise'], 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match.py,test_len,"self.assertEqual(len(match), turns)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/integration/test_tournament.py,test_big_tournaments,"self.assertIsNone(tournament.play(progress_bar=False, filename=filename, build_results=False))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match_generator.py,test_build_match_chunks,"self.assertEqual(sorted(match_definitions), sorted(expected_match_definitions))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match_generator.py,test_seeding_equality,"self.assertEqual(chunks1, chunks2)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_match_generator.py,test_spatial_build_match_chunks,"self.assertEqual(sorted(match_definitions), sorted(expected_match_definitions))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(strategies, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(len(strategies), 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(len(strategies), 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIsInstance(strategies, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(match, axl.Match)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(len(match), 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(len(match), 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(match.noise, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(match.noise, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_no_noise,"self.assertIsInstance(match, axl.Match)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_no_noise,"self.assertGreaterEqual(len(match), 10)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_no_noise,"self.assertLessEqual(len(match), 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_no_noise,"self.assertEqual(match.noise, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.turns, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.turns, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.noise, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.noise, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.repetitions, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.repetitions, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIn(str(p), basic_player_names)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.prob_end, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.prob_end, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.noise, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.noise, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.repetitions, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.repetitions, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIn(str(p), basic_player_names)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.turns, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.turns, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.noise, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.noise, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.repetitions, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.repetitions, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIn(str(p), basic_player_names)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.prob_end, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.prob_end, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.noise, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.noise, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertLessEqual(tournament.repetitions, 50)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertGreaterEqual(tournament.repetitions, 2)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIsInstance(tournament, axl.Tournament)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_with_given_strategies,"self.assertIn(str(p), basic_player_names)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,"self.assertIsInstance(game, axl.Game)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator,self.assertTrue(2 * r > t + s and t > r > p > s),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_property.py,test_decorator_unconstrained,"self.assertIsInstance(game, axl.Game)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_inequality_filter,"self.assertTrue(passes_operator_filter(self.TestStrategy, 'memory_depth', smaller, operator.ge))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_inequality_filter,"self.assertTrue(passes_operator_filter(self.TestStrategy, 'memory_depth', larger, operator.le))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_inequality_filter,"self.assertFalse(passes_operator_filter(self.TestStrategy, 'memory_depth', smaller, operator.le))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_inequality_filter,"self.assertFalse(passes_operator_filter(self.TestStrategy, 'memory_depth', larger, operator.ge))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_passes_filterset,"self.assertTrue(passes_filterset(self.TestStrategy, full_passing_filterset_1))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_passes_filterset,"self.assertFalse(passes_filterset(self.TestStrategy, full_failing_filterset))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_filters.py,test_passes_filterset,"self.assertFalse(passes_filterset(self.TestStrategy, sparse_failing_filterset))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_init,"self.assertEqual(game.scores, expected_scores)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_RPST,"self.assertEqual(game.RPST(), (r, p, s, t))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_score,"self.assertEqual(game.score((C, C)), (r, r))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_score,"self.assertEqual(game.score((D, D)), (p, p))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_score,"self.assertEqual(game.score((C, D)), (s, t))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_score,"self.assertEqual(game.score((D, C)), (t, s))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_repr,"self.assertEqual(expected_repr, game.__repr__())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_repr,"self.assertEqual(expected_repr, str(game))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_integer_actions,"self.assertEqual(game.score(key), game.score(value))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_invalid_matrices,"self.assertEqual(error_raised, A.shape != B.transpose().shape)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_repr,"self.assertEqual(expected_repr, asymgame.__repr__())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_random_repr,"self.assertEqual(expected_repr, str(asymgame))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_equality,self.assertFalse(asymgame1 == 'foo'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_equality,"self.assertEqual(asymgame1, asymgame1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_equality,"self.assertEqual(asymgame2, asymgame2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Axelrod-Python,Axelrod,axelrod/tests/unit/test_game.py,test_equality,"self.assertEqual(asymgame1 == asymgame2, asymgame1.A.all() == asymgame2.A.all() and asymgame1.B.all() == asymgame2.B.all())",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BBVA,apicheck,tools/curl/test/test_parse_hypothesis.py,test_decode_random_headers,assert reqres['request']['headers'] == headers,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BitBotFactory,MikaLendingBot,tests/test_MarketAnalysis.py,test_get_percentile,assert np_perc == math_perc,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos1.position == pos1,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(pos1.distance_to(pos2) - dist) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(pos1.distance_to_point2(pos2) - dist) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(pos1._distance_squared(pos2) ** 0.5 - dist) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert pos1.sort_by_distance(points2) == sorted(points2, key=lambda p: pos1._distance_squared(p))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos1.closest(points2) == pos1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos1.closest(points) in {p for p in points2 if abs(pos1.distance_to(p) - dist_closest_point) < epsilon},False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(pos1.distance_to_closest(points) - pos1._distance_squared(closest_point) ** 0.5) < epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos1.furthest(points) in {p for p in points2 if abs(pos1.distance_to(p) - dist_furthest_point) < epsilon},False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(pos1.distance_to_furthest(points) - pos1._distance_squared(furthest_point) ** 0.5) < epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert pos1.offset(pos2) == Point2((pos1.x + pos2.x, pos1.y + pos2.y))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert pos1.unit_axes_towards(pos2) != Point2((0, 0))",False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(dist1 - dist2) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(dist1 - dist2) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert abs(dist1 - dist2) <= epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos1 == pos1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos2 == pos2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,assert pos3 == pos3,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert isinstance(hash(pos1), int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert isinstance(hash(pos2), int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_pointlike,"assert isinstance(hash(pos3), int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.x == x1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.y == y1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.to2 == pos1,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1.to3 == Point3((x1, y1, 0))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(pos1.length - length1) < 0.001,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(pos1.normalized.is_same_as(pos1 / length1)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(normalized1.length - 1) < 0.001,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(pos2.length - length2) < 0.001,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(pos2.normalized.is_same_as(normalized2)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert abs(normalized2.length - 1) < 0.001,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert isinstance(pos1.distance_to(pos2), float)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert isinstance(pos1.distance_to_point2(pos2), float)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.random_on_distance(x2) != pos1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1.towards_with_random_angle(pos2, x2) != pos1",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.towards_with_random_angle(pos2) != pos1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert len(intersections1) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert len(intersections2) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert len(neighbors4) == 4,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert len(neighbors8) == 8,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1 + pos2 == Point2((x1 + x2, y1 + y2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1 - pos2 == Point2((x1 - x2, y1 - y2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1 * pos2 == Point2((x1 * x2, y1 * y2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1 / pos2 == Point2((x1 / x2, y1 / y2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,"assert pos1.is_same_as(pos2, dist=0.1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point2,assert pos1.unit_axes_towards(pos2) == pos1.direction_vector(pos2),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point3,assert pos1.z == z1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_point3,assert pos1.to3 == pos1,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_size,assert size.width == w,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_size,assert size.height == h,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.x == x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.y == y,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.width == w,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.height == h,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.right == x + w,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,assert rect.top == y + h,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,"assert rect.size == Size((w, h))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,"assert rect.center == Point2((rect.x + rect.width / 2, rect.y + rect.height / 2))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
BurnySc2,python-sc2,test/test_pickled_data.py,test_position_rect,"assert rect.offset((1, 1)) == Rect((x + 1, y + 1, w, h))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_diffing.py,test_deployment_diffing,"self.assertThat(should_b_b, Equals(deployment_b))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_diffing.py,test_deployment_diffing_composable,"self.assertThat(full_diff.apply(deployments[0]), Equals(deployments[-1]))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_roundtrip,"self.assertEqual(decoded_deployment, deployment)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_to_unserialized_json,"self.assertEquals(wire_decode(json.dumps(unserialized)), deployment)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_upgrade_configuration_versions,"self.assertEqual(json.loads(upgraded_json), json.loads(target_json))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_no_hash_collisions,"self.assertThat(should_be_equal, Is(True))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_no_hash_collisions,"self.assertThat(hash_a, Equals(hash_b))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/control/test/test_persistence.py,test_no_hash_collisions,"self.assertThat(hash_a, Not(Equals(hash_b)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_algebraic.py,test_valid_strategy,"self.assertIsInstance(AlgebraicType(**args), AlgebraicType)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_algebraic.py,test_extra_attributes,"self.assertIn(""can't be specified in state"", exc.invariant_errors[0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_algebraic.py,test_missing_attributes,"self.assertIn('must be specified in state', exc.invariant_errors[0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_algebraic.py,test_invalid_states,"self.assertIn('can only be in states', exc.invariant_errors[0])",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_final_status_one,"self.assertEqual(status, merge_pr.final_status([status]))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_final_status_many,"self.assertEqual(target, merge_pr.final_status([status2, status1]))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_not_success,"self.assertEqual(True, merge_pr.not_success(status))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_not_success_success,"self.assertEqual(False, merge_pr.not_success(status))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_format_status,"self.assertIsInstance(formatted, unicode)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_format_status,"self.assertIn(status['context'], formatted)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_format_status,"self.assertIn(status['target_url'], formatted)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_result_types,"self.assertIn(result, list(merge_pr.JenkinsResults.iterconstants()))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_result_types,"self.assertIsInstance(params, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_in_queue,"self.assertEqual(merge_pr.JenkinsResults.RUNNING, result)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_in_queue,"self.assertEqual({}, params)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_builds_not_present,"self.assertEqual(merge_pr.JenkinsResults.UNKNOWN, result)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_builds_not_present,"self.assertEqual({}, params)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_no_builds,"self.assertEqual(merge_pr.JenkinsResults.NOTRUN, result)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_merge_pr.py,test_no_builds,"self.assertEqual({}, params)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_flaky.py,test_decorated_function_executed,"self.assertThat(values, Equals([x]))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_flaky.py,test_annotation_dictionary,"self.assertThat(self._get_annotation_dict(f), Equals({'min_passes': min_passes, 'max_runs': max_runs, 'jira_keys': set([jira_key])}))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_flaky.py,test_annotation_dictionary_multiple_keys,"self.assertThat(self._get_annotation_dict(f), Equals({'min_passes': min_passes, 'max_runs': max_runs, 'jira_keys': set(jira_keys)}))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_flaky.py,test_multiple_decorators,"self.assertThat(self._get_annotation_dict(f), Equals({'min_passes': max(min_passes1, min_passes2), 'max_runs': max(max_runs1, max_runs2), 'jira_keys': set(jira_keys1) | set(jira_keys2)}))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_flaky.py,test_always_erroring_flaky_test,"self.assertThat(exception, MatchesAll(Contains('ValueError'), Contains(pformat(flaky_data))))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_release.py,test_add_hostname,"self.assertThat(rules, MatchesRoutingRules([RoutingRule.when(key_prefix='prefix/key/').then_redirect(hostname=hostname, protocol='https', http_redirect_code=302, **{replace: 'prefix/replacement'})]))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_release.py,test_given_hostname,"self.assertThat(rules, MatchesRoutingRules([RoutingRule.when(key_prefix='prefix/key/').then_redirect(hostname=other_hostname, protocol='https', http_redirect_code=302, **{replace: 'replacement'})]))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,admin/test/test_release.py,test_long_match_first,"self.assertThat(rules, MatchesRoutingRules([RoutingRule.when(key_prefix='long/est/first/').then_redirect(hostname=hostname, protocol='https', replace_key='long/there', http_redirect_code=302), RoutingRule.when(key_prefix='long/est/').then_redirect(hostname=hostname, protocol='https', replace_key='everywhere', http_redirect_code=302), RoutingRule.when(key_prefix='long/').then_redirect(hostname=hostname, protocol='https', replace_key='long/here', http_redirect_code=302)]))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_matchers.py,test_equivalent_to_standard_path_exists,"self.assertThat(path_exists().match(path), is_equivalent_mismatch(PathExists().match(path.path)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_matchers.py,test_equivalent_to_standard_dir_exists,"self.assertThat(dir_exists().match(path), is_equivalent_mismatch(DirExists().match(path.path)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_matchers.py,test_equivalent_to_standard_file_exists,"self.assertThat(file_exists().match(path), is_equivalent_mismatch(FileExists().match(path.path)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_matchers.py,test_file_exists_content_mismatch,"self.assertThat(mismatch.describe(), Equals('%s has unexpected contents:\n%s' % (path.path, matcher.match(observed).describe())))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_matchers.py,test_file_exists_content_match,"self.assertThat(path, file_contents(Equals(content)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_trial_skip_exception,"self.assertThat(result, only_skips(1, [reason]))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_mktemp_doesnt_exist,"self.assertThat(temp_path, BelowPath(FilePath(os.getcwd())))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_make_temporary_path_doesnt_exist,"self.assertThat(temp_path, BelowPath(FilePath(os.getcwd())))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_make_temporary_directory_exists,"self.assertThat(temp_dir, dir_exists())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_make_temporary_file_with_content,"self.assertThat(temp_file, file_contents(Equals(content)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_make_temporary_file,"self.assertThat(temp_file, file_contents(Equals('')))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_run_twice,"self.assertThat(result, has_results(tests_run=Equals(2)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_preserves_data,"self.assertThat(''.join(observed), Equals(''.join(data)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_separator_terminates,"self.assertThat(observed, AllMatch(EndsWith(separator)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_nonterminated_line,"self.assertThat(observed[-1], Not(EndsWith(separator)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_directory_for_test,"self.assertThat(segments, AllMatch(AfterPreprocessing(len, MatchesAny(LessThan(max_length), Equals(max_length)))))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/testtools/test/test_base.py,test_too_short_test_id,"self.assertRaises(ValueError, _path_for_test_id, test_id)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
ClusterHQ,flocker,flocker/node/agents/test/test_blockdevice.py,test_round_trip,"self.assertEqual(local_state.shared_state_changes(), fake_local_state.shared_state_changes())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/node/agents/test/test_blockdevice.py,test_calculates_changes,"self.assertEqual(self.deployer.calculator.discovered_datasets, discovered_datasets)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/node/agents/test/test_blockdevice.py,test_stable_sort_order,"self.assertThat(sorted([one, another]), Equals(sorted([one, another], key=lambda volume: (volume.blockdevice_id, volume.dataset_id, volume.size, volume.attached_to))))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/node/test/test_loop.py,test_first_is_min_sleep,"self.assertEqual(duration, sleep.delay_seconds)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_retry.py,test_min_step_size,"self.assertRaises(ValueError, backoff, step=step)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
ClusterHQ,flocker,flocker/common/test/test_retry.py,test_step,"self.assertEqual(list((step * i for i in range(1, 11))), list(islice(b, 0, 10)))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_retry.py,test_min_maximum_step_size,"self.assertRaises(ValueError, backoff, step=1.0, maximum_step=maximum_step)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
ClusterHQ,flocker,flocker/common/test/test_retry.py,test_maximum_step,"self.assertEqual(list((min(maximum_step, step * i) for i in range(1, 101))), list(islice(b, 0, 100)))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_retry.py,test_timeout,"self.assertLessEqual(sum(b), timeout)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
ClusterHQ,flocker,flocker/common/test/test_retry.py,test_jitter,"self.assertLessEqual(difference, jitter * 2, 'x: {!r}, y: {!r}'.format(x, y))",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ClusterHQ,flocker,flocker/node/agents/test/test_ebs.py,test_unexpected_attach_exception,"self.assertRaises(CustomException, _attach_volume_and_wait_for_device, volume=self.volume, attach_to=self.compute_id, attach_volume=attach_volume, detach_volume=lambda *a, **kw: None, device=device, blockdevices=[])",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
ClusterHQ,flocker,flocker/node/agents/test/test_ebs.py,test_unexpected_device_discovered,"self.assertEqual(AttachedUnexpectedDevice(requested=FilePath(device), discovered=FilePath(b'/dev/').child(unexpected_device.pop().basename())), exception)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ContinuumIO,cyberpandas,tests/ip/test_ip.py,test_ops,"tm.assert_numpy_array_equal(r1, r2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Utilities/test/Test_Encode.py,test_BaseType_Float,assert data == approx(decodedData),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Utilities/test/Test_Encode.py,test_BaseType_Float,assert lenData == len(encodedData),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,tests/Integration/TornadoServices/Test_TornadoAndDISETmixed.py,test_echo,assert service.echo(data)['Value'] == data,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,tests/Integration/TornadoServices/Test_TornadoAndDISETmixed.py,test_configurationAutoUpdate,assert RPCClient('Framework/User').getTestValue()['Value'] == value1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,tests/Integration/TornadoServices/Test_TornadoAndDISETmixed.py,test_configurationAutoUpdate,assert RPCClient('Framework/User').getTestValue()['Value'] == value2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_proxyLifetime,assert res['OK'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_proxyLifetime,"assert (notAfterDate - expectedValidity).total_seconds() == approx(0, abs=margin)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_tooLong_proxyLifetime,assert res['OK'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_tooLong_proxyLifetime,assert notAfterDate == expectedEndDate,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_diracGroup,assert res['OK'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_diracGroup,assert len(res['Value']) == len(diracGroup),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_diracGroup,assert res['Value'] == diracGroup,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_delegation,assert res['OK'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_delegation,assert proxyChain.getNumCertsInChain()['Value'] + 1 == delegatedProxy.getNumCertsInChain()['Value'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_delegation,assert proxyChain.getCertInChain()['Value'].getSubjectDN() == delegatedProxy.getCertInChain()['Value'].getIssuerDN(),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_delegation,assert proxyChain.getDIRACGroup(ignoreDefault=True) == delegatedProxy.getDIRACGroup(ignoreDefault=True),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_delegation,assert proxyChain.getNotAfterDate()['Value'] >= delegatedProxy.getNotAfterDate()['Value'],False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Security/test/Test_X509Chain.py,test_delegation,assert delegatedProxy.getStrength()['Value'] == x509Req.getStrength()['Value'],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Utilities/test/Test_File.py,test_convert_to_bigger_unit_floats,assert toKB < nb,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Utilities/test/Test_File.py,test_convert_to_bigger_unit_floats,assert toMB < toKB,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Utilities/test/Test_File.py,test_convert_to_bigger_unit_floats,assert toMB == fromkBtoMB,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DIRACGrid,DIRAC,src/DIRAC/Core/Utilities/test/Test_File.py,test_convert_loop,assert converted == nb,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_bitwise.py,test_has_same_bit_length,assert x.bit_length() == int(x).bit_length(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_insertion.py,test_bisection_agrees_with_eventual_answer,"assert i == bisect_left(ls, int(x))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_insertion.py,test_sorting_produces_eventual_sort,assert forced == sorted(forced),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_insertion.py,test_equal_integers_give_equal_values,assert int(x) == int(y),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_insertion.py,test_distinct_integers_give_distinct_values,assert int(x) != int(y),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
DRMacIver,schroedinteger,tests/test_arithmetic.py,test_embiggening_agrees,"assert op(x, y) == op(int(x), int(y))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_arithmetic.py,test_commutativity,"assert op(x, y) == op(y, x)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_arithmetic.py,test_associativity,"assert op(op(x, y), z) == op(x, op(y, z))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_arithmetic.py,test_left_distributivity,assert x * (y + z) == x * y + x * z,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_arithmetic.py,test_right_distributivity,assert (y + z) * x == y * x + z * x,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_arithmetic.py,test_expansion,assert (x + y) * (r + s) == x * r + x * s + y * r + y * s,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,schroedinteger,tests/test_arithmetic.py,test_addition_of_positive_raises,assert x + y > x,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
DRMacIver,structureshrink,tests/test_shrinking.py,test_partition_by_length,assert len(shrunk) == len(b) + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DRMacIver,structureshrink,tests/test_shrinking.py,test_shrink_to_any_substring,assert len(shrunk) >= len(ls),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
DRMacIver,schroedinteger,tests/test_quack.py,test_hashes_the_same,assert hash(x) == hash(int(x)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
DataDog,dd-trace-py,tests/tracer/test_encoders.py,test_custom_msgpack_encode_trace_size,assert encoder.size == len(encoder.encode()[0]),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
DataDog,dd-trace-py,tests/tracer/test_compat.py,test_maybe_stringify,assert type(maybe_stringify(obj)) is (obj is not None and str or type(None)),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
DataDog,dd-trace-py,tests/tracer/test_trace_utils.py,test_set_flattened_tags_is_flat,"assert isinstance(span.get_tags(), dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
DataDog,dd-trace-py,tests/tracer/test_trace_utils.py,test_set_flattened_tags_is_flat,"assert not any((isinstance(v, dict) for v in span.get_tags().values()))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
EvanKepner,mutatest,mutatest/tests/test_cli.py,test_cli_summary_report_invariant,"assert isinstance(results, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
EvanKepner,mutatest,mutatest/tests/test_cli.py,test_cli_summary_report_invariant,assert len(results) > 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
EvanKepner,mutatest,mutatest/tests/test_run.py,test_colorize_output_invariant_return,assert result == o,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
EvanKepner,mutatest,mutatest/tests/test_run.py,test_colorize_output_invariant_valid,assert result.startswith('\x1b['),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
EvanKepner,mutatest,mutatest/tests/test_run.py,test_colorize_output_invariant_valid,assert result.endswith('\x1b[0m'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
EvanKepner,mutatest,mutatest/tests/test_cache.py,test_get_cache_file_loc_invariant,assert result.parent.parts[-1] == '__pycache__',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
EvanKepner,mutatest,mutatest/tests/test_cache.py,test_get_cache_file_loc_invariant,assert result.stem.split(tag)[0] == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_protocol.py,test_QDataStreamProtocol_deterministic,assert QDataStreamProtocol.encode_message(message) == QDataStreamProtocol.encode_message(message) == QDataStreamProtocol.encode_message(message),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_ladder_service.py,test_start_game_1v1,assert player1.lobby_connection.write_launch_game.called,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_ladder_service.py,test_start_game_1v1,assert player2.lobby_connection.write_launch_game.called,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_ladder_service.py,test_start_game_with_teams,assert player1.lobby_connection.write_launch_game.called,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_ladder_service.py,test_start_game_with_teams,assert player2.lobby_connection.write_launch_game.called,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_ladder_service.py,test_start_game_with_teams,assert player3.lobby_connection.write_launch_game.called,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_ladder_service.py,test_start_game_with_teams,assert player4.lobby_connection.write_launch_game.called,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_map_pool.py,test_choose_map_single_map,"assert chosen_map == Map(1, 'choose_me.v001')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_search_threshold,assert s.match_threshold <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_search_threshold,assert s.match_threshold >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_search_quality_equivalence,assert s1.quality_with(s2) == s2.quality_with(s1),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_map_pools_empty,assert queue.get_map_pool_for_rating(rating) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_map_pools_any_range,assert queue.get_map_pool_for_rating(rating) is map_pool,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_map_pools_lower_bound,assert queue.get_map_pool_for_rating(rating) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_map_pools_lower_bound,assert queue.get_map_pool_for_rating(rating) is map_pool,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_map_pools_upper_bound,assert queue.get_map_pool_for_rating(rating) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_map_pools_upper_bound,assert queue.get_map_pool_for_rating(rating) is map_pool,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_map_pools_bound,assert queue.get_map_pool_for_rating(rating) is map_pool,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_map_pools_bound,assert queue.get_map_pool_for_rating(rating) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_multiple_map_pools,assert queue.get_map_pool_for_rating(rating) is map_pool1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_multiple_map_pools,assert queue.get_map_pool_for_rating(rating) is map_pool2,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
FAForever,server,tests/unit_tests/test_matchmaker_queue.py,test_queue_multiple_map_pools,assert queue.get_map_pool_for_rating(rating) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HPAC,linnea,tests/test_transformations.py,test_transpose_is_self_inverse,assert transpose(transpose(expr)) == expr,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
HPAC,linnea,tests/test_transformations.py,test_invert_is_self_inverse,assert invert(invert(expr)) == expr,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
HPAC,linnea,tests/test_transformations.py,test_invert_transpose_is_self_inverse,assert invert_transpose(invert_transpose(expr)) == expr,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
HPAC,linnea,tests/test_transformations.py,test_transpose_and_invert_order_does_not_matter,assert invert(transpose(expr)) == transpose(invert(expr)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
HPAC,linnea,tests/test_transformations.py,test_invert_and_transpose_same_as_invert_transpose,assert invert(transpose(expr)) == invert_transpose(expr),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
HPAC,linnea,tests/test_transformations.py,test_transpose_and_invert_same_as_invert_transpose,assert transpose(invert(expr)) == invert_transpose(expr),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_correctness,"assert sum(result) == length, '{}, {}, {}'.format(vector, length, result)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_extended_euclid,assert a % d == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_extended_euclid,assert b % d == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_extended_euclid,assert a * x + b * y == d,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_correctness,assert x >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_correctness,assert y >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_correctness,"assert a * x + b * y == c, 'Invalid solution {!r},{!r}'.format(x, y)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_completeness,"assert (x, y) in solutions, 'Missing solution {!r},{!r}'.format(x, y)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_uniqueness,"assert is_unique_list(solutions), 'Duplicate solution found'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_correctness,"assert len(solution) == len(coeffs), 'Solution size differs from coefficient count'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_correctness,"assert result == c, 'Invalid solution {!r}'.format(solution)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_completeness,"assert solution2 in solutions, 'Missing solution {!r}'.format(solution2)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_uniqueness,"assert is_unique_list(solutions), 'Duplicate solution found'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_correctness_randomized,assert len(variables) == len(subst),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_correctness_randomized,assert len(subst[var.name]) >= var.minimum,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
HPAC,matchpy,tests/test_utils.py,test_correctness_randomized,assert result_union == values,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_matching.py,test_randomized_match,assert expression == reverse,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_syntactic.py,test_randomized_product_net,"assert index in result, '{!s} did not match {!s} in the DiscriminationNet'.format(pattern, expr)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_bipartite.py,test_enum_maximum_matchings_iter_correctness,"assert len(matching) == size, 'Matching has a different size than the first one'",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_bipartite.py,test_enum_maximum_matchings_iter_correctness,"assert edge in graph, 'Matching contains an edge that was not in the graph'",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
HPAC,matchpy,tests/test_bipartite.py,test_enum_maximum_matchings_iter_correctness,"assert frozen_matching not in matchings, 'Matching was duplicate'",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_output_type,"self.assertIsInstance(duration_to_string(duration), str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_year_output,"self.assertIn('year', duration_to_string(duration))",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_week_output,"self.assertIn('week', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_week_output,"self.assertNotIn('week', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_day_without_week_output,"self.assertIn('day', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_day_without_week_output,"self.assertNotIn('day', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_day_with_week_output,"self.assertIn('day', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_day_with_week_output,"self.assertNotIn('day', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_hour_output,"self.assertIn('hour', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_hour_output,"self.assertNotIn('hour', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_minute_output,"self.assertIn('minute', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_minute_output,"self.assertNotIn('minute', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_second_output,"self.assertIn(' second', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_second_output,"self.assertNotIn(' second', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_millisecond_output,"self.assertIn('millisecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_millisecond_output,"self.assertNotIn('millisecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_microsecond_without_millisecond_output,"self.assertIn('microsecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_microsecond_without_millisecond_output,"self.assertNotIn('microsecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_microsecond_with_millisecond_output,"self.assertIn('microsecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_microsecond_with_millisecond_output,"self.assertNotIn('microsecond', output)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_abbreviations,self.assertTrue(unit[:-2].lstrip('-').isdecimal()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_abbreviations,self.assertTrue(unit[:-1].lstrip('-').isdecimal()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_abbreviations,self.assertTrue(unit[-1].isalpha()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_negative_duration,self.assertTrue(unit.startswith('-')),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_unit_plurality,self.assertTrue(unit.endswith('s')),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_time.py,test_unit_plurality,self.assertFalse(unit.endswith('s')),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_cryptography.py,test_decode_inverts_encode,"self.assertEqual(message, decode_caesar_cipher(encode_caesar_cipher(message, key), key))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_cryptography.py,test_decode_inverts_encode,"self.assertEqual(message.upper(), decode_morse_code(encode_morse_code(message)))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_identity,"self.assertEqual(calculate(str(number)), number)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_addition,"self.assertEqual(calculate('+'.join(map(str, summands))), sum(summands))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_subtraction,"self.assertEqual(calculate(f'{minuend}-{subtrahend}'), minuend - subtrahend)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_multiplication,"self.assertEqual(calculate('*'.join(map(str, factors))), math.prod(factors))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_division,"self.assertEqual(calculate(f'{dividend}/{divisor}'), dividend / divisor)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}+{operand_2}*{operand_3}'), operand_1 + operand_2 * operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}+{operand_2}/{operand_3}'), operand_1 + operand_2 / operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}-{operand_2}+{operand_3}'), operand_1 - operand_2 + operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}-{operand_2}-{operand_3}'), operand_1 - operand_2 - operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}-{operand_2}*{operand_3}'), operand_1 - operand_2 * operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}-{operand_2}/{operand_3}'), operand_1 - operand_2 / operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}*{operand_2}+{operand_3}'), operand_1 * operand_2 + operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}*{operand_2}-{operand_3}'), operand_1 * operand_2 - operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}/{operand_2}+{operand_3}'), operand_1 / operand_2 + operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}/{operand_2}-{operand_3}'), operand_1 / operand_2 - operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}/{operand_2}*{operand_3}'), operand_1 / operand_2 * operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_order_of_operations,"self.assertEqual(calculate(f'{operand_1}/{operand_2}/{operand_3}'), operand_1 / operand_2 / operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'({operand_1}+{operand_2})*{operand_3}'), (operand_1 + operand_2) * operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'({operand_1}+{operand_2})/{operand_3}'), (operand_1 + operand_2) / operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}-({operand_2}+{operand_3})'), operand_1 - (operand_2 + operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}-({operand_2}-{operand_3})'), operand_1 - (operand_2 - operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'({operand_1}-{operand_2})*{operand_3}'), (operand_1 - operand_2) * operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'({operand_1}-{operand_2})/{operand_3}'), (operand_1 - operand_2) / operand_3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}*({operand_2}+{operand_3})'), operand_1 * (operand_2 + operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}*({operand_2}-{operand_3})'), operand_1 * (operand_2 - operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}/({operand_2}+{operand_3})'), operand_1 / (operand_2 + operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}/({operand_2}-{operand_3})'), operand_1 / (operand_2 - operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}/({operand_2}*{operand_3})'), operand_1 / (operand_2 * operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_parentheses,"self.assertEqual(calculate(f'{operand_1}/({operand_2}/{operand_3})'), operand_1 / (operand_2 / operand_3))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_whitespace,"self.assertEqual(calculate(f'{whitespace}{numbers[0]}{whitespace}'), numbers[0])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_whitespace,"self.assertEqual(calculate(f'{whitespace}+{whitespace}'.join(map(str, numbers))), sum(numbers))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_whitespace,"self.assertEqual(calculate(f'{numbers[0]}{whitespace}-{whitespace}{numbers[1]}'), numbers[0] - numbers[1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_whitespace,"self.assertEqual(calculate(f'{whitespace}*{whitespace}'.join(map(str, numbers))), math.prod(numbers))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_calculation.py,test_non_numeric,"self.assertRaises(pyparsing.ParseException, calculate, non_numeric)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
Harmon758,Harmonbot,tests/test_location.py,test_output_type,"self.assertIsInstance(wind_degrees_to_direction(degrees), str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_low_n_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'N')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_ne_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'NE')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_ene_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'ENE')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_e_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'E')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_ese_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'ESE')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_se_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'SE')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_sse_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'SSE')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_s_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'S')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_ssw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'SSW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_sw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'SW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_wsw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'WSW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_w_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'W')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_wnw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'WNW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_nw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'NW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_nnw_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'NNW')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Harmon758,Harmonbot,tests/test_location.py,test_high_n_output,"self.assertEqual(wind_degrees_to_direction(degrees), 'N')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HumanCompatibleAI,evaluating-rewards,tests/test_tabular.py,test_weighted_lp_norm,assert norm >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
HumanCompatibleAI,evaluating-rewards,tests/test_tabular.py,test_weighted_lp_norm,"assert np.allclose(norm_scaled, abs(scale) * norm)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HumanCompatibleAI,evaluating-rewards,tests/test_tabular.py,test_deshape,"assert np.allclose(deshaped_base, deshaped_shaped, atol=1e-06)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HumanCompatibleAI,evaluating-rewards,tests/test_tabular.py,test_canonical,"assert np.allclose(canon_base, canon_equiv, atol=1e-06)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HumanCompatibleAI,evaluating-rewards,tests/test_tabular.py,test_canonical_dist,"assert np.allclose(dist_equiv, 0, atol=1e-06)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HumanCompatibleAI,evaluating-rewards,tests/test_tabular.py,test_canonical_dist,"assert np.allclose(dist_opposite, 1.0, atol=1e-06)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HumanCompatibleAI,evaluating-rewards,tests/test_tabular.py,test_canonical_dist,assert 0.01 < dist_opposite <= 1 + 1e-10,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
HumanCompatibleAI,evaluating-rewards,tests/test_tabular.py,test_canonical_dist_near_zero,"assert np.allclose(dist_equiv, 0, atol=1e-06)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
HumanCompatibleAI,evaluating-rewards,tests/test_tabular.py,test_canonical_dist_near_zero,"assert np.allclose(dist_opposite, 0, atol=1e-06)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
IQTLabs,squiggle,tests/test_yau_bp.py,test_end_x_value,assert transformed[0][-1] == approx(s.count('A') + s.count('T') + s.count('G') + s.count('C')),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
IQTLabs,squiggle,tests/test_yau_bp.py,test_end_y_value,"assert transform(s, method='yau-bp')[1][-1] == approx(s.count('T') - s.count('A') + 0.5 * (s.count('C') - s.count('G')))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
IQTLabs,squiggle,tests/test_yau_bp.py,test_length,assert len(transformed[0]) == len(transformed[1]) == len(s) + 1,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
IQTLabs,squiggle,tests/test_yau.py,test_end_x_value,"assert transform(s, method='yau')[0][-1] == approx(3 ** 0.5 / 2 * (s.count('C') + s.count('G')) + 0.5 * (s.count('A') + s.count('T')))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
IQTLabs,squiggle,tests/test_yau.py,test_end_y_value,"assert transform(s, method='yau')[1][-1] == approx(-3 ** 0.5 / 2 * s.count('A') + 3 ** 0.5 / 2 * s.count('T') + 0.5 * s.count('C') + -0.5 * s.count('G'))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
IQTLabs,squiggle,tests/test_randic_and_qi.py,test_randic,assert transformed[1][i] == randic[letter],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
IQTLabs,squiggle,tests/test_gates.py,test_endpoint,assert transformed[0][-1] == s.count('G') - s.count('C'),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
IQTLabs,squiggle,tests/test_gates.py,test_endpoint,assert transformed[1][-1] == s.count('T') - s.count('A'),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
IQTLabs,squiggle,tests/test_squiggle.py,test_length,assert len(transformed[0]) == len(transformed[1]) == 2 * len(s) + 1,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
Instagram,LibCST,libcst/tests/test_fuzz.py,test_parsing_compilable_module_strings,"self.assertEqual(source_code, tree.code)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
JDASoftwareGroup,kartothek,tests/core/test_index.py,test_eval_operators,assert result == expected,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JDASoftwareGroup,kartothek,kartothek/io/testing/query_cube.py,test_hypothesis,assert len(result) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JDASoftwareGroup,kartothek,kartothek/io/testing/query_cube.py,test_hypothesis,assert len(result) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JDASoftwareGroup,kartothek,kartothek/io/testing/query_cube.py,test_hypothesis,"pdt.assert_frame_equal(df_actual, df_expected)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/test_encoder.py,test_encoder,"assert torch.topk(self.cosine(embeddings[2], embeddings), k=2)[-1][-1].item() == 3",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/test_encoder.py,test_encoder,"assert torch.topk(self.cosine(embeddings[6], embeddings), k=2)[-1][-1].item() == 7",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/test_encoder.py,test_encoder,"assert torch.topk(self.cosine(embeddings[6], embeddings), k=2)[-1][-1].item() == 7",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/test_encoder.py,test_encoder,"assert torch.topk(self.cosine(embeddings[2], embeddings), k=2)[-1][-1].item() == 3",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/test_encoder.py,test_encoder,"assert torch.topk(self.cosine(embeddings[6], embeddings), k=2)[-1][-1].item() == 7",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_contrastive_utils.py,test_sample_spans,assert len(anchors) == num_anchors,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_contrastive_utils.py,test_sample_spans,assert len(positives) == num_anchors * num_positives,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_contrastive_utils.py,test_sample_spans,assert anchor_length <= max_span_len,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_contrastive_utils.py,test_sample_spans,assert anchor_length >= min_span_len,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_contrastive_utils.py,test_sample_spans,assert anchor in ' '.join(tokens),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_contrastive_utils.py,test_sample_spans,assert positive_length <= max_span_len,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_contrastive_utils.py,test_sample_spans,assert positive_length >= min_span_len,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_contrastive_utils.py,test_sample_spans,assert positive in ' '.join(tokens),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_contrastive_utils.py,test_sample_spans,assert positive in ' '.join(anchor_tokens),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_contrastive_utils.py,test_sample_spans,assert positive not in ' '.join(anchor_tokens),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/test_dataset_reader.py,test_no_sample_context_manager,assert not dataset_reader.sample_spans,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/test_dataset_reader.py,test_no_sample_context_manager,assert dataset_reader.sample_spans == previous,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_model_utils.py,test_unpack_batch,"assert torch.equal(tensor, three_dim_input['tokens'][name].reshape(batch_size * num_anchors, max_length))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_model_utils.py,test_unpack_batch,"assert torch.equal(tensor, two_dim_input['tokens'][name])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_model_utils.py,test_unpack_batch,"assert torch.equal(tensor, four_dim_input['tokens'][name])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_util.py,test_sanitize_text,"assert re.search('[ ]{2,}', sanitized_text) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_util.py,test_sanitize_text,assert '\t' not in sanitized_text,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_util.py,test_sanitize_text,"assert not sanitized_text.startswith(('\n', ' '))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_util.py,test_sanitize_text,"assert not sanitized_text.endswith(('\n', ' '))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
JohnGiorgi,DeCLUTR,tests/common/test_util.py,test_sanitize_text,assert all((not char.isupper() for char in sanitized_text)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
KenKundert,nestedtext,tests/test_random.py,test_types,"assert nt.loads(nt.dumps(v), top=any) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
KenKundert,nestedtext,tests/test_random.py,test_strings,"assert nt.loads(nt.dumps(s), top=str) == normalize_line_breaks(s)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
KenKundert,nestedtext,tests/test_random.py,test_dicts,"assert nt.loads(nt.dumps(data), top=dict) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
KenKundert,nestedtext,tests/test_random.py,test_dicts,"assert nt.loads(content, top=dict) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
KenKundert,nestedtext,tests/test_random.py,test_dicts,"assert nt.loads(spacey_content, top=dict) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
KenKundert,nestedtext,tests/test_random.py,test_lists,"assert nt.loads(nt.dumps(values), top=list) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
KenKundert,nestedtext,tests/test_random.py,test_lists,"assert nt.loads(content, top=list) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
KenKundert,nestedtext,tests/test_random.py,test_lists,"assert nt.loads(content, top=list) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Kharacternyk,barva,tests/utils/test_color.py,test_to_hex_within_000000_FFFFFF,assert s >= '#000000' and s <= '#FFFFFF',False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
KissPeter,APIFuzzer,test/unit_test.py,test_json_data_dict_valid,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
KissPeter,APIFuzzer,test/unit_test.py,test_json_data_list_valid,"assert isinstance(res, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
LeastAuthority,kubetop,src/kubetop/test/test_textrenderer.py,test_width,"self.assertEqual(min(limit, len(long_text)), len(rendered))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
MAVENSDC,cdflib,tests/test_epochs.py,test_compute_cdfepoch,"assert t == random_time[i], f'Time {random_time} was not equal to {x}'",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
MAVENSDC,cdflib,tests/test_epochs.py,test_compute_cdfepoch16,"assert t == random_time[i], f'Time {random_time} was not equal to {x}'",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
MAVENSDC,cdflib,tests/test_epochs.py,test_compute_cdftt2000,"assert t == random_time[i], f'Time {random_time} was not equal to {x}'",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
MBrouns,timeseers,tests/test_utils.py,test_minmax_scaler_np,"np.testing.assert_allclose(scaler.fit(array).transform(array), scaler.fit_transform(array))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
MBrouns,timeseers,tests/test_utils.py,test_minmax_scaler_np,"np.testing.assert_allclose(array, scaler.inv_transform(scaler.transform(array)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
MBrouns,timeseers,tests/test_utils.py,test_minmax_scaler_series,assert scaler.transform(series).min() >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
MBrouns,timeseers,tests/test_utils.py,test_minmax_scaler_series,assert scaler.transform(series).max() <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
MBrouns,timeseers,tests/test_utils.py,test_minmax_scaler_series,"np.testing.assert_allclose(scaler.fit(series).transform(series), scaler.fit_transform(series))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
MBrouns,timeseers,tests/test_utils.py,test_minmax_scaler_series,"np.testing.assert_allclose(series, scaler.inv_transform(scaler.transform(series)), rtol=1e-06)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
MBrouns,timeseers,tests/test_utils.py,test_minmax_scaler_df,"np.testing.assert_allclose(scaler.fit(df).transform(df), scaler.fit_transform(df))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
MBrouns,timeseers,tests/test_utils.py,test_minmax_scaler_df,"np.testing.assert_allclose(df, scaler.inv_transform(scaler.transform(df)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
MDAnalysis,mdanalysis,testsuite/MDAnalysisTests/formats/test_libdcd.py,test_written_remarks_property,assert f.header['remarks'] == expected_remarks,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
MFreidank,pysgmcmc,pysgmcmc/tests/test_data_batches.py,test_batchsize_equals_n_datapoints,"assert np.allclose(batch[self.X_Placeholder], self.X, atol=0.01)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MFreidank,pysgmcmc,pysgmcmc/tests/test_data_batches.py,test_batchsize_equals_n_datapoints,"assert np.allclose(batch[self.Y_Placeholder], self.y.reshape(-1, 1), atol=0.01)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MFreidank,pysgmcmc,pysgmcmc/tests/test_data_batches.py,test_batch_size_larger_n_datapoints,"assert np.allclose(batch[self.X_Placeholder], self.X, atol=0.01)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MFreidank,pysgmcmc,pysgmcmc/tests/test_data_batches.py,test_batch_size_larger_n_datapoints,"assert np.allclose(batch[self.Y_Placeholder], self.y.reshape(-1, 1), atol=0.01)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MFreidank,pysgmcmc,pysgmcmc/tests/test_data_batches.py,test_seeded_batches,"assert np.allclose(reference, batch, atol=0.01)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,algorithms,medium/property-based-testing/test_is_mail.py,test_is_email,"assert mpu.string.is_email(email), f'is_email({email}) returned False'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,algorithms,medium/property-based-testing/test_is_mail.py,test_is_ipv4,"assert mpu.string.is_ipv4(str(ip)), f'is_ipv4({ip}) returned False'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_datastructures.py,test_interval_issubset,"assert Interval(b, c).issubset(Interval(a, d))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_datastructures.py,test_interval_issubset_not,"assert not Interval(a, b).issubset(Interval(c, d)) or c <= a <= b <= d",False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
MartinThoma,mpu,tests/test_datastructures.py,test_interval_issubset_not,"assert not Interval(a, c).issubset(Interval(b, d)) or b <= a <= c <= d",False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
MartinThoma,mpu,tests/test_datastructures.py,test_interval_issubset_not,"assert not Interval(c, d).issubset(Interval(a, b)) or a <= c <= d <= b",False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
MartinThoma,mpu,tests/test_datastructures.py,test_interval_issubset_not,"assert not Interval(b, d).issubset(Interval(a, c)) or a <= b <= d <= c",False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
MartinThoma,mpu,tests/test_datastructures.py,test_interval_and,assert i1 & i2 == i3,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_datastructures.py,test_interval_or,assert i1 | i2 == i3,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_geometry.py,test_line_segment_angle_boundaries,assert 0 <= line_segment.angle() < 360,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
MartinThoma,mpu,tests/test_math.py,test_factorize_float,"assert str(exinfo.value) == ""integer expected, but type(number)=<class 'float'>""",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_math.py,test_factorize,assert product == an_integer,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_math.py,test_argmax_property,assert el <= max_value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
MartinThoma,mpu,tests/test_math.py,test_gcd_is_divisor,"assert str(exinfo.value) == f'gcd(a={a}, b={b}) is undefined'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_math.py,test_gcd_is_divisor,assert a % gcd == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_math.py,test_gcd_is_divisor,assert b % gcd == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_math.py,test_gcd_is_divisor_min_size,"assert str(exinfo.value) == f'gcd(a={a * c}, b={b * c}) is undefined'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_math.py,test_gcd_is_divisor_min_size,assert a * c % gcd == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_math.py,test_gcd_is_divisor_min_size,assert b * c % gcd == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_math.py,test_gcd_is_divisor_min_size,assert gcd % c == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_string.py,test_is_email,"assert mpu.string.is_email(email), f'is_email({email}) returned False'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,mpu,tests/test_string.py,test_is_ipv4,"assert mpu.string.is_ipv4(str(ip)), f'is_ipv4({ip}) returned False'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,algorithms,medium/property-based-testing/test_factorize_property.py,test_factorize_multiplication_property,"assert product == n, f'factorize({n}) returned {factors}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
MartinThoma,algorithms,mutmut-example/test_factorize.py,test_factorize,assert product == number,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
MartinThoma,algorithms,medium/property-based-testing/test_two_way_functions.py,test_base64_encode_decode_together,assert b64decode(b64encode(data)) == data,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_flow.py,test_assign,"assert str(Assign(assignee, expr)) == '{0} = {1}'.format(str(assignee), str(expr))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_str,"assert str(comb.NAryCombinator(op, *values)) == ' {0} '.format(op).join(map(str, values))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_and,"assert str(comb.And(f, ff)) == '{0} and {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_or,"assert str(comb.Or(f, ff)) == '{0} or {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_mul,"assert str(comb.Mul(f, ff)) == '{0} * {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_div,"assert str(comb.Div(f, ff)) == '{0} / {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_add,"assert str(comb.Add(f, ff)) == '{0} + {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_sub,"assert str(comb.Sub(f, ff)) == '{0} - {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_lt,"assert str(comb.LT(f, ff)) == '{0} < {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_gt,"assert str(comb.GT(f, ff)) == '{0} > {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_lte,"assert str(comb.LTE(f, ff)) == '{0} <= {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_gte,"assert str(comb.GTE(f, ff)) == '{0} >= {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_eq,"assert str(comb.EQ(f, ff)) == '{0} == {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_binary_combinator_ne,"assert str(comb.NE(f, ff)) == '{0} != {1}'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_combinator_not,assert str(comb.Not(expr)) == 'not {0}'.format(str(expr)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Nike-Inc,signal_analog,tests/test_signal_analog_combinators.py,test_mixed_combinators,"assert str(comb.And(comb.Not(f), comb.Or(f, ff))) == 'not {0} and ({0} or {1})'.format(str(f), str(ff))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
NoRedInk,elm-ops-tooling,tests/test_elm_deps_sync.py,test_spec_order_is_preserved,assert list(new_spec.keys()) == spec_keys + ['test-dependencies'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
NoRedInk,elm-ops-tooling,tests/test_elm_deps_sync.py,test_spec_order_is_preserved,"assert list(new_spec['dependencies'].keys()) == ['NoRedInk/spec-1', 'NoRedInk/spec-2', 'NoRedInk/top-1', 'NoRedInk/top-2', 'NoRedInk/top-3']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
NoRedInk,elm-ops-tooling,tests/test_elm_deps_sync.py,test_spec_order_is_preserved,"assert list(new_spec['test-dependencies'].keys()) == ['NoRedInk/spec-1', 'NoRedInk/spec-2']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
NoRedInk,elm-ops-tooling,tests/test_native_deps_sync.py,test_spec_order_is_preserved,"assert list(new_spec.keys()) == ['NoRedInk/spec-1', 'NoRedInk/spec-2', 'NoRedInk/top-1', 'NoRedInk/top-2', 'NoRedInk/top-3']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_factorize_1darray,"self.assertTrue(arrays_are_identical(expected_groups, result_groups))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_factorize_1darray,"self.assertTrue(arrays_are_identical(expected_enum, result_enum))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_factorize_ndarray__by_row_idxs,"self.assertTrue(arrays_are_identical(expected_groups, result_groups))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_factorize_ndarray__by_row_idxs,"self.assertTrue(arrays_are_identical(expected_enum, result_enum))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_factorize_ndarray__by_col_idxs,"self.assertTrue(arrays_are_identical(expected_groups, result_groups))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_factorize_ndarray__by_col_idxs,"self.assertTrue(arrays_are_identical(expected_enum, result_enum))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_fast_zip_arrays,"self.assertTrue(arrays_are_identical(zipped, result))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_get_timestamp,"self.assertEqual(result, expected)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_get_utctimestamp,"self.assertEqual(result, expected)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_location_dtypes_loaded_correctly,"self.assertTrue(isinstance(df_result[col][0], self.valid_str_types))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_location_dtypes_loaded_correctly,"self.assertTrue(isinstance(df_result[col][0], self.valid_int_types))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_location_dtypes_loaded_correctly,"self.assertTrue(isinstance(df_result[col][0], self.valid_float_types))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_data.py,test_location_dtypes_loaded_correctly,"self.assertTrue(isinstance(df_result[col][0], self.valid_str_types))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_log_config_is_loaded___logger_is_updated,"self.assertEqual(level, logger.level)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_log_config_is_loaded___logger_is_updated,"self.assertEqual(1, len(logger.handlers))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_log_config_is_loaded___logger_is_updated,"self.assertIsInstance(handler, RotatingFileHandler)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_log_config_is_loaded___logger_is_updated,"self.assertEqual(log_file_path, handler.baseFilename)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_log_config_is_loaded___logger_is_updated,"self.assertEqual(100, handler.maxBytes)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_log_config_is_loaded___logger_is_updated,"self.assertEqual(10, handler.backupCount)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_rotating_log_config_is_loaded___logger_is_set,"self.assertEqual(level, logger.level)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_rotating_log_config_is_loaded___logger_is_set,"self.assertEqual(1, len(logger.handlers))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_rotating_log_config_is_loaded___logger_is_set,"self.assertIsInstance(handler, RotatingFileHandler)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_rotating_log_config_is_loaded___logger_is_set,"self.assertEqual(log_file_path, handler.baseFilename)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_rotating_log_config_is_loaded___logger_is_set,"self.assertEqual(100, handler.maxBytes)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_log.py,test_rotating_log_config_is_loaded___logger_is_set,"self.assertEqual(10, handler.backupCount)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_summaries.py,test_summary_file_written,self.assertTrue(os.path.isfile(exposure_summary_fp)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_summaries.py,test_summary_file_written,"self.assertDictAlmostEqual(data, exp_summary)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_compress.py,test_data_is_less_than_than_the_chunk_size___result_is_the_compressed_version_of_the_full_data,"self.assertEqual(expected, result)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_compress.py,test_data_is_equal_to_the_the_chunk_size___result_is_the_compressed_version_of_the_full_data,"self.assertEqual(expected, result)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/utils/test_compress.py,test_data_is_larger_than_the_chunk_size___result_is_the_concatenated_compressed_version_of_the_chunks,"self.assertEqual(expected, result)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_is_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(type(instance).__name__, '{}KeysLookup'.format(model))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_is_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(instance.supplier, supplier)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_is_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(instance.model_name, model)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_is_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(instance.model_version, version)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_is_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(instance.keys_data_directory, keys_path)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_is_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(instance.complex_lookup_config_fp, None)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_not_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(type(instance).__name__, '{}KeysLookup'.format(model))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_not_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(instance.supplier, supplier)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_not_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(instance.model_name, model)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_not_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(instance.model_version, version)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_not_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(instance.keys_data_directory, os.path.join(os.sep, 'var', 'oasis', 'keys_data'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_keys_path_not_supplied___correct_instance_is_created_with_correct_model_info_and_keys_path,"self.assertEqual(instance.complex_lookup_config_fp, None)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_complex_lookup_config_is_supplied___correct_instance_is_created_with_correct_config_path,"self.assertEqual(type(instance).__name__, '{}KeysLookup'.format(model))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_complex_lookup_config_is_supplied___correct_instance_is_created_with_correct_config_path,"self.assertEqual(instance.supplier, supplier)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_complex_lookup_config_is_supplied___correct_instance_is_created_with_correct_config_path,"self.assertEqual(instance.model_name, model)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_complex_lookup_config_is_supplied___correct_instance_is_created_with_correct_config_path,"self.assertEqual(instance.model_version, version)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_complex_lookup_config_is_supplied___correct_instance_is_created_with_correct_config_path,"self.assertEqual(instance.keys_data_directory, keys_path)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_complex_lookup_config_is_supplied___correct_instance_is_created_with_correct_config_path,"self.assertEqual(instance.complex_lookup_config_fp, complex_lookup_config_path)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_complex_lookup_config_is_supplied___correct_instance_is_created_with_correct_config_path,"self.assertEqual(instance.output_directory, output_directory)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_records_are_given___records_are_written_to_oasis_keys_files_correctly,"self.assertEqual(successes_count, len(successes))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_records_are_given___records_are_written_to_oasis_keys_files_correctly,"self.assertEqual(success_matches, successes)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_records_are_given___records_are_written_to_oasis_keys_files_correctly,"self.assertEqual(nonsuccesses_count, len(nonsuccesses))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_records_are_given___records_are_written_to_oasis_keys_files_correctly,"self.assertEqual(nonsuccess_matches, nonsuccesses)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_records_are_given___records_are_written_to_json_keys_files_correctly,"self.assertEqual(successes_count, len(successes))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_records_are_given___records_are_written_to_json_keys_files_correctly,"self.assertEqual(written_successes, successes)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_records_are_given___records_are_written_to_json_keys_files_correctly,"self.assertEqual(nonsuccesses_count, len(nonsuccesses))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_preparation/test_lookup.py,test_records_are_given___records_are_written_to_json_keys_files_correctly,"self.assertEqual(written_nonsuccesses, nonsuccesses)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_contains_il_and_standard_files_but_il_is_false___il_files_are_excluded,"self.assertEqual(len(standard), len(glob.glob(os.path.join(bin_dir, '*.bin'))))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_contains_il_and_standard_files_but_il_is_false___il_files_are_excluded,"self.assertTrue(os.path.exists(os.path.join(bin_dir, filename)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_contains_il_and_standard_files_but_il_is_true___all_files_are_included,"self.assertEqual(len(standard) + len(il), len(glob.glob(os.path.join(bin_dir, '*.bin'))))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_contains_il_and_standard_files_but_il_is_true___all_files_are_included,"self.assertTrue(os.path.exists(os.path.join(bin_dir, filename)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_single_ri_folder,"self.assertEqual(len(files), len(glob.glob(os.path.join(bin_dir, '*.bin'))))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_single_ri_folder,"self.assertTrue(os.path.exists(os.path.join(bin_dir, filename)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_single_ri_folder,"self.assertEqual(len(files), len(glob.glob(os.path.join(bin_dir, 'RI_1{}*.bin'.format(os.sep)))))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_single_ri_folder,"self.assertTrue(os.path.exists(os.path.join(bin_dir, 'RI_1', filename)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_multiple_ri_folders,"self.assertEqual(len(files), len(glob.glob(os.path.join(bin_dir, '*.bin'))))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_multiple_ri_folders,"self.assertTrue(os.path.exists(os.path.join(bin_dir, filename)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_multiple_ri_folders,"self.assertEqual(len(files), len(glob.glob(os.path.join(bin_dir, 'RI_1{}*.bin'.format(os.sep)))))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_multiple_ri_folders,"self.assertTrue(os.path.exists(os.path.join(bin_dir, 'RI_1', filename)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_multiple_ri_folders,"self.assertEqual(len(files), len(glob.glob(os.path.join(bin_dir, 'RI_2{}*.bin'.format(os.sep)))))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_multiple_ri_folders,"self.assertTrue(os.path.exists(os.path.join(bin_dir, 'RI_2', filename)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_directory_contains_some_target_files___target_files_are_included,"self.assertEqual(len(targets), len(tar.getnames()))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_directory_contains_some_target_files___target_files_are_included,"self.assertEqual(set(targets), set(tar.getnames()))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_with_single_reinsurance_subfolder,"self.assertEqual(len(all_targets), len(tar.getnames()))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_with_single_reinsurance_subfolder,"self.assertEqual(set(all_targets), set(tar.getnames()))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_with_multiple_reinsurance_subfolders,"self.assertEqual(len(all_targets), len(tar.getnames()))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
OasisLMF,OasisLMF,tests/model_execution/test_bin.py,test_with_multiple_reinsurance_subfolders,"self.assertEqual(set(all_targets), set(tar.getnames()))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
OpenSourceEconomics,respy,respy/tests/test_likelihood.py,test_logsumexp,"np.testing.assert_allclose(result, expected)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PKSHATechnology-Research,camphr,packages/camphr/tests/tokenizer/juman/test_lang.py,test__split_text_for_juman,assert all((len(line.encode('utf-8')) < 4097 for line in lines)),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
PKSHATechnology-Research,camphr,packages/camphr/tests/tokenizer/juman/test_lang.py,test__split_text_for_juman,assert ''.join(lines) == text,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left + right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left.apply(right) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left - right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left != right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left == right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left == right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left != right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert cls(n) != cls(-n),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left + right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left.apply(right) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left - right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left != right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left == right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left == right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left != right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert cls(n) != cls(-n),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_on_offset_implementations,assert offset.is_on_offset(dt) == (compare == dt),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/io/parser/test_parse_dates.py,test_hypothesis_delimited_date,assert except_out_dateutil == except_in_dateutil,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Hands-On-Artificial-Intelligence-for-Banking,Chapter08/8A_OpenBankAPI/8A/Lib/site-packages/pandas/tests/io/parser/test_parse_dates.py,test_hypothesis_delimited_date,assert result == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_on_offset_implementations,assert offset.onOffset(dt) == (compare == dt),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[0] == rng[0] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[-1] == rng[-1] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[0] == ser.iloc[0] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
PacktPublishing,Advanced-Elasticsearch-7.0,Chapter17/eshadoop/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[-1] == ser.iloc[-1] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Phelimb,BIGSI,bigsi/tests/matrix/test_transpose.py,test_transpose,"assert npmatrix[i, j] == tbitarrays[i][j]",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_api.py,testArgs,"self.assertEqual(api._call_api(endpoint, resource_id)['id'], resource_id)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_api.py,testArg_resource_id_None,"self.assertIsNotNone(api._call_api(endpoint, resource_id).get('count'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_api.py,testArg_subresource_Text,"self.assertIsNotNone(api._call_api(endpoint, resource_id, subresource).get('version_details'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_api.py,testArgs_GettingCachedData,"self.assertEqual(data, api.get_data(endpoint, resource_id))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_api.py,testArgs_GettingNoncachedData,"self.assertEqual(data, api.get_data(endpoint, resource_id))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_api.py,testArg_subresource_Text,"self.assertIsNotNone(api.get_data(endpoint, resource_id, subresource).get('version_details'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_common.py,testArg_endpoint_Sampled,"self.assertIsNone(common.validate(endpoint, resource_id))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_common.py,testArg_resource_id_NonNegInt,"self.assertIsNone(common.validate(endpoint, resource_id))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_common.py,testArg_resource_id_NonNegInt,"self.assertEqual(common.api_url_build(endpoint, resource_id), 'http://pokeapi.co/api/v2/{}/{}/'.format(endpoint, resource_id))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_common.py,testArg_resource_id_None,"self.assertEqual(common.api_url_build(endpoint, resource_id), 'http://pokeapi.co/api/v2/{}/'.format(endpoint))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_common.py,testArg_subresource_Text,"self.assertEqual(common.api_url_build(endpoint, resource_id, subresource), 'http://pokeapi.co/api/v2/{}/{}/{}/'.format(endpoint, resource_id, subresource))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_common.py,testArgs,"self.assertEqual(common.cache_uri_build(endpoint, resource_id), '{}/{}/'.format(endpoint, resource_id))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_common.py,testArg_resource_id_None,"self.assertEqual(common.cache_uri_build(endpoint, resource_id), '/'.join([endpoint, '']))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_common.py,testArg_subresource_Text,"self.assertEqual(common.cache_uri_build(endpoint, resource_id, subresource), '/'.join([endpoint, str(resource_id), subresource, '']))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_cache.py,testArgs,"self.assertIsNone(cache.save(data, endpoint, resource_id))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_cache.py,testArg_subresource_Text,"self.assertIsNone(cache.save(data, endpoint, resource_id, subresource))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_cache.py,testEnv_CacheFileNotFound,"self.assertIsNone(cache.save(data, endpoint, resource_id))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_cache.py,testEnd_CacheFileAlreadyOpen,"self.assertIsNone(cache.save(data, endpoint, resource_id))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_cache.py,testArgs,"self.assertEqual(data, cache.load(endpoint, resource_id))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_cache.py,testArg_subresource_Text,"self.assertEqual(data, cache.load(endpoint, resource_id, subresource))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_cache.py,testAttr_Caches_PathsChanged,"self.assertEqual(os.path.abspath(new_path), cache.CACHE_DIR)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_cache.py,testAttr_Caches_PathsChanged,"self.assertEqual(os.path.join(os.path.abspath(new_path), 'api.cache'), cache.API_CACHE)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_cache.py,testAttr_Caches_PathsChanged,"self.assertEqual(os.path.join(os.path.abspath(new_path), 'sprite'), cache.SPRITE_CACHE)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArg_obj_Dictionary,"self.assertIsInstance(interface._make_obj(obj), interface.APIMetadata)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArg_obj_DictionaryWithUrl,"self.assertIsInstance(interface._make_obj(obj), interface.APIResource)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArg_obj_List,"self.assertEqual(obj, interface._make_obj(obj))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArg_obj_Str,"self.assertEqual(obj, interface._make_obj(obj))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArgs,"self.assertEqual(name, interface._convert_id_to_name(endpoint, id_))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testEnv_NotNamedResource,"self.assertEqual(str(id_), interface._convert_id_to_name(endpoint, id_))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArgs,"self.assertEqual(id_, interface._convert_name_to_id(endpoint, name))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArgs_WithID,"self.assertEqual((name, id_), interface.name_id_convert(endpoint, id_))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArgs_WithName,"self.assertEqual((name, id_), interface.name_id_convert(endpoint, id_))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArgs_WithNameWithLazyLoad,"self.assertIsInstance(interface.APIResource(endpoint, name), interface.APIResource)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArgs_WithIDWithLazyLoad,"self.assertIsInstance(interface.APIResource(endpoint, id_), interface.APIResource)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testAttrs_WithNameWithoutLazyLoad,"self.assertEqual(sample.simple_attr, 10)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testAttrs_WithNameWithoutLazyLoad,"self.assertIsInstance(sample.list_attr, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testAttrs_WithNameWithoutLazyLoad,"self.assertIsInstance(sample.list_attr[0], interface.APIMetadata)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testAttrs_WithIDWithoutLazyLoad,"self.assertEqual(sample.simple_attr, 10)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testAttrs_WithIDWithoutLazyLoad,"self.assertIsInstance(sample.list_attr, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testAttrs_WithIDWithoutLazyLoad,"self.assertIsInstance(sample.list_attr[0], interface.APIMetadata)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testAttrs_WithIDWithoutLazyLoad,"self.assertIsInstance(sample.complex_attr, interface.APIResource)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testAttrs_WithLazyLoad,"self.assertGreater(loaded_len, lazy_len)",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testHasLocationAreaEncounters,"self.assertIsInstance(pkmn.location_area_encounters, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testHasLocationAreaEncounters,"self.assertNotIsInstance(pkmn.location_area_encounters, str)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArgs,"self.assertIsInstance(interface.APIResourceList(endpoint), interface.APIResourceList)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PokeAPI,pokebase,tests/test_module_interface.py,testArgs,"self.assertIsInstance(interface.APIMetadata(data), interface.APIMetadata)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_referencetimestamp,assert absoluteA < absoluteB and relativeA < relativeB or (absoluteA >= absoluteB and relativeA >= relativeB),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_referencetimestamp,assert abs((absoluteB - absoluteA).total_seconds() - (relativeB - relativeA)) < 1e-05,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert item.id == creq['requestId'],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert item.url == url,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert item.request is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert item.request.timestamp == datetime.utcfromtimestamp(creq['wallTime']),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert set(item.request.headers.keys()) == set(creq['request']['headers'].keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert item.response is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert item.id == creq['requestId'] == cresp['requestId'],False,True,False,True,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert item.url == url,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert item.request is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert set(item.request.headers.keys()) == set(cresp['response']['requestHeaders'].keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert item.response is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert set(item.response.headers.keys()) == set(cresp['response']['headers'].keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair,assert (item.response.timestamp - item.request.timestamp).total_seconds() - (cresp['timestamp'] - creq['timestamp']) < 1e-05,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair_eq,assert item != item2,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair_eq,assert item == item,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair_eq,assert item == item2,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair_eq,assert item != item2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair_eq,assert item == item,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_browser.py,test_requestResponsePair_eq,assert item == item2,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-type'] == 'warcinfo',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert 'warc-target-uri' not in headers,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert 'x-crocoite-type' not in headers,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert data == g.payload,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert lastWarcinfoRecordid,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-type'] == 'resource',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['content-type'] == 'application/javascript; charset=utf-8',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['x-crocoite-type'] == 'script',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert URL(headers['warc-target-uri']) == URL('file://' + g.abspath),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert 'warc-target-uri' not in headers,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert data == g.data,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-type'] == 'conversion',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['x-crocoite-type'] == 'screenshot',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,"assert URL(headers['warc-target-uri']) == g.url, (headers['warc-target-uri'], g.url)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-refers-to'] is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert int(headers['X-Crocoite-Screenshot-Y-Offset']) == g.yoff,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert rec.raw_stream.read() == g.data,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-type'] == 'conversion',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['x-crocoite-type'] == 'dom-snapshot',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert URL(headers['warc-target-uri']) == g.url,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-refers-to'] is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert rec.raw_stream.read() == g.document,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-type'] == 'request',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert 'x-crocoite-type' not in headers,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert URL(headers['warc-target-uri']) == g.url,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['x-chrome-request-id'] == g.id,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert CIMultiDict(rec.http_headers.headers) == g.request.headers,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert rec.raw_stream.read() == g.request.body,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-truncated'] == 'unspecified',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert not rec.raw_stream.read(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert not rec.raw_stream.read(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-type'] == 'response',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert URL(headers['warc-target-uri']) == g.url,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['x-chrome-request-id'] == g.id,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert 'x-crocoite-type' not in headers,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert filteredHeaders == g.response.headers,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert httpheaders['content-type'].startswith(expectedContentType),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert rec.raw_stream.read() == g.response.body,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert httpheaders['content-length'] == str(len(g.response.body)),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-truncated'] is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert httpheaders['content-type'].endswith('; charset=utf-8'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert headers['warc-truncated'] == 'unspecified',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PromyLOPh,crocoite,crocoite/test_warc.py,test_push,assert not rec.raw_stream.read(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
PyCQA,isort,tests/integration/test_setting_combinations.py,test_isort_doesnt_lose_imports_or_comments,assert should_be_retained in result,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
PyCQA,isort,tests/integration/test_hypothesmith.py,test_isort_is_idempotent,"assert result == isort.code(result, config=config, disregard_skip=disregard_skip)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Qiskit,qiskit-terra,test/randomized/test_clifford.py,test_random_clifford_valid,"self.assertValidClifford(value, num_qubits=num_qubits)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Qiskit,qiskit-terra,test/randomized/test_synthesis.py,test_cx_equivalence_0cx_random,"self.assertEqual(two_qubit_cnot_decompose.num_basis_gates(unitary), 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Qiskit,qiskit-terra,test/randomized/test_synthesis.py,test_cx_equivalence_1cx_random,"self.assertEqual(two_qubit_cnot_decompose.num_basis_gates(unitary), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Qiskit,qiskit-terra,test/randomized/test_synthesis.py,test_cx_equivalence_2cx_random,"self.assertEqual(two_qubit_cnot_decompose.num_basis_gates(unitary), 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Qiskit,qiskit-terra,test/randomized/test_synthesis.py,test_cx_equivalence_3cx_random,"self.assertEqual(two_qubit_cnot_decompose.num_basis_gates(unitary), 3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_len_hypothesis,"assert L <= l, (S, n)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_len_hypothesis,"assert len(arange(30)[S.raw]) > m, S",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_no_shape_hypothesis,assert reduced.start != None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_no_shape_hypothesis,assert reduced.start >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_no_shape_hypothesis,assert reduced.step != None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_no_shape_hypothesis,assert abs(reduced.step) <= abs(S.step),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_no_shape_hypothesis,assert S.stop is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_no_shape_hypothesis,"assert reduced.reduce(**kwargs) == reduced, S",False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,"assert L == len(a[reduced.raw]), (S, n)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,assert reduced.start >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,assert reduced.stop != None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,assert reduced.stop == -n - 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,"assert a[0] in a[reduced.raw], (S, n)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,assert L > 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,"assert reduced.stop >= 0, (S, n)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,assert reduced.step != None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,assert abs(reduced.step) <= abs(S.step),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,"assert reduced.stop <= S.stop, (S, n)",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,assert reduced.stop >= S.stop,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,"assert reduced == Slice(reduced.start, reduced.start + 1, 1)",False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,"assert reduced.reduce(**kwargs) == reduced, S",False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_slice.py,test_slice_reduce_hypothesis,"assert reduced.reduce(shape, **kwargs) == reduced, S",False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_tuple.py,test_tuple_reduce_no_shape_hypothesis,assert len(reduced.args) != 1,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
Quansight-Labs,ndindex,ndindex/tests/test_tuple.py,test_tuple_reduce_no_shape_hypothesis,assert reduced == () or reduced.args[-1] != ...,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_tuple.py,test_tuple_reduce_no_shape_hypothesis,assert reduced.reduce(**kwargs) == reduced,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_as_subindex.py,test_as_subindex_hypothesis,"assert not isin(a1, a2).any()",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_as_subindex.py,test_as_subindex_hypothesis,"assert not isin(a2, a1).any()",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_integer.py,test_integer_len_hypothesis,assert len(idx) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_integer.py,test_integer_reduce_no_shape_unchanged,assert idx.reduce() == idx.reduce(negative_int=False) == idx.reduce(negative_int=True) == i,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert chunk_size == chunk_size_tuple,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert chunk_size_tuple == chunk_size,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert new == chunk_size,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert chunk_size == new,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert new == chunk_size_tuple,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert chunk_size_tuple == new,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert hash(new) == hash(chunk_size),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert not chunk_size == 'a',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert not 'a' == chunk_size,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert chunk_size != 'a',False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert 'a' != chunk_size,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_eq,assert hash(chunk_size) == h,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_args,"assert chunk_size.args == (chunk_size_tuple,)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_ChunkSize_tuple,assert tuple(chunk_size) == chunk_size_tuple,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_num_chunks,assert chunk_size.num_chunks(shape) == len(list(chunk_size.indices(shape))),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_indices,assert idx.expand(shape) == idx,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_indices,assert idx.newshape(shape) == chunk_size,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_indices,assert sorted(elements) == list(range(size)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_num_subchunks,assert computed_num_subchunks == actual_num_subchunks,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_containing_block,"assert isinstance(block, Tuple), block",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_containing_block,assert len(block.args) == len(chunk_size),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_containing_block,"assert all((isinstance(s, Slice) for s in block.args))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_containing_block,"assert all((s.step == 1 for s in block.args)), block",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_containing_block,"assert np_all(isin(a_idx, a_block))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_containing_block,assert block.isempty(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_containing_block,"assert not np_all(isin(a_idx, a_block1))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_chunking.py,test_containing_block,"assert not np_all(isin(a_idx, a_block2))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_eq,assert hash(new) == hash(index),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_ndindex,assert index == idx,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_ndindex,assert ndindex[idx] == index,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_ndindex,assert ndindex(index.raw) == index,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_repr_str,"assert eval(repr(index), d) == idx",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_serialization,assert type(roundtripped) is type(index),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_serialization,assert roundtripped == index,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_serialization,assert index._reduced == roundtripped._reduced == False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_serialization,assert s._reduced == True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_serialization,assert roundtripped_s._reduced == True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_serialization,"assert all([i._reduced == False for i in index.args if isinstance(i, Slice)])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_serialization,"assert all([i._reduced == True for i in t.args if isinstance(i, Slice)])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_ndindex.py,test_serialization,"assert all([i._reduced == True for i in roundtripped_t.args if isinstance(i, Slice)])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_integerarray.py,test_integerarray_reduce_no_shape_unchanged,assert index.reduce() == index.reduce(negative_int=False) == index.reduce(negative_int=True),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_integerarray.py,test_integerarray_reduce_no_shape_unchanged,assert index.reduce() == index,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,"assert isinstance(broadcasted, Tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,assert broadcasted == index,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,assert len(set([i.shape for i in arrays])) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,"assert not any((isinstance(i, Integer) for i in broadcasted.args))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,"assert all((isinstance(i, IntegerArray) or i in [True, False] for i in arrays))",False,False,False,False,False,False,False,True,True,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,assert broadcasted.args.count(True) <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,assert broadcasted.args.count(False) <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,assert not (True in broadcasted.args and False in broadcasted.args),False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,"assert index in [True, False] or True in index.args or False in index.args",False,False,False,False,False,False,True,True,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,assert broadcasted == Tuple(index),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Quansight-Labs,ndindex,ndindex/tests/test_broadcast_arrays.py,test_broadcast_arrays_hypothesis,"assert all((isinstance(i, IntegerArray) for i in broadcasted.args))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
RazerM,parver,tests/test_parse.py,test_roundtrip,assert str(Version.parse(version)) == version,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
RazerM,parver,tests/test_version.py,test_replace_roundtrip,assert version.replace() == version,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_can_add,"self.assertEqual(expected, actual)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_can_subtract,"self.assertEqual(expected, actual)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_can_multiply,"self.assertEqual(expected, actual)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_can_divide,"self.assertEqual(expected, actual)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_can_mod,"self.assertEqual(expected, actual)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_can_pow,"self.assertEqual(expected, actual)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_can_min,"self.assertEqual(expected, actual)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_can_max,"self.assertEqual(expected, actual)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_can_abs,"self.assertEqual(expected, actual)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_is_all_that_and_a_bag_of_chips,"self.assertEqual(expected, actual)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SEED-platform,seed,seed/tests/test_derived_columns.py,test_evaluator_gets_fancy_with_parameters,"self.assertEqual(expected, actual)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_main.py,test_range_check_returns_range_as_is_if_first_is_less_than_second,"assert range_check(x, y) == (x, y)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_main.py,test_check_filters_returns_input_as_is_if_filter_is_valid,"assert check_filters(list(zip(x, y))) == list(zip(x, y))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_final_data_transform_factory.py,test_final_data_transform_factory_default,assert result == value,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_final_data_transform_factory.py,test_final_data_transform_factory_ungroup_and_locale,assert result == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_parse_number_function.py,test_parse_number_factory_makes_function_that_returns_tuple,assert parse_number_func(x) == example_func(x),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_parse_bytes_function.py,test_parse_bytest_factory_makes_function_that_returns_tuple,assert parse_bytes_func(x) == example_func(x),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_parse_string_function.py,test_parse_string_factory_raises_type_error_if_given_number,assert parse_string_func(x),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_parse_string_function.py,test_parse_string_factory_invariance,assert result_types == expected_types,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_parse_string_function.py,test_parse_string_factory_invariance,"assert isinstance(result, CustomTuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
SethMMorton,natsort,tests/test_parse_string_function.py,test_parse_string_factory_invariance,"assert result.original == orig_func(unicodedata.normalize('NFD', value))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_input_string_transform_factory.py,test_input_string_transform_factory,assert input_string_transform_func(x) == example_func(x),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_input_string_transform_factory.py,test_input_string_transform_factory_cleans_thousands,"assert thousands_int_str.replace(',', '') != thousands_int_str",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
SethMMorton,natsort,tests/test_input_string_transform_factory.py,test_input_string_transform_factory_cleans_thousands,assert input_string_transform_func(thousands_int_str) == int_str,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
SethMMorton,natsort,tests/test_input_string_transform_factory.py,test_input_string_transform_factory_cleans_thousands,assert input_string_transform_func_no_op(thousands_int_str) == thousands_int_str,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_empty,assert c_array.array is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_empty,assert c_array.size.contents.value == len(c_array) == 0,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_empty,assert c_array.ctype == typ_val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_empty,assert c_array.array.contents.value == typ_val(b'\x00').value,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_empty,assert c_array.array.contents.value == typ_val(0).value,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_string,assert c_array.size.contents.value == len(c_array) == len(str_val),False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_string,assert c_array.ctype == c_ubyte,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_string,assert b''.join(c_array) == b(str_val),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_byte_list,assert c_array.size.contents.value == len(c_array) == len(list_val),False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_byte_list,assert c_array.ctype == c_byte,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_byte_list,assert b''.join([bytes(c_byte(x)) for x in c_array]) == b''.join([bytes(x) for x in list_val]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_byte_list,"assert c_array.array[0] == cast(c_array.array, POINTER(c_byte)).contents.value",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_ubyte_list,assert c_array.size.contents.value == len(c_array) == len(list_val),False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_ubyte_list,assert c_array.ctype == c_ubyte,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_ubyte_list,assert b''.join([bytes(c_ubyte(x)) for x in c_array]) == b''.join([bytes(x) for x in list_val]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_ubyte_list,"assert c_array.array[0] == cast(c_array.array, POINTER(c_ubyte)).contents.value",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_long_list,assert c_array.size.contents.value == len(c_array) == len(list_val),False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_long_list,assert c_array.ctype == c_long,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_long_list,assert b''.join([bytes(c_long(x)) for x in c_array]) == b''.join([bytes(x) for x in list_val]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_long_list,"assert c_array.array[0] == cast(c_array.array, POINTER(c_long)).contents.value",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_ulong_list,assert c_array.size.contents.value == len(c_array) == len(list_val),False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_ulong_list,assert c_array.ctype == c_ulong,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_ulong_list,assert b''.join([bytes(c_ulong(x)) for x in c_array]) == b''.join([bytes(x) for x in list_val]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_ulong_list,"assert c_array.array[0] == cast(c_array.array, POINTER(c_ulong)).contents.value",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_char_list,assert c_array.size.contents.value == len(c_array) == len(list_val),False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_char_list,assert c_array.ctype == c_char,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_char_list,assert b''.join([x for x in c_array]) == b''.join(list_val),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_auto_c_array.py,test_auto_c_array_char_list,"assert c_array.array[0] == cast(c_array.array, POINTER(c_char)).contents.value",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_long,"assert cast(pointer, POINTER(c_ulong)).contents.value >= 0",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_long,assert int_val == py_long,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_long_neg_overflow,assert int_val != py_long,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_bool,assert bool_val == py_bool,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_bool_int,assert bool(int_val) == py_bool,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_char_array_string,assert b(txt_val) == py_txt,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_char_array_list,assert b(''.join(list_val)) == py_txt,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_ck_date_string,assert b(date_string) == py_date,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_ck_date_dict,assert b(date_val.strftime('%Y%m%d')) == py_date,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_ck_date,assert b(date_val.strftime('%Y%m%d')) == py_date,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_byte_array,assert py_bytes == hexlify(b_array),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_byte_array_int,"assert int(py_bytes, 16) == int_val",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_byte_array_int_neg_overflow,"assert int(py_bytes, 16) != int_val",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_byte_array_list,assert py_list == list_val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_to_byte_array_hexstring,"assert int(py_bytes, 16) == int(hex_string, 16)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attr_conversions.py,test_c_byte_array_to_string,assert str_result == hexlify(b_array),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_encryption.py,test_split_string_into_list,"assert encrypt._split_string_into_list(txt, block) == txt_list",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_encryption.py,test_get_string_from_list,assert encrypt._get_string_from_list(list_val) == b''.join(list_val),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_null_dictionary,assert attr.pValue is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_null_dictionary,assert attr.usValueLen == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_null_dictionary,assert test_dic == py_dic,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_full_dictionary,assert attr.pValue == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_full_dictionary,assert attr.usValueLen == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_full_dictionary,assert test_dic == py_dic,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_rand_dictionary,assert attr.pValue == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_rand_dictionary,assert attr.usValueLen == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_rand_dictionary,assert attr.pValue is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_rand_dictionary,assert attr.usValueLen == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ThalesGroup,pycryptoki,tests/unittests/test_attributes.py,test_rand_dictionary,assert test_dic == py_dic,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
TileDB-Inc,TileDB-Py,tiledb/tests/test_metadata.py,test_basic,"self.assert_metadata_roundtrip(A.meta, test_vals)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
TileDB-Inc,TileDB-Py,tiledb/tests/test_metadata.py,test_basic,"self.assert_metadata_roundtrip(A.meta, test_vals)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
TileDB-Inc,TileDB-Py,tiledb/tests/test_metadata.py,test_basic,"self.assert_metadata_roundtrip(A.meta, test_vals)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
TileDB-Inc,TileDB-Py,tiledb/tests/test_metadata.py,test_basic,"self.assert_metadata_roundtrip(A.meta, test_vals)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
TileDB-Inc,TileDB-Py,tiledb/tests/test_metadata.py,test_numpy,"self.assert_metadata_roundtrip(A.meta, test_vals)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
TileDB-Inc,TileDB-Py,tiledb/tests/test_metadata.py,test_numpy,"self.assert_metadata_roundtrip(A.meta, test_vals)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
TileDB-Inc,TileDB-Py,tiledb/tests/test_metadata.py,test_numpy,"self.assert_metadata_roundtrip(A.meta, test_vals)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
TileDB-Inc,TileDB-Py,tiledb/tests/test_metadata.py,test_numpy,"self.assert_metadata_roundtrip(A.meta, test_vals)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
TileDB-Inc,TileDB-Py,tiledb/tests/test_metadata.py,test_numpy,"self.assert_metadata_roundtrip(A.meta, test_vals)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_seq_unstructure,assert converter.unstruct_strat is dump_strat,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_seq_unstructure,assert dumped == seq,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_seq_unstructure,assert dumped is not seq,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
Tinche,cattrs,tests/test_unstructure.py,test_seq_unstructure,assert type(dumped) is type(seq),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_set_unstructure,assert converter.unstruct_strat is dump_strat,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_set_unstructure,assert dumped == set,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_set_unstructure,assert dumped is not set,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
Tinche,cattrs,tests/test_unstructure.py,test_set_unstructure,assert type(dumped) is type(set),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_mapping_unstructure,assert dumped == mapping,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_mapping_unstructure,assert dumped is not mapping,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
Tinche,cattrs,tests/test_unstructure.py,test_mapping_unstructure,assert type(dumped) is type(mapping),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_enum_unstructure,assert converter.unstructure(member) == member.value,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_attrs_asdict_unstructure,assert converter.unstructure(instance) == asdict(instance),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_attrs_astuple_unstructure,assert converter.unstructure(instance) == astuple(instance),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_unstructure_hooks,assert converter.unstructure(inst) == 'test',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_seq_of_simple_classes_unstructure,assert type(outputs) == seq_type,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_unstructure.py,test_seq_of_simple_classes_unstructure,assert all((type(e) is dict for e in outputs)),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure_attrs.py,test_structure_simple_from_dict,assert obj == loaded,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure_attrs.py,test_structure_simple_from_dict_default,"assert obj == converter.structure(dumped, cl)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure_attrs.py,test_roundtrip,assert obj == loaded,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure_attrs.py,test_structure_tuple,assert obj == loaded,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure_attrs.py,test_structure_union,"assert isinstance(res, cl_a)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure_attrs.py,test_structure_union,assert obj == res,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure_attrs.py,test_structure_union_none,"assert isinstance(res, cl_a)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure_attrs.py,test_structure_union_none,assert obj == res,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure_attrs.py,test_structure_union_explicit,"assert inst == converter.structure(converter.unstructure(inst), Union[cl_a, cl_b])",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_primitives,"assert converter.structure(val, t) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_primitives,"assert converter.structure(val, Any) == val",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_seqs,assert x == y,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_seqs_to_deque,assert x == y,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_sets,assert converted == set_,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_sets,"assert isinstance(converted, non_generic)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_sets,assert converted == set_,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_sets,"assert isinstance(converted, type(set_))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_stringifying_sets,assert len(converted) == len(set_),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_stringifying_sets,assert str(e) in converted,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_hetero_tuples,"assert isinstance(converted, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_hetero_tuples,assert x == y,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_hetero_tuples,"assert isinstance(y, x)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_stringifying_tuples,"assert isinstance(converted, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_stringifying_tuples,assert str(x) == y,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_stringifying_tuples,"assert isinstance(x, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_dicts,assert converted == d,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_dicts,assert converted is not d,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
Tinche,cattrs,tests/test_structure.py,test_structuring_dicts_opts,assert converted == d,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_dicts_opts,assert converted is not d,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
Tinche,cattrs,tests/test_structure.py,test_stringifying_dicts,assert converted[str(k)] == str(v),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_optional_primitives,"assert converter.structure(val, Optional[type]) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_optional_primitives,"assert converter.structure(None, Optional[type]) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_lists_of_opt,assert x == y,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_stringifying_lists_of_opt,assert x is y,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_stringifying_lists_of_opt,assert str(x) == y,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_primitive_union_hook,assert x == y,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_primitive_union_hook,assert str(x) == y,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_structure.py,test_structuring_enums,"assert converter.structure(val.value, enum) == val",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_preconf.py,test_stdlib_json_unions,"assert converter.structure(val, type) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_preconf.py,test_stdlib_json_unions_with_spillover,"assert converter.structure(converter.unstructure(val), type) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_preconf.py,test_ujson_unions,"assert converter.structure(val, type) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_preconf.py,test_orjson_unions,"assert converter.structure(val, type) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_preconf.py,test_msgpack_unions,"assert converter.structure(val, type) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_preconf.py,test_bson_unions,"assert converter.structure(val, type) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_preconf.py,test_pyyaml_unions,"assert converter.structure(val, type) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_preconf.py,test_pyyaml_dates,"assert converter.loads(data, A) == A(datetime(1970, 1, 1, tzinfo=timezone.utc), date(1970, 1, 1))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_preconf.py,test_tomlkit_unions,"assert converter.structure(val, type) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Tinche,cattrs,tests/test_preconf.py,test_cbor2_unions,"assert converter.structure(val, type) == val",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Torvaney,statsbombapi,test/test_json.py,test_prefix,"assert sb_json.data.remove_prefix(sb_json.data.add_prefix(d, prefix), prefix) == d",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Torvaney,statsbombapi,test/test_json.py,test_extract_list_ints,"assert set(sb_json.extract(int, xs)) == set(xs)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Torvaney,statsbombapi,test/test_json.py,test_extract_recursive_bool,"assert {True, False} | set(sb_json.extract(bool, xs)) == {True, False}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Torvaney,statsbombapi,test/test_json.py,test_extract_recursive_json,"assert all((isinstance(x, sb_json.Season) for x in sb_json.extract(sb_json.Season, xs)))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_missing_residue,assert mr.resid == mr_roundtrip.resid,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_missing_residue,assert mr.res_name == mr_roundtrip.res_name,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqidList_index_and_getitem_consistent,assert seqlist[seqlist.index(elem)] == elem,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqlist_equal,assert fgs.SeqidList(seq1) != fgs.SeqidList(seq2),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqlist_equal,assert fgs.SeqidList(seq1) == fgs.SeqidList(seq1),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqlist_equal,assert fgs.SeqidList(seq2) == fgs.SeqidList(seq2),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqids_strategy,assert len(seqids) >= 3,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqids_strategy,assert seqids[i - 1] < s,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ViennaRNA,forgi,test/forgi/graph/property_based_tests.py,test_seqids_strategy,"assert seqids[i - 1][1][1] == s[1][1], '{}, {}'.format(seqids[i - 1], s)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_lengths,assert doc_lengths.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_lengths,"assert doc_lengths.shape == (dtm_arr.shape[0],)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_lengths,assert doc_lengths.tolist() == [sum(row) for row in dtm_arr],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,"assert isinstance(df_abs, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,assert df_abs.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,"assert df_abs.shape == (dtm_arr.shape[1],)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,assert all([0 <= v <= n_docs for v in df_abs]),False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,"assert isinstance(df_rel, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,assert df_rel.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,"assert df_rel.shape == (dtm_arr.shape[1],)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,assert all([0 <= v <= 1 for v in df_rel]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,"assert isinstance(df_log, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,assert df_log.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,"assert df_log.shape == (dtm_arr.shape[1],)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_doc_frequencies,"assert np.allclose(np.exp(df_log), df_rel)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_codoc_frequencies,assert issparse(cooc),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_codoc_frequencies,"assert isinstance(cooc, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_codoc_frequencies,"assert cooc.shape == (n_vocab, n_vocab)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_codoc_frequencies,assert np.all(cooc <= 1),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_codoc_frequencies,assert np.all(0 <= cooc),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_codoc_frequencies,assert np.all(0 <= cooc),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_codoc_frequencies,assert np.all(cooc <= n_docs),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,assert tf.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,"assert tf.shape == (dtm_arr.shape[1],)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,assert tf.tolist() == [sum(row) for row in dtm_arr.T],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,assert tf_prop.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,"assert tf_prop.shape == (dtm_arr.shape[1],)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,assert np.all(tf_prop >= 0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,assert np.all(tf_prop <= 1),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,"assert np.isclose(tf_prop.sum(), 1.0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,assert tf.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,"assert tf.shape == (dtm_arr.shape[1],)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_term_frequencies,"assert np.allclose(np.exp(tf_logprop), tf_prop)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_binary,assert res.ndim == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_binary,assert res.shape == dtm.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_binary,"assert res.dtype.kind in {'i', 'u'}",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_binary,assert issparse(res),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_binary,"assert isinstance(res, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_binary,"assert set(np.unique(res)) <= {0, 1}",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_binary,assert len(zero_ind_dtm) == len(zero_ind_res),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_binary,"assert np.array_equal(ind_dtm, ind_res)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_binary,assert len(notzero_ind_dtm) == len(notzero_ind_res),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_binary,"assert np.array_equal(ind_dtm, ind_res)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_proportions,assert res.ndim == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_proportions,assert res.shape == dtm.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_proportions,assert res.dtype.kind == 'f',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_proportions,assert issparse(res),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_proportions,"assert isinstance(res, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_proportions,assert np.all(res_valid >= -1e-10),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_proportions,assert np.all(res_valid <= 1 + 1e-10),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_log,assert res.ndim == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_log,assert res.shape == dtm.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_log,assert res.dtype.kind == 'f',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_log,assert issparse(res),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_log,"assert isinstance(res, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_log,assert np.all(res >= -1e-10),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_log,assert np.all(res <= max_res + 1e-10),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_double_norm,assert res.ndim == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_double_norm,assert res.shape == dtm.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_double_norm,assert res.dtype.kind == 'f',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_double_norm,"assert isinstance(res, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_double_norm,assert np.all(res_valid >= -1e-10),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tf_double_norm,assert np.all(res_valid <= 1 + 1e-10),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_idf,assert res.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_idf,assert res.shape[0] == dtm.shape[1],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_idf,assert res.dtype.kind == 'f',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_idf,"assert isinstance(res, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_idf,assert np.all(res >= -1e-10),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_idf_probabilistic,assert res.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_idf_probabilistic,assert res.shape[0] == dtm.shape[1],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_idf_probabilistic,assert res.dtype.kind == 'f',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_idf_probabilistic,"assert isinstance(res, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_idf_probabilistic,assert np.all(res >= -1e-10),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tfidf,assert res.ndim == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tfidf,assert res.shape == dtm.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tfidf,assert res.dtype.kind == 'f',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tfidf,assert issparse(res),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_tfidf,"assert isinstance(res, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms,"assert isinstance(res, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms,assert len(res) == dtm.shape[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms,assert len(terms) == len(vals),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms,assert all([t in vocab for t in terms]),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms,assert all([v > lo_thresh for v in vals]),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms,assert all([v <= hi_thresh for v in vals]),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms,assert len(terms) <= top_n,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms,assert sorted(vals) == vals,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms,"assert sorted(vals, reverse=True) == vals",False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms_table,"assert isinstance(res, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms_table,"assert res.columns.tolist() == ['token', 'value']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_sorted_terms_table,"assert res.index.names == ['doc', 'rank']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_to_dataframe,assert df.shape == dtm.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_to_dataframe,"assert np.array_equal(df.to_numpy(), dtm_arr)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_to_dataframe,"assert np.array_equal(df.index.values, doc_labels)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_to_dataframe,"assert np.array_equal(df.columns.values, vocab)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_to_gensim_corpus_and_gensim_corpus_to_dtm,"assert isinstance(gensim_corpus, gensim.matutils.Sparse2Corpus)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_to_gensim_corpus_and_gensim_corpus_to_dtm,assert len(gensim_corpus) == dtm.shape[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_to_gensim_corpus_and_gensim_corpus_to_dtm,"assert isinstance(dtm_, coo_matrix)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_and_vocab_to_gensim_corpus_and_dict,"assert isinstance(gensim_corpus, gensim.matutils.Sparse2Corpus)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_and_vocab_to_gensim_corpus_and_dict,assert len(gensim_corpus) == dtm.shape[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_and_vocab_to_gensim_corpus_and_dict,"assert isinstance(id2word, gensim.corpora.Dictionary)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_bow.py,test_dtm_and_vocab_to_gensim_corpus_and_dict,"assert isinstance(id2word, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_n_from_distribution,assert len(df) == len(distrib),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_n_from_distribution,assert len(row) == n,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_n_from_distribution,"assert list(sorted(row, reverse=True)) == list(row)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_words_for_topics,"assert isinstance(top_words, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_words_for_topics,assert len(top_words) == topic_word_distrib.shape[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_words_for_topics,"assert all((l == top_n for l in map(len, top_words)))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_words_for_topics,"assert all((w in vocab for w in sum(map(list, top_words), [])))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_words_for_topics,"assert isinstance(top_words, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_words_for_topics,assert len(top_words) == topic_word_distrib.shape[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_words_for_topics,"assert all((l == top_n for l in map(len, top_words)))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_top_words_for_topics,"assert all((w_idx in range(len(vocab)) for w_idx in sum(map(list, top_words), [])))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_marginal_topic_distrib,"assert marginal_topic_distr.shape == (n_topics,)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_marginal_topic_distrib,"assert np.isclose(marginal_topic_distr.sum(), 1.0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_marginal_topic_distrib,assert all((0 <= v <= 1 for v in marginal_topic_distr)),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_marginal_word_distrib,"assert p_w.shape == (dtm.shape[1],)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_marginal_word_distrib,"assert np.isclose(p_w.sum(), 1.0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_marginal_word_distrib,assert all((0 <= v <= 1 for v in p_w)),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_word_distinctiveness,"assert w_distinct.shape == (dtm.shape[1],)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_word_distinctiveness,assert all((v > -10000000000.0 for v in w_distinct)),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_word_saliency,"assert w_sal.shape == (dtm.shape[1],)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_word_saliency,assert all((v >= -1e-09 for v in w_sal)),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_most_or_least_salient_words,"assert most_salient.shape == least_salient.shape == (len(vocab),) == (dtm.shape[1],)",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_most_or_least_salient_words,"assert most_salient_n.shape == least_salient_n.shape == (n_salient_words,)",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_most_or_least_distinct_words,"assert most_distinct.shape == least_distinct.shape == (len(vocab),) == (dtm.shape[1],)",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_most_or_least_distinct_words,"assert most_distinct_n.shape == least_distinct_n.shape == (n_distinct_words,)",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_topic_word_relevance,"assert rel_mat.shape == (n_topics, dtm.shape[1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_topic_word_relevance,"assert all((isinstance(x, float) and (not np.isnan(x)) for x in rel_mat.flatten()))",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_most_or_least_relevant_words_for_topic,"assert most_rel.shape == least_rel.shape == (len(vocab),) == (dtm.shape[1],)",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_get_most_or_least_relevant_words_for_topic,"assert most_rel_n.shape == least_rel_n.shape == (n_relevant_words,)",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,"assert isinstance(topic_labels, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,assert len(topic_labels) == n_topics,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,"assert isinstance(l, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,assert len(parts) >= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,assert int(parts[0]) == i + 1,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,assert all((w in vocab for w in parts[1:])),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,"assert isinstance(topic_labels_2, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,assert len(topic_labels_2) == n_topics,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,"assert isinstance(l, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,assert len(parts) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,assert int(parts[0]) == i + 1,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_generate_topic_labels_from_top_words,assert all((w in vocab for w in parts[1:])),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,"assert isinstance(res, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,assert len(res) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,"assert isinstance(res, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,assert len(res) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,"assert isinstance(res, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,assert len(res) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,"assert not isinstance(res, tuple)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,"assert new_theta.shape == (model.doc_topic_.shape[0], model.doc_topic_.shape[1] - n_exclude)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,"assert new_phi.shape == (model.topic_word_.shape[0] - n_exclude, model.topic_word_.shape[1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,"assert np.allclose(np.sum(new_theta, axis=1), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,"assert np.all(np.sum(new_theta, axis=1) <= 1 + 1e-05)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,assert len(old_indices) == len(new_indices) == new_theta.shape[1],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,assert 0 <= min(old_indices) < model.doc_topic_.shape[1],False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,assert 0 <= max(old_indices) < model.doc_topic_.shape[1],False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,assert 0 <= min(new_indices) < new_theta.shape[1],False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,assert 0 <= max(new_indices) < new_theta.shape[1],False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,"assert np.allclose(old_t, new_t)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_stats.py,test_exclude_topics,"assert np.allclose(model.topic_word_[old_ind, :], new_phi[new_ind, :])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_evaluate.py,test_results_by_parameter_single_validation,assert len(res) == len(by_param),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_evaluate.py,test_results_by_parameter_single_validation,"assert all((x == 2 for x in map(len, by_param)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod__eval_tools.py,test_split_dtm_for_cross_validation,assert 0 <= fold < n_folds,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod__eval_tools.py,test_split_dtm_for_cross_validation,assert issparse(train_dtm),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod__eval_tools.py,test_split_dtm_for_cross_validation,assert issparse(test_dtm),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod__eval_tools.py,test_split_dtm_for_cross_validation,assert train_dtm.ndim == test_dtm.ndim == 2,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod__eval_tools.py,test_split_dtm_for_cross_validation,assert train_dtm.shape[0] >= test_dtm.shape[0],False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod__eval_tools.py,test_split_dtm_for_cross_validation,assert 0 < test_dtm.shape[0] <= n_docs // n_folds,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod__eval_tools.py,test_split_dtm_for_cross_validation,assert train_dtm.shape[0] + test_dtm.shape[0] == n_docs,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod__eval_tools.py,test_split_dtm_for_cross_validation,assert train_dtm.shape[1] == test_dtm.shape[1] == n_vocab,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod__eval_tools.py,test_split_dtm_for_cross_validation,assert n_folds == n_generated_folds,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_linebreaks_win2unix,assert '\r\n' not in res,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_linebreaks_win2unix,assert '\n' in res,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_as_chararray,"assert isinstance(res, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_as_chararray,assert len(res) == len(x),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_as_chararray,assert res.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_as_chararray,"assert np.issubdtype(res.dtype, 'str')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_as_chararray,"assert res.tolist() == list(map(str, x_orig))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_dict2df,"assert isinstance(res, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_dict2df,assert len(res) == len(data),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_dict2df,"assert res.columns.tolist() == [key_name, value_name]",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_dict2df,assert len(cell) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_dict2df,assert cell[0] == v,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_dict2df,"assert res[key_name].tolist() == sorted(data.keys(), reverse=not asc)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_dict2df,"assert res[value_name].tolist() == sorted(data.values(), reverse=not asc)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_dict2df,assert res[key_name].tolist() == list(data.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_dict2df,assert res[value_name].tolist() == list(data.values()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_flatten_list,assert type(l_) is list,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_flatten_list,"assert len(l_) == sum(map(len, l))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_mat2d_window_from_indices,assert window.shape[0] == asserted_y_shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_mat2d_window_from_indices,assert window.shape[1] == asserted_x_shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_mat2d_window_from_indices,"assert window[w_y, w_x] == mat[m_y, m_x]",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_merge_dicts,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_merge_dicts,assert len(res) <= n,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_merge_dicts,assert len(res) == n,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_merge_dicts,assert res[k] == v,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_merge_dicts,assert set(res.keys()) == all_keys,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_merge_dicts,assert list(res.keys()) == sorted(all_keys),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_merge_sets,assert res == all_elems,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_sample_dict,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_sample_dict,assert len(res) == n,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_sample_dict,assert set(res.keys()) <= set(d.keys()),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_sample_dict,assert v == d[k],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_greedy_partitioning,assert k == len(bins),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_greedy_partitioning,assert len(bins) == len(elems_dict),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_greedy_partitioning,assert bins == elems_dict,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_greedy_partitioning,assert sum((len(b.keys()) for b in bins)) == len(elems_dict),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_greedy_partitioning,assert all(((k in elems_dict.keys() for k in b.keys()) for b in bins)),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_utils.py,test_greedy_partitioning,assert all((len(b) == 1 for b in bins)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_find_clusters_1d_break_dist,assert type(clusts) is list,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_find_clusters_1d_break_dist,"assert sum(map(len, clusts)) == len(seq)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_find_clusters_1d_break_dist,assert len(idx_list) == len(seq),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_find_clusters_1d_break_dist,"assert np.array_equal(recon_sorted, seq_sorted)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_find_clusters_1d_break_dist,assert max_dist_in_clust < delta,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_find_clusters_1d_break_dist,assert min(gaps) >= delta,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_zip_clusters_and_values,assert len(clusts_w_vals) == len(clusts),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_zip_clusters_and_values,assert len(tup) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_zip_clusters_and_values,assert len(ind) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_zip_clusters_and_values,assert len(ind) == len(vals),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_zip_clusters_and_values,"assert np.array_equal(arr[ind], vals)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_calc_cluster_centers_1d,assert len(centers) == len(clusts_w_vals),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_calc_cluster_centers_1d,assert c == np.median(vals),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_array_match_difference_1d,"assert diff1 == array_match_difference_1d(l2, l1)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_array_match_difference_1d,assert diff1 == np.sum(np.abs(np.array(l1) - np.array(l2))),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_find_best_matching_array_hypothesis,assert len(corrected_row) == len(model),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_clustering.py,test_find_best_matching_array_hypothesis,assert diffsum >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_coords_to_points_and_points_to_coords,"assert np.array_equal(points_to_coords(coords_to_points(coords)), coords)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,"assert set(sum(list(poly_to_pts.values()), [])) == set(available_points)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,"assert isinstance(pts_to_poly, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,assert len(pts_to_poly) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,assert len(pts_to_poly) == n_pts,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,assert set(list(pts_to_poly.keys())) == set(available_points),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_get_points_to_poly_assignments_hypothesis,assert set(list(pts_to_poly.values())) == set(list(range(n_poly))),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(res, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert len(res) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(unassigned_pts, set)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert all([pt in range(n_pts) for pt in unassigned_pts]),False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert len(res) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_polys, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_pts, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert list(region_polys.keys()) == list(region_pts.keys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert list(region_polys.keys()) == list(region_pts.keys()) == [0],False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert 0 <= i_geom < n_geoms,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_polys_in_geom, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_pts_in_geom, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert list(region_polys_in_geom.keys()) == list(region_pts_in_geom.keys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert len(region_polys) <= n_pts,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert len(region_pts) == len(region_polys),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert set(range(n_pts)) - set(pts_region.keys()) == unassigned_pts,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_polys, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,"assert isinstance(region_pts, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert list(region_polys.keys()) == list(region_pts.keys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,geovoronoi,tests/test_main.py,test_voronoi_regions_from_coords_italy,assert n_pts < 4,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_geom.py,test_vecangle_2,assert np.isnan(alpha),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_geom.py,test_vecangle_2,assert 0 <= alpha <= np.pi,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_geom.py,test_project_polarcoord_lines,assert type(res) is list,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_geom.py,test_project_polarcoord_lines,assert len(res) == len(hough_lines),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_geom.py,test_project_polarcoord_lines,assert len(pts) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_geom.py,test_project_polarcoord_lines,assert type(pts[0]) == type(pts[1]) == np.ndarray,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,pdftabextract,tests/test_geom.py,test_project_polarcoord_lines,assert len(pts[0]) == len(pts[1]) == 2,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.nlp == spacy_instance_en_sm,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert corp.punctuation == list(string.punctuation) + [' ', '\r', '\n', '\t']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.punctuation == punctuation,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert 0 < corp.max_workers <= max(2, multiprocessing.cpu_count())",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.procexec is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.workers_docs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert len(corp.workers_docs) == min(corp.max_workers, len(docs))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert len(workers_docs_flat) == len(workers_docs_flat_set),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert workers_docs_flat_set == set(docs.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.workers_timeout == workers_timeout,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert str(corp) == repr(corp),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert str(corp).startswith(f'<Corpus [{len(docs)}'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert len(corp) == len(docs),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert bool(corp) == bool(docs),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert '_new_doc' in corp,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert len(corp) == len(docs) + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert corp['_new_doc']['token'] == ['Foo', 'bar', '.']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert '_new_doc' not in corp,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert len(corp) == len(docs),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert lbl in docs.keys(),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert isinstance(tok, c.Document)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert lbl == lbl2,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert tok == tok2,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.uses_unigrams,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.token_attrs == corp._spacy_token_attrs,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.custom_token_attrs_defaults == {},False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert corp.doc_attrs == ('label', 'has_sents')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert corp.doc_attrs_defaults == {'has_sents': False, 'label': ''}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.ngrams == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.ngrams_join_str == ' ',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.language == 'en',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.language_model == 'en_core_web_sm',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.doc_labels == list(docs.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.has_sents,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp.n_docs == len(docs),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert isinstance(corp[lbl], c.Document)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert isinstance(corp.get(lbl), c.Document)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert corp[lbl]['token'] == corp.get(lbl)['token'] == c.doc_tokens(corp, select=lbl)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert corp.get('nonexistent', None) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp[ind] == corp[corp.doc_labels[ind]],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert corp[:ind] == [corp[lbl] for lbl in corp.doc_labels[:ind]],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,assert next(iter(corp)) == next(iter(corp.keys())),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_init_and_properties_hypothesis,"assert isinstance(next(iter(corp.values())), c.Document)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_lengths,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_lengths,assert set(res.keys()) == set(corp.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_lengths,"assert set(res.keys()) == ({select} if isinstance(select, str) else set(select)) - {'nonexistent'}",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_lengths,assert n >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_lengths,assert n == expected[lbl],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_lengths,assert n >= len(textdata_en[lbl].split()),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_lengths,"assert isinstance(res, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_lengths,assert set(res['doc']) == set(corp.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_lengths,"assert set(res['doc']) == ({select} if isinstance(select, str) else set(select)) - {'nonexistent'}",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_token_lengths,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_token_lengths,assert set(res.keys()) == set(corp.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_token_lengths,"assert set(res.keys()) == ({select} if isinstance(select, str) else set(select)) - {'nonexistent'}",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_token_lengths,"assert isinstance(toklengths, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_token_lengths,assert all([n >= 0 for n in toklengths]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_token_lengths,assert toklengths == expected[lbl],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_num_sents,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_num_sents,assert set(res.keys()) == set(corp.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_num_sents,"assert set(res.keys()) == ({select} if isinstance(select, str) else set(select)) - {'nonexistent'}",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_num_sents,"assert isinstance(n_sents, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_num_sents,assert n_sents >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_num_sents,assert n_sents == expected[lbl],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_num_sents,"assert isinstance(res, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_num_sents,assert set(res['doc']) == set(corp.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_num_sents,"assert set(res['doc']) == ({select} if isinstance(select, str) else set(select)) - {'nonexistent'}",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_sent_lengths,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_sent_lengths,assert set(res.keys()) == set(corp.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_sent_lengths,"assert set(res.keys()) == ({select} if isinstance(select, str) else set(select)) - {'nonexistent'}",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_sent_lengths,assert all([l >= 0 for l in s_lengths]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_sent_lengths,assert all([l > 0 for l in s_lengths]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_sent_lengths,assert len(s_lengths) == num_sents[lbl],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_sent_lengths,assert sum(s_lengths) == num_tok[lbl],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_labels_sample,"assert isinstance(res, set)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_labels_sample,assert len(res) == n,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_labels_sample,assert res <= set(corp.keys()),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_texts,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_texts,assert set(res.keys()) == set(corp.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_texts,"assert set(res.keys()) == ({select} if isinstance(select, str) else set(select))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_texts,"assert isinstance(txt, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_texts,assert txt == textdata_en[lbl],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_texts,assert txt == expected[collapse][lbl],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_texts,"assert isinstance(res, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_texts,assert set(res['doc']) == set(corp.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_texts,"assert set(res['doc']) == ({select} if isinstance(select, str) else set(select))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,"assert set(res.keys()) == c.vocabulary(corp, select=select, sort=False)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,assert all([0 < v <= 1 for v in res.values()]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,"assert np.isclose(res['the'], 5 / 9)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,assert all([v <= 0 for v in res.values()]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,assert all([0 < 10 ** v <= 1 for v in res.values()]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,"assert np.isclose(res['the'], math.log10(5 / 9))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,assert all([0 < v < len(corp) for v in res.values()]),False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,assert any([v > 0 for v in res.values()]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,assert res['the'] == 5,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,"assert isinstance(res, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_frequencies,"assert set(res['token']) == c.vocabulary(corp, select=select, sort=False)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_vectors,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_vectors,assert set(res.keys()) == expected_lbls - {'empty'},False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_vectors,assert set(res.keys()) == expected_lbls,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_vectors,"assert isinstance(vec, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_doc_vectors,assert len(vec) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_token_vectors,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_token_vectors,assert set(res.keys()) == set(corp.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_token_vectors,"assert set(res.keys()) == ({select} if isinstance(select, str) else set(select)) - {'nonexistent'}",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_token_vectors,"assert isinstance(mat, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_token_vectors,assert len(mat) == sum([not t.is_oov for t in spdocs[lbl]]),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_token_vectors,assert len(mat) == doc_length[lbl],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_token_vectors,assert mat.ndim == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_spacydocs,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_spacydocs,assert set(res.keys()) == set(corp.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_spacydocs,"assert set(res.keys()) == ({select} if isinstance(select, str) else set(select)) - {'nonexistent'}",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_spacydocs,"assert isinstance(d, Doc)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_spacydocs,assert d.text_with_ws == texts[lbl],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_hypothesis,"assert isinstance(res, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_hypothesis,assert sorted(res) == res,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_hypothesis,"assert isinstance(res, set)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_hypothesis,assert len(res) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_hypothesis,assert len(res) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_hypothesis,"assert set(res) == {'This', 'is', 'a', 'small', 'example', 'document', '.'}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_hypothesis,assert all((t in corp_flat for t in res)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_hypothesis,"assert all([np.issubdtype(t.dtype, 'uint64') for t in res])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_hypothesis,"assert all([isinstance(t, expect_type) for t in res])",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,assert len(res) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,assert len(res) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,"assert all([np.issubdtype(t.dtype, 'uint64') for t in res.keys()])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,"assert all([isinstance(t, expect_type) for t in res.keys()])",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,assert all((t in corp_flat for t in res.keys())),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,assert all([n > 0 for n in res.values()]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,assert all([0 < n <= 1 for n in res.values()]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,assert all([n <= 0 and 0 < 10 ** n <= 1 for n in res.values()]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,assert vocab == set(res.keys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,"assert isinstance(res, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_counts,assert set(res['token']) == vocab,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_size,"assert isinstance(res, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_size,assert res > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_size,assert res <= len(corp_flat),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_vocabulary_size,assert res == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_tokens_flattened,"assert isinstance(res, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_tokens_flattened,assert len(res) >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_tokens_flattened,assert len(sent) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_tokens_flattened,assert len(sent) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_tokens_flattened,assert n_tok == sum(doc_len),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_num_tokens,"assert res == sum(c.doc_lengths(corp, select=select).values())",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_num_tokens,assert res == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_num_chars,assert res == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_num_chars,assert res > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_unique_chars,assert res == set(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_unique_chars,"assert isinstance(res, set)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_unique_chars,"assert all([isinstance(c, str) and len(c) == 1 for c in res])",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_unique_chars,"assert res == {'.', 'T', 'a', 'c', 'd', 'e', 'h', 'i', 'l', 'm', 'n', 'o', 'p', 's', 't', 'u', 'x'}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_summary,"assert isinstance(res, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_summary,assert str(len(corp)) in res,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_summary,assert LANGUAGE_LABELS[corp.language].capitalize() in res,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_summary,assert str(c.corpus_num_tokens(corp)) in res,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_summary,assert str(c.vocabulary_size(corp)) in res,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_summary,"assert len(lines) == 2 + min(len(corp), n_docs_printed + bool(len(corp) > n_docs_printed))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_corpus_summary,assert f'{corp.ngrams}-grams' in lines[-1],False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert isinstance(res, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert len(res) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert isinstance(doclabels, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert isinstance(res, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert len(res) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert isinstance(doclabels, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert isinstance(res, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert len(res) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert isinstance(vocab, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert dtm.ndim == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert dtm.shape[0] == len(expected_labels),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert dtm.shape[1] == len(expected_vocab),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert isinstance(dtm, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert dtm.index.tolist() == expected_labels,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert dtm.columns.tolist() == expected_vocab,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert np.sum(dtm.iloc[expected_labels.index('empty'), :]) == 0",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert np.sum(dtm.iloc[:, expected_vocab.index('the')]) > 1",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert dtm.iloc[expected_labels.index('small1'), expected_vocab.index('the')] == 1",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert isinstance(dtm, csr_matrix)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert dtm.dtype == np.dtype(dtype or 'int32'),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert np.sum(dtm[expected_labels.index('empty'), :]) == 0",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert np.sum(dtm[:, expected_vocab.index('the')]) > 1",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,"assert dtm[expected_labels.index('small1'), expected_vocab.index('the')] == 1",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert doclabels == expected_labels,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_dtm,assert vocab == expected_vocab,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,"assert isinstance(res, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,assert set(corp.keys()) == set(res.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,"assert isinstance(ng, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,assert ng == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,assert len(ng) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,assert ng == [join_str.join(dtok)],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,assert ng == [dtok],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,"assert all([isinstance(g, str) for g in ng])",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,assert all([join_str in g for g in ng]),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,"assert all([isinstance(g, list) for g in ng])",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_ngrams_hypothesis,assert all([len(g) == n for g in ng]),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,assert len(corp) == len(corp2),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,assert corp2.language == 'en',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,assert c.doc_tokens(corp) == c.doc_tokens(corp2),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,"assert {lbl: d['sent_start'] for lbl, d in corp2.items()} == sent_start_per_doc",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,"assert c.doc_tokens(corp, sentences=True) == c.doc_tokens(corp2, sentences=True)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,assert all([not d.has_sents for d in corp2.values()]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,assert len(corp_table) == len(corp2_table),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,"assert _dataframes_equal(corp_table, corp2_table, require_same_index=False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,assert corp.nlp is corp2.nlp,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,assert corp.max_workers == corp2.max_workers,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_load_corpus_from_tokens_hypothesis,assert corp.nlp is not corp2.nlp,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_join_collocations_by_statistic_hypothesis,"assert isinstance(res, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_join_collocations_by_statistic_hypothesis,assert len(res) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_join_collocations_by_statistic_hypothesis,"assert isinstance(res, c.Corpus)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_join_collocations_by_statistic_hypothesis,assert res is not corp,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_join_collocations_by_statistic_hypothesis,assert all([glue in t for t in colloc]),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_join_collocations_by_statistic_hypothesis,assert len(set(colloc)) <= len(vocab),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_corpus.py,test_join_collocations_by_statistic_hypothesis,assert len(d[a]) == len(d),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_topic_words,"assert top_topic_words.shape == (topic_word.shape[0], top_n)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_topic_words,"assert np.array_equal(top_topic_words.index.values, rownames)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_topic_words,"assert np.array_equal(top_topic_words.columns.values, colnames)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_word_topics,"assert top_word_topics.shape == (topic_word.shape[1], top_n) == (len(vocab), top_n)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_word_topics,"assert np.array_equal(top_word_topics.index.values, vocab)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_word_topics,"assert np.array_equal(top_word_topics.columns.values, colnames)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_doc_topics,"assert top_doc_topics.shape == (doc_topic.shape[0], top_n)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_doc_topics,"assert np.array_equal(top_doc_topics.index.values, doc_labels)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_doc_topics,"assert np.array_equal(top_doc_topics.columns.values, colnames)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_topic_docs,"assert top_topic_docs.shape == (doc_topic.shape[1], top_n)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_topic_docs,"assert np.array_equal(top_topic_docs.index.values, rownames)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_top_topic_docs,"assert np.array_equal(top_topic_docs.columns.values, colnames)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_full_topic_words,"assert isinstance(df, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_full_topic_words,assert df.columns.tolist() == ['_topic'] + list(vocab),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_full_topic_words,"assert np.array_equal(df.iloc[:, 0].to_numpy(), rownames)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_full_doc_topics,"assert isinstance(df, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_full_doc_topics,assert df.columns.tolist() == ['_doc'] + list(colnames),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_ldamodel_full_doc_topics,"assert np.array_equal(df.iloc[:, 0].to_numpy(), doc_labels)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_save_ldamodel_summary_to_excel,"assert isinstance(excelsheets, OrderedDict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_save_ldamodel_summary_to_excel,assert list(excelsheets.keys()) == sheetnames,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
WZBSocialScienceCenter,tmtoolkit,tests/test_topicmod_model_io.py,test_save_ldamodel_summary_to_excel,"assert isinstance(excelsheets[sheetn], pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_autograd_ste_ops.py,test_fwd,assert output is mocked_output,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_autograd_ste_ops.py,test_fwd,assert output is mocked_output,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_autograd_ste_ops.py,test_fwd,assert output is mocked_output,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_autograd_ste_ops.py,test_fwd,assert output is mocked_output,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_autograd_ste_ops.py,test_fwd,assert output is mocked_output,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_autograd_ste_ops.py,test_bwd_zero,assert reference_output == 0.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_int_quant.py,test_int_quant_to_int_called_with,float_to_int_impl.assert_called_once_with(output),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_int_quant.py,test_int_quant_to_int_called_with,"tensor_clamp_impl.assert_called_once_with(output, min_val=int_quant.min_int(bit_width), max_val=int_quant.max_int(bit_width))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_ops_ste.py,test_elemwise_ste_backend,python_backend.assert_called_once_with(inp),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_ops_ste.py,test_elemwise_ste_backend,assert return_val is mocked_return_val,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_ops_ste.py,test_tensor_clamp_ste_backend,"python_backend.assert_called_once_with(inp, min_val, max_val)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_ops_ste.py,test_tensor_clamp_ste_backend,assert return_val is mocked_return_val,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_ops_ste.py,test_scalar_clamp_ste_backend,"python_backend.assert_called_once_with(inp, min_val, max_val)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_ops_ste.py,test_scalar_clamp_ste_backend,assert return_val is mocked_return_val,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_ops_ste.py,test_scalar_clamp_min_ste_backend,"python_backend.assert_called_once_with(inp, min_val)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_ops_ste.py,test_scalar_clamp_min_ste_backend,assert return_val is mocked_return_val,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_tensor,assert shape == -1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_batch_over_tensor,assert len(shape) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_batch_over_tensor,assert shape[0] == x.shape[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_batch_over_tensor,assert shape[1] == -1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_output_channels,assert len(shape) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_output_channels,assert shape[0] == x.shape[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_output_channels,assert shape[1] == -1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_batch_over_output_channels,assert len(shape) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_batch_over_output_channels,assert shape[0] == x.shape[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_batch_over_output_channels,assert shape[1] == x.shape[1],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/function/test_shape.py,test_shape_over_batch_over_output_channels,assert shape[2] == -1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_binary_quant.py,test_binary_quant,scaling_impl.assert_called_once_with(inp),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_binary_quant.py,test_binary_quant,"assert is_binary_output_value_correct(scale, output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_binary_quant.py,test_binary_quant,"assert is_binary_output_sign_correct(inp, output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_binary_quant.py,test_binary_quant,assert zp == torch.tensor(0.0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_binary_quant.py,test_binary_quant,assert bit_width == torch.tensor(1.0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_binary_quant.py,test_output_sign,"assert is_binary_output_sign_correct(inp, output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_binary_quant.py,test_output_value,"assert is_binary_output_value_correct(scale, output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_ternary_quant.py,test_ternary_quant,scaling_impl.assert_called_once_with(inp),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_ternary_quant.py,test_ternary_quant,"assert is_ternary_output_value_correct(scale, output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_ternary_quant.py,test_ternary_quant,"assert is_ternary_output_sign_correct(inp, scale * threshold, output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_ternary_quant.py,test_ternary_quant,assert zp == torch.tensor(0.0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_ternary_quant.py,test_ternary_quant,assert bit_width == torch.tensor(2.0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_ternary_quant.py,test_output_sign,"assert is_ternary_output_sign_correct(inp, scale_thr, output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Xilinx,brevitas,tests/brevitas/core/test_ternary_quant.py,test_output_value,"assert is_ternary_output_value_correct(scale, output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Yelp,paasta,tests/test_kubernetes_tools.py,test_max_unavailable,assert res == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Yelp,paasta,tests/test_kubernetes_tools.py,test_max_unavailable,assert res >= 1 and res <= instances,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
Yelp,paasta,tests/test_kubernetes_tools.py,test_max_unavailable,assert type(res) is int,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_position_log.py,test_resample_onto_unchanged_md,"np.testing.assert_allclose(pos.depth, resampled.depth)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_position_log.py,test_resample_onto_unchanged_md,"np.testing.assert_allclose(pos.northing, resampled.northing)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_position_log.py,test_resample_onto_unchanged_md,"np.testing.assert_allclose(pos.easting, resampled.easting)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_unit_vector_domain,assert -1 <= vd <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_unit_vector_domain,assert -1 <= northing <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_unit_vector_domain,assert -1 <= easting <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_zero_inc_yields_vertical_nev,"assert direction_vector(0.0, azi) == (0, 0, 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_zero_azi_fixes_easting,assert -1 <= vd <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_zero_azi_fixes_easting,assert -1 <= northing <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_zero_azi_fixes_easting,assert easting == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_180_inc_yields_vertical_nev,"assert direction_vector(180.0, azi) == (approx(0), approx(0), -1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_spherical_single,assert 0 <= azi < 360,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_spherical_list,assert np.all(0 <= azi),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_spherical_list,assert np.all(azi < 360),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_spherical_position_roundtrip,assert np.isnan(v),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_spherical_position_roundtrip,"assert V == approx(v, abs=1e-09)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_spherical_position_roundtrip,assert np.isnan(n),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_spherical_position_roundtrip,"assert N == approx(n, abs=1e-09)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_spherical_position_roundtrip,assert np.isnan(e),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zabamund,wellpathpy,wellpathpy/test/test_geometry.py,test_spherical_position_roundtrip,"assert E == approx(e, abs=1e-09)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesmith,tests/test_cst.py,test_ast_unparse_from_nodes,assert ast.dump(first) == ast.dump(second),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesmith,tests/test_cst.py,test_parso_from_node,assert source_code == result,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_canonicalise.py,test_canonicalises_to_equivalent_fixpoint,assert cc == canonicalish(cc),False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_canonicalise.py,test_canonicalises_to_equivalent_fixpoint,"assert is_valid(instance, schema) == is_valid(instance, cc)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_canonicalise.py,test_self_merge_eq_canonicalish,assert m == canonicalish(schema),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_canonicalise.py,test_merge_semantics,"assert combined == merged([s2, s1])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_canonicalise.py,test_can_almost_always_merge_numeric_schemas,"assert isinstance(mul1, float) or isinstance(mul2, float)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_canonicalise.py,test_can_almost_always_merge_numeric_schemas,assert mul1 != mul2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
Zac-HD,hypothesis-jsonschema,tests/test_canonicalise.py,_canonicalises_to_equivalent_fixpoint,assert cc == canonicalish(cc),False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_canonicalise.py,_canonicalises_to_equivalent_fixpoint,"assert is_valid(instance, schema) == is_valid(instance, cc)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,strategies-and-tactics.py,test_filter_even_numbers,assert str(x)[-1] in '02468',False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,strategies-and-tactics.py,test_filter_odd_numbers,assert str(x)[-1] in '13579',False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,strategies-and-tactics.py,test_map_even_numbers,assert x[-1] in '02468',False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,strategies-and-tactics.py,test_map_odd_numbers,assert x[-1] in '13579',False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,strategies-and-tactics.py,test_a_composite_strategy,"assert all((isinstance(n, int) for n in lst))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,strategies-and-tactics.py,test_a_composite_strategy,assert all((n < 1 for n in lst)),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,strategies-and-tactics.py,test_a_composite_strategy,assert lst[index] >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_generated_data_matches_schema,assert make_validator(schema).is_valid(value),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_generated_data_matches_schema,assert make_validator(canonicalish(schema)).is_valid(value),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_handles_overlapping_patternproperties,"assert isinstance(value, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_handles_overlapping_patternproperties,assert len(value) >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_handles_overlapping_patternproperties,assert 'ab' not in value,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_allowed_custom_format,assert num == '4111 1111 1111 1111',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_allowed_unknown_custom_format,assert string == 'hello world',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_overriding_standard_format,assert value == expected,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_can_generate_empty_list_with_max_size_and_no_allowed_items,assert val == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_can_generate_list_with_max_size_and_no_allowed_additional_items,"assert val == [1, 2, 3]",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_does_not_generate_trailing_newline_from_dollar_pattern,assert not string.endswith('\n'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_no_null_bytes,assert '\x00' not in example['p1'],False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_no_null_bytes,assert '\x00' not in example['p2']['pp1'],False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_from_schema.py,test_no_null_bytes,assert all(('\x00' not in item for item in example['p3'])),False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,scientific-hypothesis.py,test_array_round_trip,"np.testing.assert_array_equal(arr, new)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,scientific-hypothesis.py,test_dataframe_round_trip,"pd.testing.assert_frame_equal(df, new)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_encode.py,test_canonical_json_encoding,assert v == v2,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesis-jsonschema,tests/test_encode.py,test_canonical_json_encoding,assert encode_canonical_json(v2) == encoded,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesmith,tests/test_syntactic.py,test_tokenize_round_trip_bytes,"assert [(t.type, t.string) for t in tokens] == [(t.type, t.string) for t in output]",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesmith,tests/test_syntactic.py,test_tokenize_round_trip_string,"assert [(t.type, t.string) for t in tokens] == [(t.type, t.string) for t in output]",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesmith,tests/test_syntactic.py,test_ast_unparse_from_grammar,assert ast.dump(first) == ast.dump(second),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,hypothesmith,tests/test_syntactic.py,test_parso_from_grammar,assert source_code == result,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,pbt-101.py,test_sort_a_list_hypothesis,assert Counter(lst) == Counter(new),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,pbt-101.py,test_sum_of_list_greater_than_max,assert max(lst) < sum(lst),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
Zac-HD,escape-from-automanual-testing,pbt-101.py,test_leftpad,"assert isinstance(padded, type(u'')), padded",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,tough-bonus-problems.py,test_schema_inference,"assert validate(schema, instance)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,tough-bonus-problems.py,test_bfs_connected,assert path[-1] == end,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,tough-bonus-problems.py,test_bfs_connected,"assert len(path) == len(set(path)), 'path={} has loops!'.format(path)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
Zac-HD,escape-from-automanual-testing,test-the-untestable.py,test_mean_properties,assert min(values) <= result <= max(values),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
adamreeve,npTDMS,nptdms/test/test_tdms_file.py,test_reading_subset_of_data,assert len(channel_subset) == len(expected_data),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
adamreeve,npTDMS,nptdms/test/test_tdms_file.py,test_reading_subset_of_data,"np.testing.assert_equal(channel_subset, expected_data)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
adamreeve,npTDMS,nptdms/test/test_tdms_file.py,test_indexing_channel_with_integer,assert channel_object[index] == expected_channel_data[index],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
adamreeve,npTDMS,nptdms/test/test_tdms_file.py,test_indexing_channel_with_negative_integer,assert channel_object[index] == expected_channel_data[index],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
adamreeve,npTDMS,nptdms/test/test_tdms_file.py,test_indexing_timestamp_channel_with_integer,assert channel_object[index] == expected_channel_data[index],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
aertslab,SCope,opt/test/test_cell_color_by_features.py,test_normalise_vals2,assert np.amin(normalised) >= LOWER_LIMIT_RGB,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
aertslab,SCope,opt/test/test_cell_color_by_features.py,test_normalise_vals2,assert np.amax(normalised) <= UPPER_LIMIT_RGB,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
aertslab,SCope,opt/test/test_data.py,test_vmax,"assert data.get_99_and_100_percentiles(values) == (expected_99, expected_100)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aertslab,SCope,opt/test/test_data.py,test_uniq,assert set(values) == set(unique_values),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
aertslab,SCope,opt/test/test_data.py,test_uniq,assert len(set(values)) == len(unique_values),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
akurniawan,pytorch-transformer,src/modules/smoothing_test.py,test_label_smoothing,"self.assertAlmostEqual(round(test), 1.0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alethiophile,qtoml,tests/test_hypothesis.py,test_circular_encode,assert patch_floats(qtoml.loads(qtoml.dumps(data))) == patch_floats(data),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alethiophile,qtoml,tests/test_hypothesis.py,test_string_encode,assert qtoml.loads(qtoml.dumps(obj)) == obj,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Session_repr,assert repr(Session(s)) == 'Session(0x{:08X})'.format(s),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Session_eq,assert (Session(s) == Session(t)) == (s == t),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Session_eq,assert Session(s) != False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
alexshpilkin,dvrip,test_dvrip.py,test_Session_hash,assert hash(Session(s)) == hash(s),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Session_forjson,assert Session(s).for_json() == '0x{:08X}'.format(s),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_version_jsonto,assert s == 'Unknown' or _json_to_version(s) == s,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_version_forjson,assert s is None or _version_for_json(s) == s,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Info_repr,assert repr(cmd) == 'Info.{}'.format(cmd.name),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Info_str,assert str(cmd) == cmd.value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_Info_forjson,assert cmd.for_json() == cmd.value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_info_jsonto,assert Info.json_to(cmd.value) == cmd,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ip_forjson,"assert _ip_for_json('{}.{}.{}.{}'.format(a, b, c, d)) == '0x{3:02X}{2:02X}{1:02X}{0:02X}'.format(a, b, c, d)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ip_jsonto,"assert _json_to_ip('0x{3:02X}{2:02X}{1:02X}{0:02X}'.format(a, b, c, d)) == '{}.{}.{}.{}'.format(a, b, c, d)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ip_forjson_jsonto,assert _json_to_ip(_ip_for_json(value)) == value,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ip_jsonto_forjson,assert _ip_for_json(_json_to_ip(value)) == value,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_str,"assert str(ConnectionEntry(user=user, service=service)) == 'user {} service {}'.format(user, service)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_str,"assert str(ConnectionEntry(user=user, service=service, host=host)) == 'user {} service {} host {}'.format(user, service, host)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_repr,"assert repr(ConnectionEntry(user=user, service=service)) == 'ConnectionEntry(user={!r}, service={!r}, host=None)'.format(user, service, host)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_repr,"assert repr(ConnectionEntry(user=user, service=service, host=host)) == 'ConnectionEntry(user={!r}, service={!r}, host={!r})'.format(user, service, host)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_eq,"assert (ConnectionEntry(user=auser, service=aservice, host=ahost) == ConnectionEntry(user=buser, service=bservice, host=bhost)) == (auser == buser and aservice == bservice and (ahost == bhost))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_eq,"assert ConnectionEntry(user=auser, service=aservice, host=ahost) != False",False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_forjson,"assert ConnectionEntry(user=user, service=service).for_json() == '{},{}'.format(user, service)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_forjson,"assert ConnectionEntry(user=user, service=service, host=host).for_json() == '{},{}:{}'.format(user, service, host)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_jsonto,"assert ConnectionEntry.json_to('{},{}'.format(user, service)) == ConnectionEntry(user=user, service=service)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_jsonto,"assert ConnectionEntry.json_to('{},{}:{}'.format(user, service, host)) == ConnectionEntry(user=user, service=service, host=host)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_forjson_jsonto,assert ConnectionEntry.json_to(value.for_json()) == value,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_ConnectionEntry_jsonto_forjson,assert ConnectionEntry.json_to(datum).for_json() == datum,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_str,"assert str(RecordEntry(channel=channel, trigger=trigger)) == 'channel {} trigger {}'.format(channel, trigger.name.lower())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_repr,"assert repr(RecordEntry(channel=channel, trigger=trigger)) == 'RecordEntry(channel={!r}, trigger={!r})'.format(channel, trigger)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_eq,"assert (RecordEntry(channel=achannel, trigger=atrigger) == RecordEntry(channel=bchannel, trigger=btrigger)) == (achannel == bchannel and atrigger == btrigger)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_eq,"assert RecordEntry(channel=achannel, trigger=atrigger) != False",False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_forjson,"assert RecordEntry(channel=channel, trigger=trigger).for_json() == '{},{}'.format(trigger.value, channel)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_jsonto,"assert RecordEntry.json_to('{},{}'.format(trigger.value, channel)) == RecordEntry(channel=channel, trigger=trigger)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_forjson_jsonto,assert RecordEntry.json_to(value.for_json()) == value,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_RecordEntry_jsonto_forjson,assert RecordEntry.json_to(datum).for_json() == datum,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_EntryType_repr,assert repr(value) == 'EntryType.{}'.format(value.name),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_EntryType_forjson,assert value.for_json() == value.value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_EntryType_jsonto,assert EntryType.json_to(value.value) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_EntryType_forjson_jsonto,assert EntryType.json_to(value.for_json()) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_dvrip.py,test_EntryType_jsonto_forjson,assert EntryType.json_to(value.value).for_json() == value.value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_bool_forjson,assert for_json(b) == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_bool_jsonto,assert json_to(bool)(b) == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_bool_forjson_jsonto,assert json_to(bool)(for_json(b)) == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_bool_jsonto_forjson,assert for_json(json_to(bool)(b)) == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_int_forjson,assert for_json(i) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_int_jsonto,assert json_to(int)(i) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_int_forjson_jsonto,assert json_to(int)(for_json(i)) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_int_jsonto_forjson,assert for_json(json_to(int)(i)) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_str_forjson,assert for_json(s) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_str_jsonto,assert json_to(str)(s) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_str_forjson_jsonto,assert json_to(str)(for_json(s)) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_str_jsonto_forjson,assert for_json(json_to(str)(s)) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optional_forjson,assert for_json(o) == o,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optional_jsonto,assert json_to(Optional[int])(o) == o,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optional_forjson_jsonto,assert json_to(Optional[int])(for_json(o)) == o,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optional_jsonto_forjson,assert for_json(json_to(Optional[int])(o)) == o,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_list_forjson,assert for_json(l) == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_list_jsonto,assert json_to(List[int])(l) == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_list_forjson_jsonto,assert json_to(List[int])(for_json(l)) == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_list_jsonto_forjson,assert for_json(json_to(List[int])(l)) == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_dict_forjson,assert for_json(d) == d,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_dict_jsonto,"assert json_to(Dict[str, int])(d) == d",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_dict_forjson_jsonto,"assert json_to(Dict[str, int])(for_json(d)) == d",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_dict_jsonto_forjson,"assert for_json(json_to(Dict[str, int])(d)) == d",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_compose,"assert _compose(lambda x: x + 1, lambda x: 2 * x)(i) == 2 * i + 1",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_get,assert mobj.mint == i and mobj.mhex == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_set,assert mobj.mint == i and mobj.mhex == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_set,assert mobj.mint == j and mobj.mhex == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_set,assert mobj.mint == j and mobj.mhex == c,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_repr,"assert repr(Example(mint=i, mhex=b)) == 'Example(mint={!r}, mhex={!r})'.format(i, b)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_eq,"assert (Example(mint=i, mhex=b) == Example(mint=j, mhex=c)) == (i == j and b == c)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_eq,"assert Example(mint=i, mhex=b) != Ellipsis",False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
alexshpilkin,dvrip,test_typing.py,test_Object_forjson,"assert Example(mint=i, mhex=b).for_json() == {'Int': i, 'Hex': b.hex()}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_jsonto,"assert Example.json_to({'Int': i, 'Hex': h}) == Example(mint=i, mhex=bytes.fromhex(h))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_forjson_jsonto,assert Example.json_to(mobj.for_json()) == mobj,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_forjson_jsonto,assert NestedExample.json_to(nst.for_json()) == nst,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_jsonto_forjson,assert Example.json_to(obj).for_json() == obj,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_Object_jsonto_forjson,assert NestedExample.json_to(nst).for_json() == nst,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optionalmember_forjson,"assert value.for_json() == {'Int1': i, 'Int2': j, 'Int3': k}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optionalmember_forjson,"assert value.for_json() == {'Int1': i, 'Int3': k}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optionalmember_jsonto,"assert OptionalExample.json_to(datum) == OptionalExample(mint=i, nint=j, kint=k)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
alexshpilkin,dvrip,test_typing.py,test_optionalmember_jsonto,"assert OptionalExample.json_to(datum) == OptionalExample(mint=i, nint=NotImplemented, kint=k)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
anibali,dsntnn,tests/test_flat_softmax.py,test_flat_softmax_gives_valid_distribution,assert np.all(np.asarray(res) >= 0),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
arXiv,arxiv-browse,tests/test_email_hash.py,test_fuzz_email_hash,"self.assertEqual(h, generate_show_email_hash(s, v))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arXiv,arxiv-browse,tests/test_email_hash.py,test_fuzz_email_hash,"self.assertNotEqual(h, generate_show_email_hash(v, s), f'the hash for (v,s) should not equal hash for (s,v) but it did for v:{v} s:{s}')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
arXiv,arxiv-browse,tests/test_email_hash.py,test_fuzz_email_hash,"self.assertNotEqual(h, generate_show_email_hash(s, x), f'For some value x, hash(s,v) must not equal hash(s,x) but it did for x:{x} v:{v} and s:{s}')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
arXiv,arxiv-browse,tests/test_email_hash.py,test_fuzz_email_hash,"self.assertNotEqual(h, generate_show_email_hash(x, v), f'For some value x, hash(s,v) must not equal hash(x,v) but it did for x:{x} v:{v} and s:{s}')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_bootstrap.py,test_bootstrap,assert result is value,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_encrypt_decrypt_message,assert message.encode() != guest_enc_message.ciphertext != counselor_enc_message.ciphertext,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_encrypt_decrypt_message,assert message.encode() == dec_counselor_message == dec_guest_message,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_key_rotation,assert sent_message_1.ciphertext != sent_message_2.ciphertext,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_key_rotation,assert recieved_message_1 == recieved_message_2 == message.encode(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_out_of_order_recieve,assert counselor.decrypt_message(enc_message_3) == message_3.encode(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_out_of_order_recieve,assert counselor.decrypt_message(enc_message_1) == message_1.encode(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_encryption.py,test_out_of_order_recieve,assert counselor.decrypt_message(enc_message_2) == message_2.encode(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
arades79,hyperdome,test/hyperdome_common_test/test_available_port.py,test_unused_port,assert min_port <= port <= max_port,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ariebovenberg,quiz,tests/test_build.py,test_fuzzing,"assert isinstance(quiz.escape(value), str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_abs_jd2_always_less_than_half_on_construction,assert np.all(t.jd1 % 1 == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_abs_jd2_always_less_than_half_on_construction,assert np.all(abs(t.jd2) <= 0.5),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_abs_jd2_always_less_than_half_on_construction,assert np.all((abs(t.jd2) < 0.5) | (t.jd1 % 2 == 0)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_round_to_even,assert abs(t.jd2) == 0.5 and t.jd1 % 2 == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_two_sum_symmetric,"np.testing.assert_equal(two_sum(f1, f2), two_sum(f2, f1))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_two_sum_size,assert abs(r1) > abs(r2) / np.finfo(float).eps or r1 == r2 == 0 or (not np.isfinite(abs(f1) + abs(f2))),False,False,False,True,False,True,False,False,False,False,True,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_day_frac_exact,assert i == i_d,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_day_frac_exact,assert f == f_d,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_day_frac_idempotent,"assert (i_d, f_d) == day_frac(i_d, f_d)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_mjd_initialization_precise,assert (abs(jd1 - jd1_t + (jd2 - jd2_t)) * u.day).to(u.ns) < 1 * u.ns,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_day_frac_always_less_than_half,assert np.all(t_jd1 % 1 == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_day_frac_always_less_than_half,assert np.all(abs(t_jd2) <= 0.5),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_day_frac_always_less_than_half,assert np.all((abs(t_jd2) < 0.5) | (t_jd1 % 2 == 0)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_day_frac_round_to_even,assert abs(t_jd2) == 0.5 and t_jd1 % 2 == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_resolution_never_decreases,assert t != t + dt_tiny,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
astropy,astropy,astropy/time/tests/test_precision.py,test_resolution_never_decreases_utc,assert t != t + 2 * dt_tiny,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
astropy,astropy,astropy/time/tests/test_precision.py,test_conversion_preserves_jd1_jd2_invariant,assert t2.jd1 % 1 == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_conversion_preserves_jd1_jd2_invariant,assert abs(t2.jd2) <= 0.5,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_conversion_preserves_jd1_jd2_invariant,assert abs(t2.jd2) < 0.5 or t2.jd1 % 2 == 0,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_time_argminmaxsort,assert delta < 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_time_argminmaxsort,"assert imin == 1 and imax == 0 and np.all(isort == [1, 0])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_time_argminmaxsort,assert abs(delta) <= tiny,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_time_argminmaxsort,"assert imin == 0 and imax == 0 and np.all(isort == [0, 1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_time_argminmaxsort,assert delta > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_time_argminmaxsort,"assert imin == 0 and imax == 1 and np.all(isort == [0, 1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_timedelta_full_precision,assert dt != t_b + tiny - t_a,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
astropy,astropy,astropy/time/tests/test_precision.py,test_datetime_to_timedelta,"assert TimeDelta(td, scale=scale) == TimeDelta(days, microseconds / (86400 * 1000000.0), scale=scale, format='jd')",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_datetime_timedelta_roundtrip,"assert td == TimeDelta(td, scale=scale).value",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
astropy,astropy,astropy/time/tests/test_precision.py,test_timedelta_from_parts,assert whole == from_parts,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_request_to_dict_is_json_serializable,"assert isinstance(request.raw_body, bytes)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_request_to_dict_is_json_serializable,"assert json.dumps(request_dict, default=handle_extra_types)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_response_to_dict,assert 'headers' in serialized,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_response_to_dict,assert 'statusCode' in serialized,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_response_to_dict,assert 'body' in serialized,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_http_response_to_dict,"assert isinstance(serialized['body'], six.string_types)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_handles_binary_responses,assert serialized['isBase64Encoded'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_handles_binary_responses,"assert isinstance(serialized['body'], six.string_types)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
aws,chalice,tests/unit/test_app.py,test_handles_binary_responses,"assert isinstance(base64.b64decode(serialized['body']), bytes)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
aws,aws-dynamodb-encryption-python,test/functional/test_hypothesis_strategies.py,test_transformable_item,assert end_result == item,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws,aws-dynamodb-encryption-python,test/functional/test_hypothesis_strategies.py,test_serializable_item,assert end_result == item,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws,aws-dynamodb-encryption-python,test/functional/test_hypothesis_strategies.py,test_ddb_negative_numbers,assert value < 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
aws,aws-dynamodb-encryption-python,test/functional/test_hypothesis_strategies.py,test_ddb_positive_numbers,assert value > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_failed_is_json_serializable,assert event.status == OperationStatus.FAILED,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_failed_is_json_serializable,assert event.errorCode == error_code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_failed_is_json_serializable,assert event.message == message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_failed_is_json_serializable,"assert json.loads(json.dumps(event._serialize())) == {'status': OperationStatus.FAILED.value, 'errorCode': error_code.value, 'message': message, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_serialize_to_response_with_context,"assert event._serialize() == {'status': OperationStatus.SUCCESS.name, 'message': message, 'callbackContext': {'a': 'b'}, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_serialize_to_response_with_model,"assert event._serialize() == {'status': OperationStatus.SUCCESS.name, 'message': message, 'resourceModel': {'somekey': 'a', 'someotherkey': 'b'}, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_serialize_to_response_with_models,"assert event._serialize() == {'status': OperationStatus.SUCCESS.name, 'message': message, 'resourceModels': [{'somekey': 'a', 'someotherkey': 'b'}, {'somekey': 'c', 'someotherkey': 'd'}], 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_progress_event_serialize_to_response_with_error_code,"assert event._serialize() == {'status': OperationStatus.SUCCESS.name, 'message': message, 'errorCode': HandlerErrorCode.InvalidRequest.name, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_failed_is_json_serializable,assert event.hookStatus == HookStatus.FAILED,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_failed_is_json_serializable,assert event.errorCode == error_code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_failed_is_json_serializable,assert event.message == message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_failed_is_json_serializable,"assert json.loads(json.dumps(event._serialize())) == {'hookStatus': HookStatus.FAILED.value, 'errorCode': error_code.value, 'message': message, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_serialize_to_response_with_context,"assert event._serialize() == {'hookStatus': HookStatus.SUCCESS.name, 'message': message, 'callbackContext': {'a': 'b'}, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_serialize_to_response_with_data,"assert event._serialize() == {'hookStatus': HookStatus.SUCCESS.name, 'message': message, 'callbackDelaySeconds': 0, 'result': result}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-cloudformation,cloudformation-cli-python-plugin,tests/lib/interface_test.py,test_hook_progress_event_serialize_to_response_with_error_code,"assert event._serialize() == {'hookStatus': HookStatus.SUCCESS.name, 'message': message, 'errorCode': HandlerErrorCode.InvalidRequest.name, 'callbackDelaySeconds': 0}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
aws-samples,amazon-sagemaker-cdk-examples,dask-fargate/.env/lib/python3.6/site-packages/tests/metadata/test_roundtrips.py,test_simple_roundtrip,"assert inst == converter.structure(converter.unstructure(inst), cl)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
aws-samples,amazon-sagemaker-cdk-examples,dask-fargate/.env/lib/python3.6/site-packages/tests/metadata/test_roundtrips.py,test_simple_roundtrip_defaults,"assert converter.unstructure(converter.structure({}, cl)) == converter.unstructure(inst)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
aws-samples,amazon-sagemaker-cdk-examples,dask-fargate/.env/lib/python3.6/site-packages/tests/metadata/test_roundtrips.py,test_simple_roundtrip_defaults,"assert inst == converter.structure(converter.unstructure(inst), cl)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
aws-samples,amazon-sagemaker-cdk-examples,dask-fargate/.env/lib/python3.6/site-packages/tests/metadata/test_roundtrips.py,test_nested_roundtrip,"assert inst == converter.structure(converter.unstructure(inst), cl)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
aws-samples,amazon-sagemaker-cdk-examples,dask-fargate/.env/lib/python3.6/site-packages/tests/metadata/test_roundtrips.py,test_union_field_roundtrip,"assert inst == converter.structure(converter.unstructure(inst), C)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
aws-samples,amazon-sagemaker-cdk-examples,dask-fargate/.env/lib/python3.6/site-packages/tests/metadata/test_roundtrips.py,test_union_field_roundtrip,"assert inst == converter.structure(converter.unstructure(inst), C)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
aws-samples,amazon-sagemaker-cdk-examples,dask-fargate/.env/lib/python3.6/site-packages/tests/metadata/test_roundtrips.py,test_optional_field_roundtrip,"assert inst == converter.structure(converter.unstructure(inst), C)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
aws-samples,amazon-sagemaker-cdk-examples,dask-fargate/.env/lib/python3.6/site-packages/tests/metadata/test_roundtrips.py,test_optional_field_roundtrip,"assert inst == converter.structure(unstructured, C)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_offsets_properties.py,test_on_offset_implementations,assert offset.onOffset(dt) == (compare == dt),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[0] == rng[0] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[-1] == rng[-1] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[0] == ser.iloc[0] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[-1] == ser.iloc[-1] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left + right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left.apply(right) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left - right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left != right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left == right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left == right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left != right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
awslabs,predictive-maintenance-using-machine-learning,source/predictive_maintenance/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert cls(n) != cls(-n),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
backtrace-labs,umash,t/test_params_prepare.py,test_public_multiplier_reduction,assert C.umash_params_prepare(params) == True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_prepare.py,test_public_multiplier_reduction,assert params[0].poly[i][1] == multipliers[i],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_prepare.py,test_public_multiplier_reduction,assert 0 < params[0].poly[i][1] < FIELD,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
backtrace-labs,umash,t/test_params_prepare.py,test_public_multiplier_reduction,assert params[0].poly[i][0] == params[0].poly[i][1] ** 2 % FIELD,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_prepare.py,test_public_multiplier_reduction,assert params[0].oh[i] == i,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_prepare.py,test_public_bad_oh,assert result == False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_prepare.py,test_public_bad_oh,assert len(actual_oh) == len(set(actual_oh)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_prepare.py,test_public_smoke_matches,assert C.umash_params_prepare(params) == True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_prepare.py,test_public_smoke_matches,"assert C.umash_full(params, seed, 0, data, len(data)) == expected0",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_prepare.py,test_public_smoke_matches,"assert C.umash_full(params, seed, 1, data, len(data)) == expected1",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_modarith.py,test_add_mod_fast,"assert C.add_mod_fast(x, y) % MODULO == (x + y) % MODULO",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_modarith.py,test_add_mod_fast_general,"assert C.add_mod_fast(x, y) % MODULO == (x + y) % MODULO",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_modarith.py,test_add_mod_slow,"assert C.add_mod_slow(x, y) == (x + y) % MODULO",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_modarith.py,test_add_mod_slow_slow_path,"assert C.add_mod_slow(x, y) == (x + y) % MODULO",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_modarith.py,test_mul_mod_fast,"assert C.mul_mod_fast(m, x) % MODULO == m * x % MODULO",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_modarith.py,test_mul_mod_fast_general,"assert C.mul_mod_fast(m, x) % MODULO == m * x % MODULO",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_modarith.py,test_horner_double_update,"assert C.horner_double_update(acc, m0, m1, x, y) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_modarith.py,test_split_accumulator_eval,assert C.split_accumulator_eval(accumulator[0]) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_modarith.py,test_split_accumulator_update,assert 0 <= actual.fixup <= SPLIT_ACCUMULATOR_MAX_FIXUP,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
backtrace-labs,umash,t/test_modarith.py,test_split_accumulator_update,assert C.split_accumulator_eval(actual) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_umash_medium.py,test_umash_medium,"assert C.umash_medium(poly, params[0].oh, seed, block, n_bytes) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_umash_short.py,test_vec_to_u64,"assert C.vec_to_u64(buf, n_bytes) == vec_to_u64(data)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_umash_short.py,test_umash_short,"assert C.umash_short(params[0].oh, seed, block, n_bytes) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_derive.py,test_public_params_derive,assert C.umash_params_prepare(expected),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_derive.py,test_public_params_derive,assert length % 8 == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_params_derive.py,test_public_params_derive,"assert FFI.cast('uint64_t *', actual)[i] == FFI.cast('uint64_t *', expected)[i]",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_umash_long.py,test_umash_long,"assert C.umash_long(poly, params[0].oh, seed, block, n_bytes) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_umash_long.py,test_umash_long_repeat,"assert C.umash_long(poly, params[0].oh, seed, block, n_bytes) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_shuffle,"assert EXACT.exact_test_shuffle(xoshiro, buf, len(a), len(b), p_a_lower, err_ptr), 'Shuffle failed: %s' % str(FFI.string(err_ptr[0]), 'utf-8')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_shuffle,assert expected == actual,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_offset_sort,assert expected == actual,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_gt_prob,assert abs(expected - actual) < 1e-08,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_lte_prob,assert abs(expected - actual) < 1e-08,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_truncated_mean_diff,assert abs(expected - actual) < 1e-08,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_quantile_diff,assert expected == actual,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_exact_test_normal_variates,"assert result['median'].judgement in (0, signum(-mean_b_delta))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_exact_test_normal_variates,"assert result['shifted_median'].judgement in (0, signum(mean_b_delta))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_actual_data_results,assert actual['q99'] == expected_q99,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_actual_data_results,assert actual['gt'] == expected_gt,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_bench_exact_test.py,test_actual_data_results,assert abs(actual['mean'] - expected_mean) < 1e-08,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
backtrace-labs,umash,t/test_umash_fprint.py,test_public_umash_fprint,"assert [actual.hash[0], actual.hash[1]] == expected",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_umash_fprint.py,test_public_umash_fprint_repeated,"assert [actual.hash[0], actual.hash[1]] == expected",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_oh.py,test_oh_full_block,"assert expected == actual.bits[0] + (actual.bits[1] << 64), (actual.bits[0], actual.bits[1])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_oh.py,test_oh_full_block_fprint,"assert expected == [actual[0].bits[0] + (actual[0].bits[1] << 64), actual[1].bits[0] + (actual[1].bits[1] << 64)], (actual[0].bits[0], actual[0].bits[1], actual[1].bits[0], actual[1].bits[1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_oh.py,test_oh_tail_large,"assert expected == actual.bits[0] + (actual.bits[1] << 64), (actual.bits[0], actual.bits[1])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_oh.py,test_oh_tail_large_fprint,"assert expected == [actual[0].bits[0] + (actual[0].bits[1] << 64), actual[1].bits[0] + (actual[1].bits[1] << 64)], (actual[0].bits[0], actual[0].bits[1], actual[1].bits[0], actual[1].bits[1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_oh.py,test_oh_tail_short,"assert expected == actual.bits[0] + (actual.bits[1] << 64), (actual.bits[0], actual.bits[1])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_oh.py,test_oh_tail_short_fprint,"assert expected == [actual[0].bits[0] + (actual[0].bits[1] << 64), actual[1].bits[0] + (actual[1].bits[1] << 64)], (actual[0].bits[0], actual[0].bits[1], actual[1].bits[0], actual[1].bits[1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_salsa20.py,test_salsa20,"assert bytes(FFI.buffer(buf, length)) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_umash_full.py,test_public_umash_full,"assert C.umash_full(params, seed, 0, block, n_bytes) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_umash_full.py,test_public_umash_full_shifted,"assert C.umash_full(params, seed, 1, block, n_bytes) == expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_finalize.py,test_finalize,assert C.finalize(x) == finalize(x),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
backtrace-labs,umash,t/test_finalize.py,test_finalize_inverse,assert xor_rot2_inv(finalized) == x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
bigchaindb,cryptoconditions,tests/test_condition.py,test_from_uri_prefix_error,"assert exc_info.value.args == ('Serialized condition must start with ""{}:""'.format(CONDITION_URI_SCHEME),)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
bigchaindb,cryptoconditions,tests/test_condition.py,test_from_uri_parse_error_missing_fpt,"assert exc_info.value.args == ('Invalid condition format: ""fpt"" parameter or value missing.',)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
bigchaindb,cryptoconditions,tests/test_condition.py,test_from_uri_parse_error_missing_cost,"assert exc_info.value.args == ('Invalid condition format: ""cost"" parameter or value missing.',)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
bigchaindb,cryptoconditions,tests/test_condition.py,test_from_uri_parse_error_invalid_cost,"assert exc_info.value.args == ('No or invalid cost provided',)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
bigchaindb,cryptoconditions,tests/test_condition.py,test_from_uri_with_unsupported_type,"assert exc_info.value.args == ('Type {} is not supported'.format(condition_type),)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
bmabey,provenance,tests/provenance/test_hashing.py,test_shallow_and_deep_copies_hashing,assert hash(shallow_copy) == original_hash,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
bmabey,provenance,tests/provenance/test_hashing.py,test_shallow_and_deep_copies_hashing,assert hash(deep_copy) == original_hash,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
bmabey,provenance,tests/provenance/test_hashing.py,test_shared_values_hashing,assert hash(shared_dict) == hash(without_sharing_dict),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
bmabey,provenance,tests/provenance/test_hashing.py,test_shared_values_hashing,assert hash(shared_tuple) == hash(without_sharing_tuple),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
bmabey,provenance,tests/provenance/test_hashing.py,test_shared_values_hashing,assert hash(shared_list) == hash(without_sharing_list),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
brandtbucher,hax,hax/_test.py,test_readme,assert actual == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
calpaterson,quarchive,src/server/tests/test_bookmark.py,test_merge_is_idempotent,assert a == b,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
calpaterson,quarchive,src/server/tests/test_bookmark.py,test_merge_is_commutative,assert c == d,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
calpaterson,quarchive,src/server/tests/test_bookmark.py,test_merge_is_associative,assert d == e,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
calpaterson,quarchive,src/server/tests/test_bookmark.py,test_tag_merge_tag_triples,assert f_c == f_d,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
calpaterson,quarchive,src/server/tests/test_bookmark.py,test_tag_merge_tag_triples,"assert c[2] == d[2] == min(a[2], b[2])",False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
calpaterson,quarchive,src/server/tests/test_url.py,test_url_uuid_stability,assert URL.from_string(urlunsplit(urlsplit(url))) == URL.from_string(url),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_s3.py,test_mock_s3_session_profile_without_kms,mock_session.assert_called_with(profile_name=profile),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_s3.py,test_mock_s3_session_profile_without_kms,assert s.kms_key is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_s3.py,test_mock_s3_session_profile_with_kms,mock_session.assert_called_with(profile_name=profile),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_s3.py,test_mock_s3_session_profile_with_kms,assert s.kms_key == input_kms_key,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_random_list_combine,"assert isinstance(output, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_random_list_combine,assert len(output.split(' ')) == len(input_list),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor,mock_session.assert_called_with(profile_name=profile),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor,assert sf.profile == profile,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor,assert sf.kms_key == input_kms_key,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor,assert sf.connection['account'] == 'account',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor,assert sf.connection['warehouse'] == 'warehouse',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor,assert sf.connection['database'] == 'database',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor,assert sf.connection['schema'] == 'schema',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor,assert sf.connection['user'] == 'user',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor,assert sf.connection['password'] == 'password',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor_yaml,mock_session.assert_called_with(profile_name=profile),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor_yaml,assert sf.profile == profile,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor_yaml,assert sf.kms_key == input_kms_key,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor_yaml,assert sf.connection['account'] == 'account',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor_yaml,assert sf.connection['warehouse'] == 'warehouse',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor_yaml,assert sf.connection['database'] == 'database',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor_yaml,assert sf.connection['user'] == 'user',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
capitalone,locopy,tests/test_snowflake.py,test_constructor_yaml,assert sf.connection['password'] == 'password',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_dict_struct.py,test_plain,"assert validate({'a': int, 'b': str}, dct) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_dict_struct.py,test_plain_no_strict,"assert validate({'a': str}, dct, strict=False) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_dict_struct.py,test_nested_dict,"assert validate({'a': {'b': int}}, dct) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_dict_struct.py,test_advanced,"assert validate(structure, dct) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_tuple_struct.py,test_plain,"assert validate((int,), tpl) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_simple_ints,assert pformat(lst) == '[int]',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_simple_strs,assert pformat(lst) == '[str]',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_simple_mix,"assert pformat(lst) == '[str, int, int, str]'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_simple_dict,"assert pformat(dct) == ""{'a': int, 'b': int}""",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_dict_mix,"assert pformat(dct) == ""{'a': [int], 'b': str}""",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_printer.py,test_advanced,assert pformat(request) == expected,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_str.py,test_simple,"assert validate(str, string) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_list_struct.py,test_plain,"assert validate([int], li) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_list_struct.py,test_nested,"assert validate([[int]], lst) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_list_struct.py,test_heavy_nested,"assert validate([[int], float, [[float]]], lst) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_customtype.py,test_simple_pos_int,"assert validate(positive_int, num) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_customtype.py,test_simple_title,"assert validate(title, words) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_customtype.py,test_simple_ti_list,"assert validate(two_item_list, lst) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_customtype.py,test_nested,"assert validate(type_mask, data) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_customtype.py,test_deep_nesting,"assert validate(type_mask, data) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
carlbordum,datatyping,tests/test_structure_check.py,test_dict_nested,"assert validate([{'a': {'b': [dict]}}], lst) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_on_offset_implementations,assert offset.is_on_offset(dt) == (compare == dt),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[0] == rng[0] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[-1] == rng[-1] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[0] == ser.iloc[0] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[-1] == ser.iloc[-1] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/io/parser/test_parse_dates.py,test_hypothesis_delimited_date,assert except_out_dateutil == except_in_dateutil,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/io/parser/test_parse_dates.py,test_hypothesis_delimited_date,assert result == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left + right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left.apply(right) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left - right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left != right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left == right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left == right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left != right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cart-savior,cart_savior,flask/fb/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert cls(n) != cls(-n),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
castelao,CoTeDe,tests/fuzzy/test_memberships.py,test_membership_nan,assert np.shape(x) == np.shape(y),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
castelao,CoTeDe,tests/fuzzy/test_memberships.py,test_membership_nan,assert np.all(np.isnan(y[idx])),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
castelao,CoTeDe,tests/fuzzy/test_memberships.py,test_membership_nan,"assert np.all((y[~idx] >= 0) & (y[~idx] <= 1)), 'Failed range output for {}'.format(f)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cdown,yturl,tests/test_unit.py,test_video_id_parsed_from_url,assert yturl.video_id_from_url(url) == video_id,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cdown,yturl,tests/test_unit.py,test_available_itags_parsing,"assert isinstance(got_itags_for_video, collections.OrderedDict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
cdown,yturl,tests/test_unit.py,test_available_itags_parsing,assert got_itags_for_video == itag_to_url_map,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cdown,yturl,tests/test_unit.py,test_itag_from_quality_itag_pass_through,"assert yturl.itag_from_quality(itag, [itag]) == itag",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_compose_and_parse_strict_mode,assert not parsed_strict.content.startswith('\n'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_compose_and_parse_strict_mode,assert not parsed_strict.content.endswith('\n'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_compose_and_parse_strict_mode,assert '\n\n' not in parsed_strict.content,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_compose_and_parse_strict_mode,"assert parsed_unstrict.content == sub.content.replace('\r\n', '\n')",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_timedelta_to_srt_timestamp_can_go_over_24_hours,assert srt_timestamp_hours == days * HOURS_IN_DAY,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_subtitle_equality,assert sub_1 == sub_2,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_subtitle_inequality,assert sub_1 != sub_2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
cdown,srt,tests/test_srt.py,test_subtitle_inequality_to_non_matching_type,assert sub_1 != None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
cdown,srt,tests/test_srt.py,test_subtitle_inequality_to_non_matching_type,assert sub_1 != 1,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
cdown,srt,tests/test_srt.py,test_subtitle_from_scratch_equality,assert sub_1 == sub_2,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_subtitle_from_scratch_equality,assert hash(sub_1) == hash(sub_2),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_subs_missing_content_removed,"assert [sub.index for sub in composed_subs] == list(range(default_start_index, default_start_index + len(composed_subs)))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_sort_and_reindex,"assert [sub.index for sub in reindexed_subs] == list(range(start_index, start_index + len(input_subs)))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_sort_and_reindex,assert reindexed_subs == expected_sorting,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_sort_and_reindex_no_skip,assert len(reindexed_subs) == len(input_subs),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_sort_and_reindex_handles_no_index,assert not reindexed_subs,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_sort_and_reindex_same_start_time_uses_end,assert reindexed_subs == expected_sorting,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_sort_and_reindex_same_start_and_end_time_uses_index,assert reindexed_subs == expected_sorting,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_sort_and_reindex_not_in_place_matches,assert not any((id(sub) in nip_ids for sub in not_in_place_output)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_sort_and_reindex_not_in_place_matches,assert all((id(sub) in ip_ids for sub in in_place_output)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_parser_didnt_match_to_end_raises,assert garbage_stripped == thrown_exc.value.unmatched_content,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_parser_didnt_match_to_end_raises,assert len(composed) - len(garbage_stripped) == thrown_exc.value.expected_start,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_parser_didnt_match_to_end_raises,assert len(composed) == thrown_exc.value.actual_start,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_repr_doesnt_crash,assert 'Subtitle' in repr(sub),False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_repr_doesnt_crash,assert str(sub.index) in repr(sub),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_equal_timestamps_despite_different_fields_parsed_as_equal,assert srt.srt_timestamp_to_timedelta(ts1) == srt.srt_timestamp_to_timedelta(ts2),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_parse_file_with_missing_index,assert all((sub.index == None for sub in subs_no_index)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cdown,srt,tests/test_srt.py,test_parse_file_with_missing_index,assert all((sub.index == 0 for sub in subs_zero_index)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_exception,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_response_exception,"assert issubclass(excinfo.type, SMTPException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_response_exception,assert excinfo.value.code == code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_response_exception,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_connection_exceptions,"assert issubclass(excinfo.type, SMTPException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_connection_exceptions,"assert issubclass(excinfo.type, ConnectionError)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_connection_exceptions,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_timeout_exceptions,"assert issubclass(excinfo.type, SMTPException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_timeout_exceptions,"assert issubclass(excinfo.type, asyncio.TimeoutError)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_timeout_exceptions,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_simple_response_exceptions,"assert issubclass(excinfo.type, SMTPResponseException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_simple_response_exceptions,assert excinfo.value.code == code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_simple_response_exceptions,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_sender_refused,"assert issubclass(excinfo.type, SMTPResponseException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_sender_refused,assert excinfo.value.code == code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_sender_refused,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_sender_refused,assert excinfo.value.sender == sender,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_recipient_refused,"assert issubclass(excinfo.type, SMTPResponseException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_recipient_refused,assert excinfo.value.code == code,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_recipient_refused,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_recipient_refused,assert excinfo.value.recipient == recipient,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_not_supported,"assert issubclass(excinfo.type, SMTPException)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
cole,aiosmtplib,tests/test_errors.py,test_raise_smtp_not_supported,assert excinfo.value.message == error_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_renderer.py,test_calc_limits_xs,assert xs[0] == min,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_renderer.py,test_calc_limits_xs,assert xs[-1] == max,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_renderer.py,test_calc_limits_xs,"assert np.mean([xs[N // 2 - 1], xs[N // 2]]) == pytest.approx(center)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert cfg.trigger_ms == trigger_ms,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert cfg.render_ms == render_ms,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert channel._render_samp == ideal_rsamp,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert channel._trigger_stride == tsub * c_trigger_width,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert channel.render_stride == rsub * c_render_width,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,"assert kwargs['amplification'] == coalesce(c_amplification, amplification)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert trigger._tsamp == ideal_tsamp,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert trigger._stride == channel._trigger_stride,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert _return_nsamp == channel._render_samp,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert _subsampling == channel.render_stride,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert len(render_inputs.data) == channel._render_samp,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert label == 'label',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert label == 'sine440',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert label == '1',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_channel.py,test_config_channel_integration,assert label == '',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_edges,assert bool(edges & Edges.Left) == (col == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_edges,assert bool(edges & Edges.Right) == (col == ncols - 1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_edges,assert bool(edges & Edges.Top) == (row == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_edges,assert bool(edges & Edges.Bottom) == (row == nrows - 1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"assert layout.wave_ncol == ncols or ceildiv(nwaves, nrows)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"assert layout.wave_nrow == nrows or ceildiv(nwaves, ncols)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert len(region2d) == len(wave_nchans),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert len(wave_chans) == stereo_nchan,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert stereo_orientation == StereoOrientation.h,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert (np.add.reduce(wave_chans[0].pos) != 0) == (wave_i != 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"npt.assert_equal(wave_chans[0].pos % chans_per_wave, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"assert chan.pos.shape == chan.size.shape == (2,)",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"npt.assert_equal(chan.pos // chans_per_wave, wave_chans[0].pos // chans_per_wave)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"npt.assert_equal(chan_wave_pos, [0, 0])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"npt.assert_equal(chan_wave_pos, [chan_j, 0])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert stereo_orientation == StereoOrientation.h,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,"npt.assert_equal(chan_wave_pos, [0, chan_j])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(screen_edges & Edges.Top) == (chan.row == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(screen_edges & Edges.Left) == (chan.col == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(screen_edges & Edges.Bottom) == (chan.row == chan.nrow - 1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(screen_edges & Edges.Right) == (chan.col == chan.ncol - 1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert wave_edges == ~Edges.NONE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert wave_edges & lr == lr,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(wave_edges & Edges.Top) == (chan.row % stereo_nchan == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(wave_edges & Edges.Bottom) == ((chan.row + 1) % stereo_nchan == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert stereo_orientation == StereoOrientation.h,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert wave_edges & tb == tb,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(wave_edges & Edges.Left) == (chan.col % stereo_nchan == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
corrscope,corrscope,tests/test_layout.py,test_stereo_layout,assert bool(wave_edges & Edges.Right) == ((chan.col + 1) % stereo_nchan == 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_examples.py,test_gale_shapley_no_stable_matching,assert '4' in str(record[0].message),False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_init,assert player.name == game_player.name,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_init,assert player._pref_names == game_player._pref_names,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_init,assert game.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_create_from_dictionary,assert preferences[player.name] == player._pref_names,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_create_from_dictionary,assert player.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_create_from_dictionary,assert game.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_solve,"assert isinstance(matching, SingleMatching)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_solve,assert game_player.name == player.name,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_solve,assert game_player._pref_names == player._pref_names,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_solve,assert str(player) in str(message),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_solve,assert player.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_solve,assert match in game.players,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_check_validity,"assert isinstance(message, NoStableMatchingWarning)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_solver.py,test_check_validity,assert game.check_validity(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_algorithm.py,test_hospital_resident,assert set(hospitals) == set(matching.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_algorithm.py,test_hospital_resident,assert resident in matched_residents,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_algorithm.py,test_hospital_resident,assert resident not in matched_residents,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_algorithm.py,test_resident_optimal,assert set(hospitals) == set(matching.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_algorithm.py,test_resident_optimal,assert all([r in set(residents) for r in {r_match for matches in matching.values() for r_match in matches}]),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_algorithm.py,test_resident_optimal,assert resident.prefs.index(resident.matching) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_algorithm.py,test_hospital_optimal,assert set(hospitals) == set(matching.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_algorithm.py,test_hospital_optimal,assert idx >= old_idx,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_init,"assert isinstance(game, BaseGame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_init,assert game.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_init,assert game.blocking_pairs is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_init,assert game.clean is clean,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_remove_player,assert player not in game.players,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_remove_player,assert all((player not in other.prefs for other in game.others)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_unique,assert len(record) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_unique,assert message.startswith(player.name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_unique,assert others[0].name in message,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_unique,assert player._pref_names == [o.name for o in others],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_all_in_party,assert len(record) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_all_in_party,assert message.startswith(player.name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_all_in_party,assert 'non-other' in message,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_all_in_party,assert outsider.name in message,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_all_in_party,assert outsider not in player.prefs,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_nonempty,assert len(record) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_nonempty,assert message.startswith(other.name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_nonempty,assert other not in game.others,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_game.py,test_check_inputs_player_prefs_nonempty,assert player.prefs == others[1:],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_init,assert resident.name == game_resident.name,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_init,assert resident._pref_names == game_resident._pref_names,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_init,assert hospital.name == game_hospital.name,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_init,assert hospital._pref_names == game_hospital._pref_names,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_init,assert hospital.capacity == game_hospital.capacity,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_init,assert all([resident.matching is None for resident in game.residents]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_init,assert all([hospital.matching == [] for hospital in game.hospitals]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_init,assert game.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_create_from_dictionaries,assert resident._pref_names == resident_prefs[resident.name],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_create_from_dictionaries,assert resident.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_create_from_dictionaries,assert hospital._pref_names == hospital_prefs[hospital.name],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_create_from_dictionaries,assert hospital.capacity == capacities[hospital.name],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_create_from_dictionaries,assert hospital.matching == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_create_from_dictionaries,assert game.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_create_from_dictionaries,assert game.clean is clean,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs,assert game.residents == game._all_residents,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs,assert game.hospitals == game._all_hospitals,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_resident_prefs_all_hospitals,assert len(record) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_resident_prefs_all_hospitals,assert resident.name in message,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_resident_prefs_all_hospitals,assert 'foo' in message,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_resident_prefs_all_hospitals,assert resident.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_residents,assert len(record) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_residents,assert hospital.name in message,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_residents,assert 'foo' in message,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_residents,assert hospital.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_reciprocated,assert len(record) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_reciprocated,assert hospital.name in message,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_reciprocated,assert resident.name in message,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_reciprocated,assert resident not in hospital.prefs,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_reciprocated_all_prefs,assert len(record) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_reciprocated_all_prefs,assert hospital.name in message,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_reciprocated_all_prefs,assert resident.name in message,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_reciprocated_all_prefs,assert hospital not in resident.prefs,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_resident_prefs_all_nonempty,assert len(record) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_resident_prefs_all_nonempty,assert resident.name in str(record[0].message),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_resident_prefs_all_nonempty,assert resident not in game.residents,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_nonempty,assert len(record) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_nonempty,assert hospital.name in str(record[0].message),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_prefs_all_nonempty,assert hospital not in game.hospitals,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_capacity,assert hospital._original_capacity == capacity,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_capacity,assert len(record) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_capacity,assert hospital.name in str(record[0].message),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_inputs_hospital_capacity,assert hospital not in game.hospitals,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_solve,"assert isinstance(matching, MultipleMatching)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_solve,assert game_hospital.name == hospital.name,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_solve,assert game_hospital._pref_names == hospital._pref_names,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_solve,assert game_hospital.capacity == hospital.capacity,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_solve,assert matched_residents != [] and set(matched_residents).issubset(set(game.residents)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_solve,assert resident.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_validity,assert game.check_validity(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_unacceptable_matches_residents,assert len(issues) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_unacceptable_matches_residents,assert issue.startswith(resident.name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_unacceptable_matches_residents,assert issue.endswith(f'{resident.prefs}.'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_unacceptable_matches_residents,assert hospital.name in issue,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_unacceptable_matches_residents,assert issue == error,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_unacceptable_matches_hospitals,assert len(issues) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_unacceptable_matches_hospitals,assert issue.startswith(hospital.name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_unacceptable_matches_hospitals,assert issue.endswith(f'{hospital.prefs}.'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_unacceptable_matches_hospitals,assert resident.name in issue,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_unacceptable_matches_hospitals,assert issue == error,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_oversubscribed_hospitals,assert len(issues) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_oversubscribed_hospitals,assert issue.startswith(hospital.name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_oversubscribed_hospitals,assert issue.endswith(f'{hospital.capacity}.'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_oversubscribed_hospitals,assert str(hospital.matching) in issue,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/hospital_resident/test_solver.py,test_check_for_oversubscribed_hospitals,assert issue == error,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_init,assert player.name == name,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_init,assert player.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_init,assert player.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_init,assert player._pref_names == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_init,assert player._original_prefs is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_repr,assert repr(player) == name,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_unmatched_message,assert message.startswith(name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_unmatched_message,assert 'unmatched' in message,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_not_in_preferences_message,assert message.startswith(player.name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_not_in_preferences_message,assert str(player.prefs) in message,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_not_in_preferences_message,assert other.name in message,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_set_prefs,assert player.prefs == others,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_set_prefs,assert player._pref_names == [o.name for o in others],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_set_prefs,assert player._original_prefs == others,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_keep_original_prefs,assert player.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_keep_original_prefs,assert player._pref_names == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_keep_original_prefs,assert player._original_prefs == others,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_forget,assert player.prefs == others[i + 1:],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_forget,assert player.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_forget,assert player._original_prefs == others,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/base/test_player.py,test_prefers,"assert player.prefers(other, others[i + 1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_matchings.py,test_single_setitem_none,assert matching[key] is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_matchings.py,test_single_setitem_none,assert key.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_matchings.py,test_single_setitem_player,assert matching[key] == val,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_matchings.py,test_single_setitem_player,assert key.matching == val,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_matchings.py,test_single_setitem_player,assert val.matching == key,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_matchings.py,test_multiple_setitem,assert matching[host] == players,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_matchings.py,test_multiple_setitem,assert host.matching == players,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_matchings.py,test_multiple_setitem,assert player.matching == host,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_first_phase,assert sum(player_matched.values()) >= len(players) - 1,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_first_phase,assert player.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_first_phase,assert player.matching in player.prefs,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_first_phase,assert {p.name for p in player.prefs}.issubset(player._pref_names),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_locate_all_or_nothing_cycle,"assert isinstance(cycle, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_locate_all_or_nothing_cycle,assert second.prefs.index(last) == len(second.prefs) - 1,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_get_pairs_to_delete,assert pair in pairs or pair[::-1] in pairs,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_get_pairs_to_delete,"assert (right, other) in pairs or (other, right) in pairs",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_second_phase,assert player.prefs[0] == player.matching,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_second_phase,"assert isinstance(message, NoStableMatchingWarning)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_second_phase,assert str(player.name) in str(message),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_second_phase,assert player.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_stable_roommates,"assert isinstance(matching, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_stable_roommates,assert str(player) in str(message),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_stable_roommates,assert not player.prefs,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/stable_roommates/test_algorithm.py,test_stable_roommates,assert match == player.prefs[0],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_init,assert supervisor.name == name,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_init,assert supervisor.capacity == capacity,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_init,assert supervisor.projects == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_init,assert supervisor.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_init,assert supervisor.matching == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_init,assert supervisor._pref_names == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_init,assert supervisor._original_prefs is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_set_prefs,assert supervisor.prefs == students,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_set_prefs,assert supervisor._pref_names == pref_names,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_set_prefs,assert supervisor._original_prefs == students,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_set_prefs,assert project.prefs == students,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_set_prefs,assert project._pref_names == pref_names,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_supervisor.py,test_set_prefs,assert project._original_prefs == students,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_player.py,test_get_favourite,assert player.get_favourite() == favourite,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_player.py,test_match,assert player.matching == other,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_player.py,test_unmatch,assert player.matching is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_player.py,test_get_successors,assert player.get_successors() == successors,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_player.py,test_get_successors,assert player.get_successors() == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_player.py,test_check_if_match_unacceptable,assert player.check_if_match_is_unacceptable() == message,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_player.py,test_check_if_match_unacceptable,assert player.check_if_match_is_unacceptable() == message,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_player.py,test_check_if_match_unacceptable,assert player.check_if_match_is_unacceptable() is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_init,assert hospital.name == name,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_init,assert hospital.capacity == capacity,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_init,assert hospital.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_init,assert hospital.matching == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_init,assert hospital._pref_names == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_init,assert hospital._original_prefs is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_init,assert hospital._original_capacity == capacity,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_get_favourite,assert hospital.get_favourite() == others[0],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_get_favourite,assert hospital.get_favourite() is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_match,assert hospital.matching == others[:i + 1],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_match,assert hospital.matching == others,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_unmatch,assert hospital.matching == others[i + 1:],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_unmatch,assert hospital.matching == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_get_worst_match,assert hospital.get_worst_match() == others[0],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_get_worst_match,assert hospital.get_worst_match() == others[-1],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_get_successors,assert hospital.get_successors() == others[1:],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_get_successors,assert hospital.get_successors() == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_check_if_match_is_unacceptable,assert hospital.check_if_match_is_unacceptable() == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_check_if_match_is_unacceptable,assert hospital.check_if_match_is_unacceptable() == [message],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_check_if_oversubscribed,assert hospital.check_if_oversubscribed() is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_hospital.py,test_check_if_oversubscribed,assert hospital.check_if_oversubscribed() == message,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_algorithms_util.py,test_delete_pair,assert player.prefs == [o for o in others if o != other],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_algorithms_util.py,test_delete_pair,assert other.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_algorithms_util.py,test_match_pair,assert player.matching == other,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/test_algorithms_util.py,test_match_pair,assert other.matching == player,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_init,assert project.name == name,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_init,assert project.capacity == capacity,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_init,assert project.supervisor is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_init,assert project.prefs == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_init,assert project.matching == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_init,assert project._pref_names == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_init,assert project._original_prefs is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_set_supervisor,assert project.supervisor == supervisor,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_set_supervisor,assert supervisor.projects == [project],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_match,assert project.matching == students[:i + 1],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_match,assert supervisor.matching == students[:i + 1],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_match,assert project.matching == students,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_match,assert supervisor.matching == students,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_unmatch,assert project.matching == students[i + 1:],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_unmatch,assert supervisor.matching == students[i + 1:],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_unmatch,assert project.matching == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
daffidwilde,matching,tests/players/test_project.py,test_unmatch,assert supervisor.matching == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_popcount.py,test_popcnt_array,assert output_counts[0] == input_as_bitarray[:array_size * 8].count(),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_popcount.py,test_popcnt_array,assert sum(output_counts) == bitarray_count,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_popcount.py,test_popcnt_array_len_1,assert len(resulting_popcount_array) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_popcount.py,test_popcnt_array_len_1,assert sum(resulting_popcount_array) == resulting_popcount_array[0],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_popcount.py,test_popcnt_array_len_1,assert sum(resulting_popcount_array) == input_as_bitarray.count(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_bigram_encoding_deterministic,assert set(ngram_comparator.tokenize(myinput)) == set(ngram_comparator.tokenize(myinput)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_ngram_spaces,assert tokens[0].endswith(' ' * (ngram_comparator.n - 1) + myinput[0]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_ngram_spaces,assert tokens[-1].endswith(myinput[-1] + ' ' * (ngram_comparator.n - 1)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_string_bigram_token_size,assert len(myinput) == len(tokens) - (ngram_comparator.n - 1),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_positional,"assert indices == set(range(1, len(tokens) + 1))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_exact_deterministic,assert ExactComparison().tokenize(word) == ExactComparison().tokenize(word),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_exact_uniqueness,assert set(list(ExactComparison().tokenize(word1))) != set(list(ExactComparison().tokenize(word2))),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
data61,clkhash,tests/test_comparators.py,test_exact_num_tokens,assert len(list(ExactComparison().tokenize(word))) == (1 if len(word) > 0 else 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties,"assert len(tokens) == 2 * resolution + 1, 'unexpected number of tokens'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties,"assert tokens == tokens_again, 'NumericComparison should be deterministic'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties,"assert len(set(tokens)) == 2 * resolution + 1, 'tokens should be unique'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_around_threshdistance,"assert num_common_tokens == 1, 'numbers exactly thresh_dist apart have 1 token in common'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_around_threshdistance,"assert 0 <= num_common_tokens <= 2, 'numbers close to thresh_dist apart have 0-2 tokens in common'",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_around_threshdistance,"assert len(set(cand_tokens).intersection(set(other_tokens))) == 0, 'numbers more than thresh_dist apart have no tokens in common'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_around_threshdistance,"assert len(set(cand_tokens).intersection(set(other_tokens))) >= len(cand_tokens) - 2, 'numbers that are not more than the modulus apart have all or all - 2 tokens in common'",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps,assert overlaps[0] == len(cand_tokens),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps,assert overlaps[-1] == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties_with_integers,"assert len(tokens) == 2 * resolution + 1, 'unexpected number of tokens'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties_with_integers,"assert tokens == tokens_again, 'NumericComparison should be deterministic'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_properties_with_integers,"assert len(set(tokens)) == 2 * resolution + 1, 'tokens should be unique'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_with_integers,"assert len(set(cand_tokens).intersection(set(other_tokens))) == 1, 'numbers exactly thresh_dist apart have 1 token in common'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_with_integers,"assert len(set(cand_tokens).intersection(set(other_tokens))) == 0, 'numbers more than thresh_dist apart have no tokens in common'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_with_integers,"assert len(set(cand_tokens).intersection(set(other_tokens))) >= len(cand_tokens) - 2, 'numbers that are not more than the modulus apart have all or all - 2 tokens in common'",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_with_integers,assert overlaps[0] == len(cand_tokens),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,clkhash,tests/test_comparators.py,test_numeric_overlaps_with_integers,assert overlaps[-1] == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_similarities_hist,assert sorted(bin_edges) == list(bin_edges),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_similarities_hist,assert len(counts) == bins,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_similarities_hist,assert count == sum((bin_edge_left <= s < bin_edge_right for s in sims)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_similarities_hist,assert counts[-1] == sum((bin_edges[-2] <= s <= bin_edges[-1] for s in sims)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_cumul_number_matches_vs_threshold,assert len(counts) == len(thresholds) == steps + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_cumul_number_matches_vs_threshold,assert len(set(thresholds)) == len(thresholds),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_cumul_number_matches_vs_threshold,assert sorted(thresholds) == list(thresholds),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_cumul_number_matches_vs_threshold,assert count == len(solution),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert len(matches_nums) == len(nonmatches_nums) == bins,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert len(bin_boundaries) == bins + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert len(set(bin_boundaries)) == len(bin_boundaries),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert sorted(bin_boundaries) == list(bin_boundaries),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert matches_num == matches_num_true,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert nonmatches_num == nonmatches_num_true,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert matches_num == matches_num_true,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_matches_nonmatches_hist,assert nonmatches_num == nonmatches_num_true,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_stats.py,test_nonmatch_index_score,"assert i == anonlink.stats.nonmatch_index_score(candidate_pairs, n)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_similarity_dice.py,test_bytes_bitarray_agree,assert res_bytes == res_ba,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_greedy_np,"assert all((matched[i] <= 1 and matched[j] <= 1 for _, (i, j) in candidate_pairs))",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_greedy_np,"assert any((tuple(sorted((r1, r2))) not in all_candidate_pairs for r1 in g1 for r2 in g2))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_greedy_2p,assert all((len(group) <= 2 for group in solution)),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_greedy_2p,"assert all((i in matched or j in matched for _, (i, j) in candidate_pairs))",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_greedy_2p,"assert (i, j) in matches or match_similarities.get(i, float('-inf')) >= sim or match_similarities.get(j, float('-inf')) >= sim",False,False,False,False,False,False,True,False,False,False,True,False,False,False,False
data61,anonlink,tests/test_solving.py,test_python_native_match_2p,assert solution_python == solution_native,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_python_native_match_np,assert solution_python == solution_native,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_pairs_from_groups,assert groups == _groups_from_pairs(pairs_from_groups(groups)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_probabilistic_python_native_match_2p,assert solution_python == solution_native,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_probabilistic_python_native_match_np,assert solution_python == solution_native,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_probabilistic_python_native_match_np_ndedup,assert solution_python == solution_native,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_probabilistic_nonprobabilistic_match,assert solution_probabilistic == solution_nonprobabilistic,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
data61,anonlink,tests/test_solving.py,test_probabilistic_nonprobabilistic_match_ndedup,assert solution_probabilistic == solution_nonprobabilistic,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
databio,pypiper,tests/utils_tests/test_head_util.py,test_head_atomic,assert obj == head(obj),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_differentMajor,"assert not match(version1, version2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_differentMajor,"assert not match(version1[:1], version2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_differentMajor,"assert not match(version1, version2[:1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_differentMajor,"assert not match(version1[:1], version2[:1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_smallerMinor,"assert match(version, larger_version)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_smallerMinor,"assert match(version[:1], larger_version)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_smallerMinor,"assert match(version + (1,), larger_version)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_smallerMinor,"assert match(version, larger_version + (1,))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_largerMinor,"assert not match(larger_version, version)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_largerMinor,"assert not match(larger_version, version[:1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_largerMinor,"assert not match(larger_version, version + (1,))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_largerMinor,"assert not match(larger_version + (1,), version)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_patchIgnored,"assert match(version, version[:2] + (0,))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_util.py,test_patchIgnored,"assert match(version[:2] + (0,), version)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_protocol.py,test_sendWithAcks_delivery,assert simulator.server_received == messages,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_protocol.py,test_sendWithAcks_delivery,assert len(simulator.client._buffered) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
datawire,mdk,unittests/test_protocol.py,test_sendWithAcks_delivery,assert len(simulator.client._inFlight) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
diofant,diofant,diofant/tests/ntheory/test_ntheory.py,test_factorint_invariant,"assert Mul(*[v ** p for v, p in factorint(x).items()]) == x",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
dit,dit,tests/multivariate/test_cohesion.py,test_cohesion_1,"assert tc == pytest.approx(c, abs=0.0001)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dit,dit,tests/multivariate/test_cohesion.py,test_cohesion_3,"assert dtc == pytest.approx(c, abs=0.0001)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dit,dit,tests/multivariate/secret_key_agreement/test_intrinsic_mutual_information.py,test_bounds,assert imi <= mi + 1e-10,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/secret_key_agreement/test_intrinsic_mutual_information.py,test_bounds,assert imi <= cmi + 1e-10,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/divergences/test_hypercontractivity_coefficient.py,test_hypercontractivity_coefficient_tensorization,"assert hc_mixed == pytest.approx(max(hc_a, hc_b), abs=0.01)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_distributions1,"assert dist.alphabet == ((0, 1),)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_distributions2,"assert dist.alphabet == ((0, 1), (0, 1))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_distributions3,"assert dist.alphabet == ((0, 1), (0, 1))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_distribution_structures1,"assert dist.alphabet == ((0, 1),)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_distribution_structures2,"assert dist.outcome_length() in [2, 3, 4]",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_distribution_structures3,assert dist.outcome_length() == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_distribution_structures3,"assert set(dist.alphabet[0]) <= {0, 1, 2, 3}",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_distribution_structures4,"assert dist.outcome_length() in [2, 3]",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_distribution_structures4,"assert set(dist.alphabet[0]) <= {0, 1, 2, 3}",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_markov_chains1,"assert coinformation(dist, [[0], [2]], [1]) == pytest.approx(0.0, abs=1e-07)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_markov_chains2,"assert coinformation(dist, [[0], [2]], [1]) == pytest.approx(0.0, abs=1e-07)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dit,dit,tests/utils/test_testing.py,test_markov_chains3,"assert coinformation(dist, [[0], [2]], [1]) == pytest.approx(0.0, abs=1e-07)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis1,assert k <= j + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis1,assert j <= b + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis1,assert b <= c + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis1,assert c <= g + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis1,assert g <= f + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis1,assert f <= m + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis2,assert k <= j + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis2,assert j <= b + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis2,assert b <= c + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis2,assert c <= g + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis2,assert g <= f + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/common_informations/test_common_informations.py,test_cis2,assert f <= m + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/divergences/test_maximum_correlation.py,test_maximum_correlation_tensorization,"assert rho_mixed == pytest.approx(max(rho_a, rho_b), abs=0.05)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dit,dit,tests/multivariate/secret_key_agreement/test_skars.py,test_hierarchy,assert 0 <= limi + eps,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
dit,dit,tests/multivariate/secret_key_agreement/test_skars.py,test_hierarchy,assert limi <= sc + eps,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/secret_key_agreement/test_skars.py,test_hierarchy,assert sc <= nimi + eps,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/secret_key_agreement/test_skars.py,test_hierarchy,assert nimi <= mimi + eps,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/secret_key_agreement/test_skars.py,test_hierarchy,assert mimi <= imi + eps,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/multivariate/secret_key_agreement/test_skars.py,test_hierarchy,assert imi <= uimi + eps,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_entropy_upper_bound,assert h <= logX + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_pinskers_inequality,assert dkl >= vd ** 2 / (2 * np.log(2)) - epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_fanos_inequality,assert ce <= hb + P_e * np.log2(X - 1) + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_entropy_subadditivity,assert h <= h_sum + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_gibbs_inequality,assert dkl >= 0 - epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
dit,dit,tests/test_inequalities.py,test_conditional_entropy,assert ch <= h + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_shannon_inequality,assert i >= 0 - epsilon,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
dit,dit,tests/test_inequalities.py,test_zhang_yeung_inequality,assert 2 * I_c_d <= I_a_b + I_a_cd + 3 * I_c_d_g_a + I_c_d_g_b + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_data_processing_inequality,assert i_xz <= i_xy + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_data_processing_inequality_mc,assert rho_xz <= rho_xy + 10 * epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_data_processing_inequality_gk,assert k_xz <= k_xy + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_data_processing_inequality_wyner,assert c_xz <= c_xy + 100 * epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_data_processing_inequality_exact,assert g_xz <= g_xy + 100 * epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_max_correlation_mutual_information,assert (p_min * rho) ** 2 <= 2 * np.log(2) * i + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_hellinger_variational,assert h ** 2 <= v + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_hellinger_variational,assert v <= np.sqrt(2) * h + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_chernoff_inequalities,assert a <= 1 - 2 ** (-c) + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_chernoff_inequalities,assert 1 - 2 ** (-c) <= b + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/test_inequalities.py,test_mi_hc,assert a <= b * c + epsilon,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
dit,dit,tests/inference/test_knn_estimators.py,test_entropy_knn1,"assert h == pytest.approx(np.log2(2 * np.pi * np.e * std ** 2) / 2, abs=0.1)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dit,dit,tests/inference/test_knn_estimators.py,test_entropy_knn2,"assert h == pytest.approx(np.log2(2 * np.pi * np.e * std ** 2) / 2, abs=0.1)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dit,dit,tests/inference/test_knn_estimators.py,test_mi_knn1,"assert mi == pytest.approx(-np.log2(1 - rho ** 2) / 2, abs=0.1)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dit,dit,tests/inference/test_knn_estimators.py,test_cmi_knn1,"assert mi == pytest.approx(-np.log2(1 - rho ** 2) / 2, abs=0.1)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_get_request,"self.assert_valid_http_scope(scope, 'GET', request_path, params=request_params)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_get_request,"self.assert_valid_http_request_message(messages[0], body=b'')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_request_body_chunking,assert messages[0]['body'].decode() == body.decode()[:chunk_size],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_request_body_chunking,assert not messages[-2]['more_body'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_request_body_chunking,assert messages[-1] == {'type': 'http.disconnect'},False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_post_request,"self.assert_valid_http_scope(scope, 'POST', request_path)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_post_request,"self.assert_valid_http_request_message(messages[0], body=request_body)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_headers,"self.assert_valid_http_scope(scope, 'OPTIONS', request_path, headers=request_headers)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_headers,"self.assert_valid_http_request_message(messages[0], body=b'')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_duplicate_headers,"self.assert_valid_http_scope(scope, 'OPTIONS', request_path, headers=duplicated_headers)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_duplicate_headers,"self.assert_valid_http_request_message(messages[0], body=b'')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_kitchen_sink,"self.assert_valid_http_scope(scope, request_method, request_path, params=request_params, headers=request_headers)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_kitchen_sink,"self.assert_valid_http_request_message(messages[0], body=request_body)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_root_path_header,"self.assert_valid_http_scope(scope, 'GET', '/', headers=[])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_root_path_header,"self.assert_valid_http_request_message(messages[0], body=b'')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_request.py,test_root_path_header,assert scope['root_path'] == daphne_path,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_websocket.py,test_http_bits,"self.assert_valid_websocket_scope(scope, path=request_path, params=request_params, headers=request_headers)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_websocket.py,test_http_bits,self.assert_valid_websocket_connect_message(messages[0]),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_websocket.py,test_root_path,"self.assertNotIn('daphne-root-path', (header[0].lower() for header in scope['headers']))",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
django,daphne,tests/test_websocket.py,test_root_path,"self.assertEqual(scope['root_path'], daphne_path)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_response.py,test_body,"self.assertEqual(response.status, 200)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_response.py,test_body,"self.assertEqual(response.read(), body)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
django,daphne,tests/test_http_response.py,test_headers,"self.assertEqual(self.normalize_headers(self.encode_headers(response.getheaders())), self.normalize_headers(headers))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_kvs,assert node[k] is v,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_leaf_with_leaf,assert api.leaf(leaf) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_leaf_with_node,assert api.leaf(node) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_walk,"assert isinstance(k, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_walk,assert len(k) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_get,"assert api.get(node, k) is v",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_has,"assert api.has(node, k) is True",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_has,"assert api.has(node, k + (0,)) is False",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_expand,assert count == len(result),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_expand,assert segments == result[-1],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_types,"assert type(api.get(node, ta)) is tt",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_leaves,assert api.leafy(v),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_match,"assert api.match(segments, glob) is True",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_match_nonmatching,"assert api.match(segments, glob) is False",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_set_walkable,"assert api.get(node, segments) is value",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_set_create_missing,"assert api.get(node, destination) is value",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_fold,assert count == len(tuple(api.walk(thing))),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
dpath-maintainers,dpath-python,tests/test_segments.py,test_view,"assert api.get(view, segments) == api.get(node, segments)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_stochastic_fictitious_play.py,test_property_get_distribution_response_to_play_count,assert len(distribution_response) == len(play_count),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_stochastic_fictitious_play.py,test_property_get_distribution_response_to_play_count,assert np.all(distribution_response) >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_stochastic_fictitious_play.py,test_property_get_distribution_response_to_play_count,"assert np.isclose(np.sum(distribution_response), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_polytope.py,test_creation_of_halfspaces,"self.assertEqual(halfspace.shape, (number_of_strategies + dimension, dimension + 1))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_polytope.py,test_creation_of_halfspaces,"self.assertTrue(np.array_equal(halfspace[number_of_strategies:, :-1], -np.eye(dimension)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_polytope.py,test_creation_of_feasible_point,"self.assertTrue(all(np.dot(M, feasible_point) <= -b))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_polytope.py,test_creation_of_non_trivial_vertices,"self.assertIsInstance(vertices_generator, GeneratorType)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_polytope.py,test_creation_of_non_trivial_vertices,"self.assertEqual(len(vertex), dimension)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_polytope.py,test_creation_of_non_trivial_vertices,"self.assertGreaterEqual(label, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_polytope.py,test_creation_of_non_trivial_vertices,"self.assertLessEqual(label, number_of_strategies + dimension)",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_bi_matrix_init,"self.assertEqual(g.payoff_matrices, (A, B))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_bi_matrix_init,self.assertTrue(g.zero_sum),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_bi_matrix_init,self.assertFalse(g.zero_sum),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_bi_matrix_init,"self.assertTrue(np.array_equal(g.payoff_matrices[0], np.asarray(A)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_bi_matrix_init,"self.assertTrue(np.array_equal(g.payoff_matrices[1], np.asarray(B)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_zero_sum_game_init,"self.assertTrue(np.array_equal(g.payoff_matrices[0], A))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_zero_sum_game_init,"self.assertTrue(np.array_equal(g.payoff_matrices[0], -g.payoff_matrices[1]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_zero_sum_game_init,self.assertTrue(g.zero_sum),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_zero_sum_game_init,"self.assertTrue(np.array_equal(g.payoff_matrices[0], np.asarray(A)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_zero_sum_game_init,"self.assertTrue(np.array_equal(g.payoff_matrices[0], -g.payoff_matrices[1]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_zero_sum_game_init,self.assertTrue(g.zero_sum),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_zero_sum_property_from_bi_matrix,self.assertTrue(g.zero_sum),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_property_support_enumeration,"self.assertEqual(s.size, [3, 4][i])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_fictitious_play,assert len(outcome) == iterations + 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_fictitious_play,assert len(expected_outcome) == iterations + 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_fictitious_play,"assert np.array_equal(row_play, expected_row_play)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_fictitious_play,"assert np.array_equal(column_play, expected_column_play)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_stochastic_fictitious_play,assert len(outcome) == iterations + 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_stochastic_fictitious_play,assert len(expected_outcome) == iterations + 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_stochastic_fictitious_play,"assert np.allclose(column_dist, expected_column_dist)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_stochastic_fictitious_play,"assert np.allclose(row_dist, expected_row_dist)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_stochastic_fictitious_play,"assert np.allclose(column_play, expected_column_play)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_game.py,test_stochastic_fictitious_play,"assert np.allclose(row_play, expected_row_play)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_fictitious_play.py,test_property_find_best_response_to_play_count,assert best_response >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_fictitious_play.py,test_property_find_best_response_to_play_count,assert best_response <= M.shape[1] - 1,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_fictitious_play.py,test_property_update_belief,assert play_count[play] + 1 == updated_play_count[play],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_fictitious_play.py,test_property_update_belief,"assert np.array_equal(play_count[:play], updated_play_count[:play])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_fictitious_play.py,test_property_update_belief,"assert np.array_equal(play_count[play + 1:], updated_play_count[play + 1:])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_fictitious_play.py,test_property_fictitious_play,"assert isinstance(play_counts, types.GeneratorType)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_fictitious_play.py,test_property_fictitious_play,assert len(play_counts) == iterations + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_fictitious_play.py,test_property_fictitious_play,"assert max(tuple(map(len, play_counts))) == min(tuple(map(len, play_counts))) == 2",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_replicator_dynamics.py,test_property_get_derivative_of_fitness,assert len(derivative_of_fitness) == len(x),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_replicator_dynamics.py,test_property_of_output_dimension_for_games_of_size_3,assert all((len(x) == 3 for x in xs)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_replicator_dynamics.py,test_property_of_output_dimension_for_games_of_size_4,assert all((len(x) == 4 for x in xs)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_replicator_dynamics.py,test_property_get_derivative_of_asymmetric_fitness,assert len(derivative_of_fitness) == len(x),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_replicator_dynamics.py,test_property_of_output_dimension_for_asymmetric_games_of_size_4_2,assert all((len(x) == 4 for x in xs1)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_replicator_dynamics.py,test_property_of_output_dimension_for_asymmetric_games_of_size_4_2,assert all((len(x) == 2 for x in xs2)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_replicator_dynamics.py,test_equivalence_between_symmetric_and_asymmetric_replicator_dynamics,"assert np.allclose(asymmetric_row_xs, asymmetric_col_xs, atol=0.001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_replicator_dynamics.py,test_equivalence_between_symmetric_and_asymmetric_replicator_dynamics,"assert np.allclose(symmetric_xs, asymmetric_row_xs, atol=0.001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
drvinceknight,Nashpy,tests/unit/test_replicator_dynamics.py,test_equivalence_between_symmetric_and_asymmetric_replicator_dynamics,"assert np.allclose(symmetric_xs, asymmetric_col_xs, atol=0.001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
emfcamp,Website,tests/test_cfp_voting.py,test_get_floor_median_2,assert type(result) == int,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil_saturation.py,test_wateroil_normalization,assert not wateroil.table.empty,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil_saturation.py,test_wateroil_normalization,assert not wateroil.table.isna().to_numpy().any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil_saturation.py,test_wateroil_normalization,"assert float_df_checker(wateroil.table, 'SW', wateroil.swl, 'SON', 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil_saturation.py,test_wateroil_normalization,"assert float_df_checker(wateroil.table, 'SW', 1 - wateroil.socr, 'SON', 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil_saturation.py,test_wateroil_normalization,"assert float_df_checker(wateroil.table, 'SW', wateroil.swcr, 'SWN', 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil_saturation.py,test_wateroil_normalization,"assert float_df_checker(wateroil.table, 'SW', 1 - wateroil.sorw, 'SWN', 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil_saturation.py,test_wateroil_normalization,"assert float_df_checker(wateroil.table, 'SW', wateroil.swirr, 'SWNPC', 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil_saturation.py,test_wateroil_normalization,"assert float_df_checker(wateroil.table, 'SW', 1.0, 'SWNPC', 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_surface/test_new_surface.py,test_input_lists,assert surf.values.data.flatten().tolist() == pytest.approx(data),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_surface/test_new_surface.py,test_input_numbers,assert list(set(surf.values.data.flatten().tolist())) == pytest.approx([data]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_estimateendpoints.py,test_sorw_hypo,assert not np.isnan(est_sorw),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_estimateendpoints.py,test_sorw_hypo,assert est_error <= error_requirement,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_normalization,assert not gasoil.table.empty,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_normalization,assert not gasoil.table.isna().to_numpy().any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_normalization,"assert float_df_checker(gasoil.table, 'SG', 0, 'SON', 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_normalization,"assert float_df_checker(gasoil.table, 'SG', 1 - gasoil.sorg - gasoil.swl, 'SON', 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_normalization,"assert float_df_checker(gasoil.table, 'SG', gasoil.sgcr, 'SGN', 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_normalization,"assert float_df_checker(gasoil.table, 'SG', 1 - gasoil.sorg - gasoil.swl, 'SGN', 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_normalization,"assert float_df_checker(gasoil.table, 'SG', 1 - gasoil.swl, 'SGN', 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_normalization,"assert float_df_checker(gasoil.table, 'SG', gasoil.sgcr, 'SGN', 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_krendmax,assert gasoil.selfcheck(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_krendmax,assert 0 < gasoil.crosspoint() < 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_krendmax,assert gasoil.selfcheck(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_krendmax,assert 0 < gasoil.crosspoint() < 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_krendmax,assert gasoil.selfcheck(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_krendmax,assert 0 < gasoil.crosspoint() < 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_corey1,assert 'KROG' in gasoil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_corey1,assert 'KRG' in gasoil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_corey1,"assert isinstance(gasoil.krgcomment, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_corey1,assert len(sgofstr) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_corey1,assert len(sgofstr) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_let1,assert 'KROG' in gasoil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_let1,assert 'KRG' in gasoil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_let1,"assert isinstance(gasoil.krgcomment, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
equinor,pyscal,tests/test_gasoil.py,test_gasoil_let1,assert len(sgofstr) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_corey1,assert 'KROW' in wateroil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_corey1,assert 'KRW' in wateroil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_corey1,"assert isinstance(wateroil.krwcomment, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_corey1,assert len(swofstr) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_let1,assert 'KROW' in wateroil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_let1,assert 'KRW' in wateroil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_let1,"assert isinstance(wateroil.krwcomment, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_let1,assert len(swofstr) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_krendmax,assert wateroil.selfcheck(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_krendmax,assert 0 < wateroil.crosspoint() < 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_krendmax,assert wateroil.selfcheck(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_wateroil.py,test_wateroil_krendmax,assert 0 < wateroil.crosspoint() < 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,xtgeo,tests/test_xyz/test_points.py,test_create_pointset,assert len(points) == pointset.nrow,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_xyz/test_points.py,test_create_pointset,"np.testing.assert_array_almost_equal(pointset.get_dataframe()['X_UTME'], points[:, 0])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_xyz/test_points.py,test_create_pointset,"np.testing.assert_array_almost_equal(pointset.get_dataframe()['Y_UTMN'], points[:, 1])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_xyz/test_points.py,test_create_pointset,"np.testing.assert_array_almost_equal(pointset.get_dataframe()['Z_TVDSS'], points[:, 2])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_roff_property_read_write,"assert RoffParameter.from_file(buff, rpara.name) == rpara",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_roff_prop_read_xtgeo,assert xtgeo_property.ncol == xtgeo_property2.ncol,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_roff_prop_read_xtgeo,assert xtgeo_property.nrow == xtgeo_property2.nrow,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_roff_prop_read_xtgeo,assert xtgeo_property.nlay == xtgeo_property2.nlay,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_roff_prop_read_xtgeo,assert xtgeo_property.dtype == xtgeo_property2.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_roff_prop_read_xtgeo,assert np.all(xtgeo_property.values == xtgeo_property2.values),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_roff_prop_read_xtgeo,assert xtgeo_property.codes == xtgeo_property2.codes,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_eq_reflexivity,assert roff_param == roff_param,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_eq_symmetry,assert roff_param2 == roff_param1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_eq_transitivity,assert roff_param1 == roff_param3,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_roff.py,test_eq_typing,assert roff_param != '',False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
equinor,xtgeo,tests/test_surface/test_file_io.py,test_read_cube,assert list(set(surf_from_cube.values.data.flatten().tolist())) == pytest.approx([data]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_surface/test_file_io.py,test_read_cube,assert result == cube_input,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof,assert wog.selfcheck(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof,assert 'SL' in slgof,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof,assert 'KRG' in slgof,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof,assert 'KROG' in slgof,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof,assert not slgof.empty,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof,"assert np.isclose(slgof['SL'].to_numpy()[0], wog.gasoil.swl + wog.gasoil.sorg)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof,"assert np.isclose(slgof['KRG'].to_numpy()[-1], 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof,"assert np.isclose(slgof['KROG'].to_numpy()[0], 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof,assert wog.gasoil.SLGOF() == '',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof,assert wog.SLGOF() == '',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof_hypo,assert gasoil.selfcheck(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof_hypo,"assert np.isclose(slgof['SL'].to_numpy()[0], gasoil.swl + gasoil.sorg)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof_hypo,"assert np.isclose(slgof['SL'].to_numpy()[-1], 1.0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof_hypo,"assert isinstance(slgof_str, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof_hypo,assert slgof_str,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_slgof.py,test_slgof_sl_mismatch,"assert np.isclose(gasoil.slgof_df()['SL'].to_numpy()[0] - (gasoil.swl + gasoil.sorg), 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_scalrecommendation.py,test_interpolation,assert len(interpolant.gasoil.SGOF()) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_scalrecommendation.py,test_interpolation,assert len(interpolant.gasoil.SGFN()) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_scalrecommendation.py,test_interpolation,assert len(interpolant.wateroil.SWFN()) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_scalrecommendation.py,test_interpolation,assert len(interpolant.SOF3()) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_scalrecommendation.py,test_interpolation,assert len(interpolant.wateroil.SWOF()) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_scalrecommendation.py,test_interpolation,assert interpolant.threephaseconsistency(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_scalrecommendation.py,test_interpolation,assert sum(interpolant.wateroil.table['PC']),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_roff_grid_read_write,assert RoffGrid.from_file(buff) == rgrid,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_to_from_xtgeogrid_format2,assert roff_grid.xtgeo_subgrids() == xtggrid._subgrids,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_to_from_xtgeogrid_format1,assert roff_grid.xtgeo_subgrids() == xtggrid._subgrids,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_to_from_roffgrid,"assert same_geometry(roffgrid2, roff_grid)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_to_from_roffgrid,"assert np.array_equal(roffgrid2.subgrids, roff_grid.subgrids)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_xtgeo_values_are_c_contiguous,assert roff_grid.xtgeo_coord().flags['C_CONTIGUOUS'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_xtgeo_values_are_c_contiguous,assert roff_grid.xtgeo_actnum().flags['C_CONTIGUOUS'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_xtgeo_values_are_c_contiguous,assert roff_grid.xtgeo_zcorn().flags['C_CONTIGUOUS'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_default_values,assert roff_grid2.xoffset == 0.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_default_values,assert roff_grid2.yoffset == 0.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_default_values,assert roff_grid2.zoffset == 0.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_default_values,assert roff_grid2.xscale == 1.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_default_values,assert roff_grid2.yscale == 1.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_default_values,assert roff_grid2.zscale == -1.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_default_values,assert roff_grid2.subgrids is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_default_values,"assert np.array_equal(roff_grid2.active, np.ones(roff_grid.nx * roff_grid.ny * roff_grid.nz, dtype=np.bool_))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_eq_reflexivity,assert roff_grid == roff_grid,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_eq_symmetry,assert roff_grid2 == roff_grid1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_eq_transitivity,assert roff_grid1 == roff_grid3,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_roff.py,test_deprecated_fileread,assert new_grid == roff_grid,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
equinor,xtgeo,tests/test_grid3d/test_grid_property_grdecl.py,test_read_grid_property_is_c_contiguous,"assert read_grdecl_3d_property(mock_file, grid_property.name, grid_property.values.shape).flags['C_CONTIGUOUS']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_normalize_nonlinpart_wo_hypo,"assert np.isclose(krwn1(1), krwend1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_normalize_nonlinpart_wo_hypo,"assert np.isclose(kron1(1), kroend1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_normalize_nonlinpart_wo_hypo,"assert np.isclose(krwn2(1), krwend2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_normalize_nonlinpart_wo_hypo,"assert np.isclose(kron2(1), kroend2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_normalize_pc,"assert np.isclose(pc_fn(0), pc_max)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_normalize_pc,"assert np.isclose(pc_fn(1), pc_min)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_wo,assert wo_ip.tag,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_wo,assert 0 < wo_ip.crosspoint() < 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_wo,"assert np.isclose(dists[0], 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_wo,"assert (wo_high.table - ips[-1].table)[['KRW', 'KROW']].sum().sum() < 0.01",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_wo_pc,assert 0 < wo_ip.crosspoint() < 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_wo_pc,"assert np.isclose(dists[0], 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_wo_pc,assert (wo_high.table - ips[-1].table)[['PC']].sum().sum() < 0.01,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_wo_pc,"assert np.isclose(dists[0], 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_normalize_nonlinpart_go_hypo,"assert np.isclose(krgn1(1), krgend1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_normalize_nonlinpart_go_hypo,"assert np.isclose(kron1(1), kroend1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_normalize_nonlinpart_go_hypo,"assert np.isclose(krgn2(1), krgend2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_normalize_nonlinpart_go_hypo,"assert np.isclose(kron2(1), kroend2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_go,assert 0 < go_ip.crosspoint() < 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_go,assert sgcr_lower_bound_ok,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_go,assert sgcr_upper_bound_ok,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_interpolation.py,test_interpolate_go,"assert np.isclose(dists[0], 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_capillarypressure.py,test_inverses_sw_simpleJ,"assert np.isclose(capillarypressure._sw_to_simpleJ(sw, a, b), j_value)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_capillarypressure.py,test_inverses_simpleJ_sw,"assert np.isclose(result, sw_value)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_capillarypressure.py,test_inverses_simpleJ_height,"assert np.isclose(result, J)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_utils_capillarypressure.py,test_inverses_height_simpleJ,"assert np.isclose(result, height)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_corey1,assert 'KRG' in gaswater.gasoil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_corey1,assert 'KRW' in gaswater.wateroil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_corey1,"assert isinstance(gaswater.wateroil.krwcomment, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_corey1,assert len(swfnstr) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_corey1,assert len(sgfnstr) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_let1,assert 'KRG' in gaswater.gasoil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_let1,assert 'KRW' in gaswater.wateroil.table,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_let1,"assert isinstance(gaswater.wateroil.krwcomment, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_let1,assert len(swfnstr) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_let1,assert len(sgfnstr) > 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_krendmax,assert gaswater.selfcheck(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
equinor,pyscal,tests/test_gaswater.py,test_gaswater_krendmax,assert gaswater.selfcheck(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ericmjl,nxviz,tests/test_polcart.py,test_convert_rt,"assert np.allclose(r, r_new)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ericmjl,nxviz,tests/test_polcart.py,test_convert_rt,"assert np.allclose(theta, theta_new)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ericmjl,nxviz,tests/test_polcart.py,test_to_proper_radians,assert theta <= np.pi and theta >= -np.pi,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ericmjl,nxviz,tests/test_polcart.py,test_to_proper_degrees,assert theta <= 180 and theta >= -180,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
ericmjl,nxviz,tests/test_polcart.py,test_to_degrees,assert theta <= 180 and theta >= -180,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
ericmjl,nxviz,tests/test_polcart.py,test_to_radians,assert theta <= np.pi and theta >= -np.pi,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ericmjl,nxviz,tests/test_geometry.py,test_item_theta,"assert np.allclose(theta_observed, theta_expected)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ericmjl,nxviz,tests/test_geometry.py,test_get_cartesian,"assert get_cartesian(r, theta) == polcart.to_cartesian(r, theta)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ericmjl,nxviz,tests/test_geometry.py,test_correct_negative_angle,"assert np.allclose(obs, exp)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ericmjl,nxviz,tests/test_geometry.py,test_correct_negative_angle,assert obs <= 2 * np.pi,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
ericmjl,nxviz,tests/test_geometry.py,test_correct_negative_angle,assert obs >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_contract_strategy.py,test_given,"assert isinstance(contract, ProjectContract)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_integers.py,test_uint_given,assert type(value) is int,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_integers.py,test_uint_given,assert 0 <= value <= 2 ** 256 - 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_integers.py,test_uint8_given,assert type(value) is int,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_integers.py,test_uint8_given,assert 0 <= value <= 255,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_integers.py,test_int_given,assert -2 ** 255 <= value <= 2 ** 255 - 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_integers.py,test_int8_given,assert -128 <= value <= 127,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_integers.py,test_int_min_max,assert -12 <= value <= 42,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_integers.py,test_uint_min_max,assert 12 <= value <= 42,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_integers.py,test_exclude,"assert value not in [4, 8, 15, 16, 23, 42]",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_given,"assert isinstance(value, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_given,assert len(value) == 5,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_given,"assert isinstance(item, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_given,assert len(item) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_given,"assert isinstance(item[0], int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_given,assert 0 <= item[0] <= 255,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_int,"assert isinstance(value, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_int,assert 2 <= len(value) <= 8,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_int,"assert isinstance(item, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_int,assert 2 <= len(item) <= 8,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_int,"assert isinstance(item[0], int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_int,assert 0 <= item[0] <= 255,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_list,"assert isinstance(value, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_list,assert 3 <= len(value) <= 8,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_list,"assert isinstance(item, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_list,assert 4 <= len(item) <= 8,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_list,"assert isinstance(item[0], int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_min_list,assert 0 <= item[0] <= 255,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_int,"assert isinstance(value, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_int,assert 1 <= len(value) <= 4,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_int,"assert isinstance(item, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_int,assert 1 <= len(item) <= 4,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_int,"assert isinstance(item[0], int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_int,assert 0 <= item[0] <= 255,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_list,"assert isinstance(value, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_list,assert 1 <= len(value) <= 4,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_list,"assert isinstance(item, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_list,assert 1 <= len(item) <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_list,"assert isinstance(item[0], int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_max_list,assert 0 <= item[0] <= 255,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_kwargs_passthrough,assert len(value) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_kwargs_passthrough,assert 12 <= value[0] <= 42,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_kwargs_passthrough,assert 12 <= value[1] <= 42,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_array.py,test_kwargs_passthrough,assert 23 not in value,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_string.py,test_given,assert type(value) is str,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_string.py,test_given,assert 0 <= len(value) <= 64,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_string.py,test_min,assert 32 <= len(value) <= 64,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_string.py,test_max,assert 0 <= len(value) <= 16,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_string.py,test_min_max,assert 4 <= len(value) <= 8,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_decimal.py,test_given,assert type(value) is Decimal,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_decimal.py,test_given,assert value.as_tuple().exponent >= -10,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_decimal.py,test_given,assert -2 ** 127 <= value <= 2 ** 127 - 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_decimal.py,test_min_max,assert 1 <= value <= 1.5,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_decimal.py,test_exclude,"assert value not in [1.337, 1.2345]",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert len(value) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert type(basic) is int,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert 0 <= basic <= 255,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert type(nested_tuple) is tuple,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert len(nested_tuple) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert type(nested_tuple[0]) is bool,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert type(nested_tuple[1]) is bytes,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert len(nested_tuple[1]) == 4,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert type(array) is list,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert len(array) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_tuple.py,test_given,assert type(array[0]) is Decimal,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/network/account/test_get_deployment_address.py,test_get_deployment_address,assert contract.address == expected,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_bool.py,test_given,assert type(value) is bool,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_address.py,test_given,assert value in accounts,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_address.py,test_given,"assert isinstance(value, Account)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_address.py,test_length,assert list(accounts).index(value) < 3,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_bytes.py,test_given_fixed,assert type(value) is bytes,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_bytes.py,test_given_fixed,assert len(value) == 4,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_bytes.py,test_given_dynamic,assert type(value) is bytes,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_bytes.py,test_given_dynamic,assert 1 <= len(value) <= 64,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_bytes.py,test_min,assert 32 <= len(value) <= 64,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_bytes.py,test_max,assert 1 <= len(value) <= 6,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_bytes.py,test_min_max,assert 31 <= len(value) <= 35,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
eth-brownie,brownie,tests/test/strategies/test_bytes.py,test_exclude,"assert value not in [b'00', b'42', b'69']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
ethereum,py-wasm,tests/core/float-utils/test_float_utils.py,test_decompose_to_compose_round_trip,assert result.tobytes() == value.tobytes(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/numeric-utils/test_integer_squareroot.py,test_integer_squareroot_correct,assert (result + 1) ** 2 > value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ethereum,py-evm,tests/core/numeric-utils/test_integer_squareroot.py,test_integer_squareroot_correct,assert result ** 2 <= value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ethereum,py-wasm,tests/core/parsers/test_floating_point_parsers.py,test_parse_f32_fuzz,assert math.isnan(result),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-wasm,tests/core/parsers/test_floating_point_parsers.py,test_parse_f32_fuzz,assert math.isinf(result),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-wasm,tests/core/parsers/test_floating_point_parsers.py,test_parse_f32_fuzz,assert result == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-wasm,tests/core/parsers/test_floating_point_parsers.py,test_parse_f64_fuzz,assert math.isnan(result),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-wasm,tests/core/parsers/test_floating_point_parsers.py,test_parse_f64_fuzz,assert math.isinf(result),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-wasm,tests/core/parsers/test_floating_point_parsers.py,test_parse_f64_fuzz,assert result == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/caching-utils/test_generate_cache_key.py,test_key_generation_is_deterministic,assert left_key == right_key,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert not tree.has_parent('A0'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert not tree.has_parent('A1'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert not tree.has_node('_'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert tree.has_node('A0'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert tree.has_node('A1'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,"assert tree.children_of('A0') == ('B0',)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert tree.children_of('A1') == tuple(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert tree.has_node(node),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert tree.has_parent(node),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert tree.parent_of(node) == parent,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert node in children,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert len(children) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert len(children) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_tree_linking,assert len(children) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_out_of_order_line,assert depth == node - expected_root,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_out_of_order_line,assert root == expected_root,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_prune_reinsert_root_tracking_linear,assert root_id - 1 not in present,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_prune_reinsert_root_tracking_linear,assert depth == test_node - root_id,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_prune_reinsert_root_tracking_binary_tree,assert binary_parent(root_node) not in present,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_prune_reinsert_root_tracking_binary_tree,assert depth == test_node[0] - root_node[0],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_full_branching,assert root_id[0] == num_prunings,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_full_branching,assert depth == 3 - num_prunings,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_full_branching,"assert tracker.get_root((3, 7)) == ((1, 1), 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_sparse_branching,assert actual_root == expected_root,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_sparse_branching,assert actual_depth == expected_depth,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_sparse_branching,assert actual_root == expected_root,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/core/utils/test_root_tracker.py,test_sparse_branching,assert actual_depth == expected_depth,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/p2p/test_utils.py,test_trim_middle_length,assert len(result) <= max_length,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ethereum,trinity,tests/p2p/test_utils.py,test_trim_middle_length,assert in_str == result,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/p2p/test_utils.py,test_trim_middle_length,assert '✂✂✂' in result,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ethereum,eth-account,tests/integration/test_ethers_fuzzing.py,test_compatibility,assert acct.address == ethers_address,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,eth-account,tests/core/test_accounts.py,test_sign_message_against_sign_hash_as_text,assert signed_via_hash == signed_via_message,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-account,tests/core/test_accounts.py,test_sign_message_against_sign_hash_as_bytes,assert signed_via_hash == signed_via_message,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-account,tests/core/test_accounts.py,test_sign_message_against_sign_hash_as_hex,assert signed_via_hash_hex == signed_via_message_hex,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_backends.py,test_compress_decompress_inversion,assert decompressed == original,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_backends.py,test_signatures_with_high_s,assert coerce_low_s(low_s_signature.s) == low_s_signature.s,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_backends.py,test_signatures_with_high_s,assert coerce_low_s(high_s) == low_s_signature.s,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_backends.py,test_signatures_with_high_s,"assert key_api.ecdsa_verify(message_hash, high_s_signature, private_key.public_key)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_header_db.py,test_gap_continuity,"assert not is_block_number_in_gap(to_insert, chain_gaps)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_header_db.py,test_gap_continuity,assert to_insert in finished_inserted,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_header_db.py,test_gap_continuity,assert new_inserts == set(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_header_db.py,test_gap_continuity,assert new_inserts == {block_num},False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_header_db.py,test_gap_continuity,assert to_insert not in finished_missing,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_header_db.py,test_gap_continuity,assert new_missing == set(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_header_db.py,test_gap_continuity,"assert is_block_number_in_gap(to_remove, chain_gaps)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_header_db.py,test_gap_continuity,assert new_inserts == set(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_header_db.py,test_gap_continuity,assert new_missing == set(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_header_db.py,test_gap_continuity,assert new_missing == {block_num},False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/utilities/test_encoding.py,test_hexstr_if_str_passthrough,"assert hexstr_if_str(to_type, val) == 'zoot'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/utilities/test_encoding.py,test_hexstr_if_str_passthrough,"assert to_type.call_args == ((val,), {'hexstr': None})",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/utilities/test_encoding.py,test_hexstr_if_str_on_valid_hex,"assert hexstr_if_str(to_type, val) == 'zoot'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/utilities/test_encoding.py,test_text_if_str_passthrough,"assert text_if_str(to_type, val) == 'zoot'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/utilities/test_encoding.py,test_text_if_str_passthrough,"assert to_type.call_args == ((val,), {'text': None})",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/utilities/test_encoding.py,test_text_if_str_on_text,"assert text_if_str(to_type, val) == 'zoot'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/hexadecimal-utils/test_encode_and_decode.py,test_round_trip_with_bytestring_start,assert round_trip_value == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/hexadecimal-utils/test_encode_and_decode.py,test_round_trip_with_hex_string_start,assert round_trip_value == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_public_key_generation_is_equal,assert native_public_key == coincurve_public_key,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_signing_is_equal,assert native_signature == coincurve_signature,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_signing_is_equal,assert native_non_recoverable_signature == coincurve_non_recoverable_signature,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_native_to_coincurve_recover,assert public_key_b == public_key_a,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_native_to_coincurve_recover,"assert backend_b.ecdsa_verify(message_hash, signature_a, public_key_b)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_coincurve_to_native_invalid_signatures,assert public_key_b == public_key_a,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_public_key_compression_is_equal,assert native_compressed_public_key == coincurve_compressed_public_key,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/backends/test_native_backend_against_coincurve.py,test_public_key_decompression_is_equal,assert native_public_key == coincurve_public_key,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_hash_trie.py,test_keymap_equivalence,assert explicit[key] == composed[key],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_hash_trie.py,test_keymap_equivalence,assert explicit.root_hash == composed.root_hash,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_accesslog.py,test_log_accesses,assert db[key] == b'placeholder',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_accesslog.py,test_log_accesses,assert key in db.keys_read,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
ethereum,trinity,tests/core/task-queue-utils/test_task_queue.py,test_no_asyncio_exception_leaks,assert not pending,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/utilities/test_event_filter_builder.py,test_match_any_string_type_properties,assert len(topic_filter.match_values) == len(values),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/utilities/test_event_filter_builder.py,test_match_any_bytes_type_properties,assert len(topic_filter.match_values) == len(values),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/utilities/test_event_filter_builder.py,test_match_any_bytes_type_properties_strict,assert len(topic_filter.match_values) == len(values),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/p2p/test_select_capabilities.py,test_select_p2p_capabiltiies_fuzzy,assert len(selected_caps) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/p2p/test_select_capabilities.py,test_select_p2p_capabiltiies_fuzzy,assert set(selected_caps).issubset(common_caps),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/p2p/test_select_capabilities.py,test_select_p2p_capabiltiies_fuzzy,assert sorted_caps == selected_caps,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,trinity,tests/p2p/test_select_capabilities.py,test_select_p2p_capabiltiies_fuzzy,assert greatest_common_version == version,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_journal_db.py,test_journal_db_diff_application_mimics_persist,assert MemoryDB({}) == memory_db,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/database/test_journal_db.py,test_journal_db_diff_application_mimics_persist,assert memory_db == diff_test_db,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_topic_filters.py,test_topic_filters_with_dynamic_arguments,assert log_entries[0]['transactionHash'] == txn_hashes[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_topic_filters.py,test_topic_filters_with_fixed_arguments,assert log_entries[0]['transactionHash'] == txn_hashes[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_topic_filters.py,test_topic_filters_with_list_arguments,assert len(log_entries) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_topic_filters.py,test_topic_filters_with_list_arguments,assert log_entries[0]['transactionHash'] == txn_hashes[0],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_topic_filters.py,test_async_topic_filters_with_fixed_arguments,assert log_entries[0]['transactionHash'] == txn_hashes[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_topic_filters.py,test_async_topic_filters_with_list_arguments,assert log_entries[0]['transactionHash'] == txn_hashes[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,eth-keys,tests/core/test_utils_der.py,test_encode_decode_pairings,"assert (end_r, end_s) == (r, s)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_fuzzy_is_valid_opcode,assert is_valid is expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_new_vs_reference_code_stream_iter,assert expected_op == actual_op,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_new_vs_reference_code_stream_iter,assert reference.program_counter == latest.program_counter,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_new_vs_reference_code_stream_iter,assert latest.program_counter == reference.program_counter,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_new_vs_reference_code_stream_read,assert readout_expected == readout_actual,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_new_vs_reference_code_stream_read,assert latest.program_counter == reference.program_counter,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_new_vs_reference_code_stream_read,assert latest.read(1) == reference.read(1),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_new_vs_reference_code_stream_read_during_iter,assert actual == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_new_vs_reference_code_stream_read_during_iter,assert readout_expected == readout_actual,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_new_vs_reference_code_stream_read_during_iter,assert latest.program_counter >= len(reference),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ethereum,py-evm,tests/core/code-stream/test_code_stream.py,test_new_vs_reference_code_stream_read_during_iter,assert latest.program_counter == reference.program_counter,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_data_filters.py,test_data_filters_with_dynamic_arguments,assert log_entries[0]['transactionHash'] == txn_hashes[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_data_filters.py,test_data_filters_with_fixed_arguments,assert log_entries[0]['transactionHash'] == txn_hashes[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_data_filters.py,test_data_filters_with_list_arguments,assert len(log_entries) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_data_filters.py,test_data_filters_with_list_arguments,assert log_entries[0]['transactionHash'] == txn_hashes[0],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_data_filters.py,test_data_filters_with_list_arguments,assert log_entries[1]['transactionHash'] == txn_hashes[2],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_data_filters.py,test_async_data_filters_with_fixed_arguments,assert log_entries[0]['transactionHash'] == txn_hashes[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_data_filters.py,test_async_data_filters_with_list_arguments,assert log_entries[0]['transactionHash'] == txn_hashes[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ethereum,web3.py,tests/core/filtering/test_contract_data_filters.py,test_async_data_filters_with_list_arguments,assert log_entries[1]['transactionHash'] == txn_hashes[2],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,spaCy,spacy/tests/parser/test_nn_beam.py,test_beam_density,assert b.min_density == beam_density,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,spaCy,spacy/tests/parser/test_nn_beam.py,test_beam_density,assert beam_probs[-1] >= beam_probs[0] * beam_density,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
explosion,thinc,thinc/tests/layers/test_linear.py,test_finish_update_calls_optimizer_with_weights,"assert (model.id, name) in seen_keys",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/layers/test_linear.py,test_dropout_gives_zero_activations,assert all((val == 0.0 for val in fwd_dropped.flatten())),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/layers/test_linear.py,test_dropout_gives_zero_gradients,assert all((val == 0.0 for val in grad_BI.flatten())),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_gather_add_against_numpy,"ops.xp.testing.assert_allclose(ops.gather_add(table, indices), table[indices].sum(1), atol=1e-05)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_maxout,assert predicted_best.dtype == dtype,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_maxout,"ops.xp.testing.assert_allclose(expected_best, predicted_best, rtol=0.001, atol=0.001)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_maxout,"ops.xp.testing.assert_allclose(ops.xp.take_along_axis(X, ops.xp.expand_dims(which, -1), axis=-1), ops.xp.expand_dims(expected_best, -1), atol=1e-10)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_seq2col_window_one,"ops.xp.testing.assert_allclose(target, predicted, atol=0.001, rtol=0.001)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_backprop_seq2col_window_one,"ops.xp.testing.assert_allclose(target, predicted, atol=0.001, rtol=0.001)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_backprop_reduce_sum,assert out.dtype == dtype,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_backprop_reduce_sum,"assert out.shape == (sum(lengths), X.shape[1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_backprop_reduce_sum,"ops.xp.testing.assert_allclose(out[start:start + length].sum(axis=0), X[i] * length, rtol=0.01, atol=0.01)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_softmax_sums_to_one,assert 0.99999 <= row.sum() <= 1.0001,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_softmax_works_inplace,assert 0.99999 <= row.sum() <= 1.00001,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_flatten_unflatten_roundtrip,assert flat.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_flatten_unflatten_roundtrip,assert len(flat2) > len(flat),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_mish,assert Y.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_mish,assert not ops.xp.isnan(Y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_relu_k,assert Y.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_relu_k,assert not ops.xp.isnan(Y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_relu_k,assert (Y >= 0).sum() == Y.size,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_relu_k,assert (Y <= 6.0).sum() == Y.size,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_swish,assert Y.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_swish,assert not ops.xp.isnan(Y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_sigmoid,assert Y.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_sigmoid,assert not ops.xp.isnan(Y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_sigmoid,assert (Y >= 0).sum() == Y.size,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_sigmoid,assert (Y <= 1.0).sum() == Y.size,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_tanh,assert Y.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_tanh,assert not ops.xp.isnan(Y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_tanh,assert (Y >= -1.0).sum() == Y.size,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_tanh,assert (Y <= 1.0).sum() == Y.size,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_swish,assert Y.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_swish,assert not ops.xp.isnan(Y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_swish_mobilenet,assert Y.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_hard_swish_mobilenet,assert not ops.xp.isnan(Y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_gelu_approx,assert Y.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_gelu_approx,assert not ops.xp.isnan(Y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_dish,assert Y.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_dish,assert not ops.xp.isnan(Y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_gelu,assert Y.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_gelu,assert not ops.xp.isnan(Y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_backprop_mish,assert dX.shape == X.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,assert x_thinc.dtype == y_thinc.dtype,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,assert y_thinc is not x_thinc,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,assert y_think_inplace is x_thinc,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,"assert ops.xp.isclose(y_thinc, y_think_inplace, atol=1e-06)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,"assert ops.xp.isclose(y_thinc, y.detach(), atol=1e-05)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,assert dx_thinc.dtype == x_thinc.dtype,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,assert dx_thinc is not dY_thinc,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,assert dx_thinc_inplace is dY_thinc_inplace,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,"assert ops.xp.isclose(dx_thinc, dx_thinc_inplace)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,"assert ops.xp.isclose(x_torch.grad.item() * dY, float(dx_thinc), atol=1e-06)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,assert dx_thinc.dtype == x_thinc.dtype,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,"assert ops.xp.isclose(dx_thinc, backward(dY=dY_thinc_inplace, Y=y_thinc, inplace=True))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,"assert ops.xp.isclose(x_torch.grad.item() * dY, float(dx_thinc), atol=1e-06)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,assert dx_thinc.dtype == x_thinc.dtype,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,"assert ops.xp.isclose(dx_thinc, backward(dY=dY_thinc_inplace, X=x_thinc, inplace=True))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_compare_activations_to_torch,"assert ops.xp.isclose(x_torch.grad.item() * dY, float(backward(dY_thinc, X=x_thinc)), atol=1e-06)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_clipped_linear,"assert ops.xp.isclose(ops.clipped_linear(x_thinc, max_val=6.0), ops.relu_k(x_thinc))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_clipped_linear,"assert ops.xp.isclose(ops.backprop_clipped_linear(ops.asarray1f([1.0]), x_thinc, max_val=6.0), ops.backprop_relu_k(ops.asarray1f([1.0]), x_thinc))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_clipped_linear,"assert ops.xp.isclose(ops.clipped_linear(x_thinc, slope=0.2, offset=0.5), ops.hard_sigmoid(x_thinc))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_clipped_linear,"assert ops.xp.isclose(ops.backprop_clipped_linear(ops.asarray1f([1.0]), x_thinc, slope=0.2, offset=0.5), ops.backprop_hard_sigmoid(ops.asarray1f([1.0]), x_thinc))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_to_numpy_byteorder,"assert numpy.array_equal(ops.to_numpy(x), ops.to_numpy(y))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_to_numpy_byteorder,assert y.dtype.newbyteorder('S').newbyteorder('S').byteorder == byte_order,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
explosion,thinc,thinc/tests/backends/test_ops.py,test_to_numpy_byteorder,assert x.dtype.byteorder == y.dtype.byteorder,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
fabiommendes,sidekick,tests/test_hypothesis.py,test_valid_atom,assert x == x,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
fabiommendes,sidekick,tests/test_hypothesis.py,test_identifier,assert not iskeyword(name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
fabiommendes,sidekick,tests/test_hypothesis.py,test_identifier,assert name.isidentifier(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
fabiommendes,sidekick,tests/test_hypothesis.py,test_kwargs,assert not any((iskeyword(key) for key in args)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
fabiommendes,sidekick,tests/test_hypothesis.py,test_kwargs,assert all((key.isidentifier() for key in args)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
fabiommendes,sidekick,tests/test_hypothesis.py,test_kwargs,"assert all((isinstance(v, int) for v in args.values()))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
fabiommendes,sidekick,tests/collections/test_tree.py,test_leaf,"assert isinstance(leaf.value, AtomT)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
fabiommendes,sidekick,tests/collections/test_tree.py,test_leaf,assert leaf.attrs == {},False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
fabiommendes,sidekick,tests/collections/test_tree.py,test_can_render_key,assert tree.parent is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
fabiommendes,sidekick,tests/collections/test_tree.py,test_can_render_key,assert tree.root is tree,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookarchive,tutorials,new_op/sample/add5_op_test.py,test_add5,"self.assertDeviceChecks(dc, op, [data], [0])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookarchive,tutorials,new_op/sample/add5_op_test.py,test_add5,"self.assertGradientChecks(gc, op, [data], 0, [0])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookarchive,tutorials,new_op/sample/add5_op_test.py,test_add5,"self.assertReferenceChecks(gc, op, [data], ref_add5)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/exporters/test/text_model_exporter_test.py,DISABLED_test_doc_export_to_caffe2,"np.testing.assert_array_almost_equal(py_outs.view(-1).detach().numpy(), np.array(c2_out).flatten())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/exporters/test/text_model_exporter_test.py,DISABLED_test_doc_export_to_caffe2_with_logits,"np.testing.assert_array_almost_equal(py_outs.view(-1).detach().numpy(), np.array(c2_out[-1]).flatten())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/exporters/test/text_model_exporter_test.py,DISABLED_test_doc_export_to_caffe2_with_logits,"np.testing.assert_array_almost_equal(py_outs.view(-1).detach().numpy(), np.array(c2_out[:-1]).flatten())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/exporters/test/text_model_exporter_test.py,test_wordblstm_export_to_caffe2,"np.testing.assert_array_almost_equal(torch.transpose(score, 1, 2).contiguous().view(-1).detach().numpy(), np.array(c2_word_out).flatten())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/exporters/test/text_model_exporter_test.py,test_joint_export_to_caffe2,"np.testing.assert_array_almost_equal(d_score.view(-1).detach().numpy(), np.array(c2_doc_out).flatten())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/exporters/test/text_model_exporter_test.py,test_joint_export_to_caffe2,"np.testing.assert_array_almost_equal(torch.transpose(w_score, 1, 2).contiguous().view(-1).detach().numpy(), np.array(c2_word_out).flatten())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/exporters/test/text_model_exporter_test.py,test_seq_nn_export_to_caffe2,"np.testing.assert_array_almost_equal(py_outs.view(-1).detach().numpy(), np.array(c2_out).flatten())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/exporters/test/text_model_exporter_test.py,test_contextual_intent_slot_export_to_caffe2,"np.testing.assert_array_almost_equal(d_score.view(-1).detach().numpy(), np.array(c2_doc_out).flatten())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/exporters/test/text_model_exporter_test.py,test_contextual_intent_slot_export_to_caffe2,"np.testing.assert_array_almost_equal(torch.transpose(w_score, 1, 2).contiguous().view(-1).detach().numpy(), np.array(c2_word_out).flatten())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/models/test/output_layer_test.py,test_torchscript_intent_slot_output_layer,assert 'Implicit dimension choice for log_softmax has been deprecated' not in buffer,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/models/test/crf_test.py,test_crf_forward,"self.assertAlmostEqual(manual_loss, -1 * crf_loss.item(), places=4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/models/test/crf_test.py,test_crf_forward,"self.assertAlmostEqual(total_manual_loss / len(seq_lens), -1 * batched_crf_loss.item(), places=4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/models/test/crf_test.py,test_crf_decode_torchscript,"self.assertTrue(torch.allclose(crf_decode, scripted_crf_decode))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
facebookresearch,pytext,pytext/models/test/crf_test.py,test_crf_decode_torchscript,"self.assertTrue(torch.allclose(crf_batch_decode, scriped_crf_batch_decode))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
faust-streaming,faust,tests/meticulous/assignor/test_copartitioned_assignor.py,test_fresh_assignment,"assert is_valid(new_assignments, partitions, replicas)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
faust-streaming,faust,tests/meticulous/assignor/test_copartitioned_assignor.py,test_add_new_clients,"assert is_valid(new_assignments, partitions, replicas)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
faust-streaming,faust,tests/meticulous/assignor/test_copartitioned_assignor.py,test_add_new_clients,"assert client_addition_sticky(old_assignments, new_assignments)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
faust-streaming,faust,tests/meticulous/assignor/test_copartitioned_assignor.py,test_add_new_clients,assert clients_balanced(new_assignments),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
faust-streaming,faust,tests/meticulous/assignor/test_copartitioned_assignor.py,test_remove_clients,"assert is_valid(new_assignments, partitions, replicas)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
faust-streaming,faust,tests/meticulous/assignor/test_copartitioned_assignor.py,test_remove_clients,"assert client_removal_sticky(old_assignments, new_assignments)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
faust-streaming,faust,tests/meticulous/assignor/test_copartitioned_assignor.py,test_remove_clients,assert clients_balanced(new_assignments),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
faust-streaming,faust,tests/unit/utils/test_json.py,test_str_to_decimal_decimals,assert str_to_decimal(str(x)) == x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ffalcinelli,pydivert,pydivert/tests/test_packet.py,test_fuzz,assert repr(p(raw)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ffalcinelli,pydivert,pydivert/tests/test_packet.py,test_fuzz,assert repr(p(ipv4_hdr + raw)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ffalcinelli,pydivert,pydivert/tests/test_packet.py,test_fuzz,assert repr(p(ipv6_hdr + raw)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
getsentry,sentry-python,tests/utils/test_general.py,test_safe_repr_never_broken_for_strings,"assert isinstance(r, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
getsentry,sentry-python,tests/utils/test_general.py,test_safe_repr_never_broken_for_strings,assert 'broken repr' not in r,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_reader.py,test_balance,"self.assertRaisesRegex(SyntaxError, 'too many `\\)`s|form missing a `\\)`', list, self.reader.reads(lissp))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_compiler.py,test_compile_pickle,"self.assertEqual(form, eval(compiler.Compiler().pickle(form)))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_compiler.py,test_compile_literal,"self.assertEqual(form, eval(compiler.Compiler().atomic(form)))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_munger.py,test_munge_symbol,self.assertTrue(munger.munge(s).isidentifier()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_munger.py,test_un_qz_quote,self.assertTrue(('x' + x).isidentifier()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
gilch,hissp,tests/test_munger.py,test_un_qz_quote,"self.assertEqual(char, munger._qz_decode(match))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cluster.py,test_on_trivial_input,assert fs.n_clusters_ == n_clusters,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cluster.py,test_on_trivial_input,assert fh.n_clusters_ == n_clusters,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cluster.py,test_firstsimplegap,assert unique.shape[0] == n_clusters,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cluster.py,test_firsthistogramgap,assert unique.shape[0] == n_clusters,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cluster.py,test_max_fraction_clusters,assert fs.n_clusters_ <= np.floor(max_num_clusters),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cluster.py,test_max_fraction_clusters,assert fh.n_clusters_ <= np.floor(max_num_clusters),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cluster.py,test_precomputed_distances,assert get_partition_from_preds(preds) == get_partition_from_preds(preds_mat),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_between_zero_and_one,assert error >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_between_zero_and_one,assert error <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_smape_random_arrays,assert expected_error == error,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_between_zero_and_one,assert error >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_between_zero_and_one,assert error <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_smape_random_arrays,assert expected_error == error,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_max_error_random_arrays_finite_values,assert expected_error == error,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_mse_random_arrays_finite_values,assert expected_mse == mse_value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_rmse_random_arrays_finite_values,assert expected_rmse == rmse_value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_log_mse_random_arrays_finite_values,assert expected_log_mse == log_mse_value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_rmsle_random_arrays_finite_values,assert expected_rmsle == rmsle_value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_r_square_random_arrays_finite_values,assert expected_r_square == r_square_value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_mae_random_arrays_finite_values,assert expected_mae == mae_value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_mape_random_arrays_finite_values,assert expected_mape == mape_value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/metrics/tests/test_loss_functions.py,test_gmae_random_arrays_finite_values,assert expected_gmae == gmae_value,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_filter.py,test_eccentricity_shape_equals_number_of_samples,"assert Xt.shape == (len(X), 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_filter.py,test_list_feature_union_drops,"assert x_01_a.shape == (X.shape[0], 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_filter.py,test_list_feature_union_drops,"assert x_01_b.shape == (X.shape[0], 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_input_as_tuples,assert X.shape == shape_X_y[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_input_as_tuples,assert y.shape == shape_X_y[1],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_input_as_tuples,assert len(y.shape) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_input_as_tuples_y_matrix,assert X.shape == shape_X_y[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_input_as_tuples_y_matrix,assert y.shape == shape_X_y[1],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_input_as_tuples_y_matrix,assert len(y.shape) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_min_max_values,assert X.min() >= min_value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_min_max_values,assert y.min() >= min_value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_min_max_values,assert X.max() <= max_value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_min_max_values,assert y.max() <= max_value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_no_nan,assert not np.isnan(X).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_no_nan,assert not np.isnan(y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_no_infinity,assert not np.isinf(X).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_no_infinity,assert not np.isinf(y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_input_as_tuples,assert X.shape == shape,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_min_max_values,assert X.min() >= min_value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_min_max_values,assert X.max() <= max_value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_no_nan,assert not np.isnan(X).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_feature_matrices.py,test_no_infinity,assert not np.isinf(X).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_nerve.py,test_node_intersection,assert not any(disjoint_nodes),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_nerve.py,test_edge_elements,assert graph.vs.indices == graph_edge_elems.vs.indices,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_nerve.py,test_edge_elements,assert graph.vs[attr_name] == graph_edge_elems.vs[attr_name],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_nerve.py,test_edge_elements,assert graph.vs.indices == graph_edge_elems.vs.indices,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_nerve.py,test_edge_elements,assert graph.es.indices == graph_edge_elems.es.indices,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_nerve.py,test_edge_elements,assert graph.es['weight'] == graph_edge_elems.es['weight'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_nerve.py,test_min_intersection,assert all([x >= min_intersection for x in graph.es['weight']]),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_shape_X,assert shape_0[0] <= shape[0] <= shape_0[1],False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_shape_X,assert shape_1[0] <= shape[1] <= shape_1[1],False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_shape_X_y_matrices_y_matrix,assert shape_X[0] == shape_y[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_shape_X_y_matrices_y_matrix,assert 12 <= shape_X[1] <= 34,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_shape_X_y_matrices_y_matrix,assert 1 <= shape_y[1] <= 6,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_shape_X_y_matrices_y_vector,assert shape_X[0] == shape_y[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_shape_X_y_matrices_y_vector,assert 12 <= shape_X[1] <= 34,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_shape_X_y_matrices_y_vector,assert len(shape_y) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_shape_1_X_smaller_shape_0,assert shape_X[0] > shape_X[1],False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_regressors,"assert hasattr(regressor, 'fit')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_general_strategies.py,test_regressors,"assert hasattr(regressor, 'predict')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_str_target_to_feature_dicts,assert len(target_to_feature_dict) == len(targets),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_str_target_to_feature_dicts,assert all([feature in features for feature in target_features]),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_str_target_to_feature_dicts,assert len(set(target_features)) == len(target_features),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_str_target_to_feature_dicts,assert min_features_per_target <= len(target_features) <= max_features_per_target,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_initialize_estimator,"assert estimator == initialize_estimator(estimator, explainer_type=None)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_initialize_estimator_explainable,"assert isinstance(explainable_estimator, ExplainableRegressor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_initialize_estimator_explainable,"assert isinstance(explainable_estimator.explainer, _ShapExplainer)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_predict_has_explainers,assert len(model.estimators_) == y_test.shape[1],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_predict_has_explainers,assert len(estimator.explainer_.explanations_) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_explanations_columns,assert set(explanation.columns).issuperset(set(X_train.columns)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_explanations_columns,assert set(model.explanations_.keys()) == set(y_train.columns),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_fit_as_multi_output_regressor_if_target_to_feature_none,"pd.testing.assert_frame_equal(multi_feature_gar.predict(X_test), gar.predict(X_test))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_fit_target_to_feature_dict_consistent,assert len(estimator_.coef_) == expected_n_features,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_fit_target_to_feature_dict_set_after_consistent,assert len(estimator_.coef_) == expected_n_features,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_correct_fit_date,assert len(predictions) == len(x_test),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_correct_fit_date,"np.testing.assert_array_equal(predictions.index, x_test.index)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_correct_fit_date,assert len(predictions) == len(x_test),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/forecasting/tests/test_gar.py,test_correct_fit_date,"np.testing.assert_array_equal(predictions.index, x_test.index)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cover.py,test_equal_interval_length,"assert np.isclose(np.max(lengths), np.min(lengths), atol=0.5, rtol=1e-08)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cover.py,test_balanced_is_balanced,"assert all([s == nb_in_each_interval for s in np.sum(mask, axis=0)])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cover.py,test_balanced_is_balanced,"assert all([s == 1 for s in np.sum(mask, axis=1)])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cover.py,test_fit_transform_equals_fittransform,"assert np.array_equal(cover.fit_transform(filter_values), cover_clone.fit(filter_values).transform(filter_values))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-tda,gtda/mapper/tests/test_cover.py,test_cubical_fit_transform_consistent_with_1D,"assert np.array_equal(x_one_d, x_cubical)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_constructor,assert len(ar.features) == p,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_constructor,assert ar.horizon == horizon,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_constructor,assert ar.explainer_type == explainer_type,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_constructor,assert ar.model.explainer_type == explainer_type,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_features_are_correct,assert feature[0] == f's{i}',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_features_are_correct,"assert isinstance(feature[1], Shift)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_features_are_correct,assert feature[1].shift == i,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_results,assert predictions.shape[0] == horizon,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_results,assert predictions.shape[1] == horizon,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_fit_no_cache_stores_X_test_and_model,"assert hasattr(time_series_forecasting_model1_no_cache, 'model_')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_fit_no_cache_stores_X_test_and_model,"assert hasattr(time_series_forecasting_model1_no_cache, 'X_test_')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_fit_no_cache_does_not_store_X_train_y_train,"assert not hasattr(time_series_forecasting_model1_no_cache, 'X_train_')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_fit_no_cache_does_not_store_X_train_y_train,"assert not hasattr(time_series_forecasting_model1_no_cache, 'y_train_')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_fit_cache_stores_all_training_params,"assert hasattr(time_series_forecasting_model1_cache, 'model_')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_fit_cache_stores_all_training_params,"assert hasattr(time_series_forecasting_model1_cache, 'X_test_')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_fit_cache_stores_all_training_params,"assert hasattr(time_series_forecasting_model1_cache, 'X_train_')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_fit_cache_stores_all_training_params,"assert hasattr(time_series_forecasting_model1_cache, 'y_train_')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_score_custom,"assert score.shape == (2, 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_score_custom,"assert all(map(lambda x: x >= 0.0, score.iloc[0]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_score_default,"assert score.shape == (1, 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_score_default,"assert all(map(lambda x: x >= 0.0, score.iloc[0]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_score_y_test,"assert score.shape == (1, 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_base.py,test_score_y_test,"assert all(map(lambda x: x >= 0.0, score.iloc[0]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/feature_generation/tests/test_calendar.py,test_correct_index_random_ts,"np.testing.assert_array_equal(Xt.index, ts.index)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_simple_models.py,test_fit_predict,"assert y_pred.shape == (horizon, horizon)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_simple_models.py,test_fit_predict,"testing.assert_frame_equal(y_pred, expected_df)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_simple_models.py,test_fit_predict,assert y_pred.shape[1] == horizon,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_simple_models.py,test_fit_predict,"assert all(y_pred.iloc[:, 0] == y_pred.iloc[:, seasonal_length])",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_simple_models.py,test_fit_predict,"assert y_pred.shape == (horizon, horizon)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_simple_models.py,test_fit_predict,assert pytest.approx(y_pred.diff(axis=1).sum().sum()) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_simple_models.py,test_fit_predict,assert len(y_pred) == horizon,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/model_selection/tests/test_splitters.py,test_transform,"assert X_train.shape[0] == max(0, X.shape[0] - 2 - horizon)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/model_selection/tests/test_splitters.py,test_transform,assert y_train.shape[0] == X_train.shape[0],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/model_selection/tests/test_splitters.py,test_transform,"assert X_test.shape[0] == min(max(0, X.shape[0] - 2), horizon)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/model_selection/tests/test_splitters.py,test_transform,assert y_test.shape[0] == X_test.shape[0],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/model_selection/tests/test_splitters.py,test_horizon_int,assert y_shifted.shape[1] == horizon,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/model_selection/tests/test_splitters.py,test_horizon_int,"assert time_series.iloc[i, 0] == y_shifted.iloc[0, i - 1]",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/model_selection/tests/test_splitters.py,test_horizon_list,assert y_shifted.shape[1] == len(horizon),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/model_selection/tests/test_splitters.py,test_horizon_list,"assert time_series.iloc[elem, 0] == y_shifted.iloc[0, i]",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test_week_of_year,"assert re.match('\\d{4}_\\d\\d?$', week)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test__get_cycle_names_size,assert len(cycle) == len(df),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test__get_season_names_size,assert len(seasons) == len(df),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test_seasonal_split_shape_named,assert split.stack().shape == df.resample(freq).agg(agg).dropna().shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test_autocorrelation,"np.testing.assert_array_equal(autocorr, expected)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test_scale,assert scaled_x.mean() == pytest.approx(0.0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test_scale,assert scaled_x.std() == pytest.approx(1.0) or scaled_x.std() == pytest.approx(0.0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test_solve_yw,assert len(rho) == len(x) - 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test_yule_walker_abs,assert all(abs(pacf) <= 2),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test_acf_len,"assert len(res) == min(max_lag, len(df))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/plotting/tests/test_preprocessing.py,test_pacf_len,"assert len(res) == min(max_lag, len(df))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_cv_pipeline.py,test_constructor,assert list_len == len(cv_pipeline.model_list),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/time_series_models/tests/test_cv_pipeline.py,test_constructor,assert len(metrics) == len(cv_pipeline.metrics),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_linear_regressor.py,test_linear_regressor_random_array,"np.testing.assert_array_almost_equal(predictions, expected, decimal=0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_indexes_is_period,"assert isinstance(index, pd.PeriodIndex)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_indexes_size,assert 10 <= len(index) <= 1000,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_indexes_size_fixed_value,assert len(index) == 10,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_indexes_size_fixed_value_0,assert len(index) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_indexes_boundaries,assert index[0].to_timestamp() >= start_datetime,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_indexes_boundaries,assert index[-1].to_timestamp() <= end_datetime,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_series_has_period_index,"assert isinstance(series.index, pd.PeriodIndex)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_series_size,assert 10 <= len(series.index) <= 1000,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_series_size_fixed_value,assert len(series.index) == 10,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_series_size_fixed_value_0,assert len(series.index) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_series_boundaries,assert series.index[0].to_timestamp() >= start_datetime,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_period_series_boundaries,assert series.index[-1].to_timestamp() <= end_datetime,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_indexes_is_datetime,"assert isinstance(index, pd.DatetimeIndex)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_indexes_size,assert 30 <= len(index) <= 1000,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_indexes_size_fixed_value,assert len(index) == 30,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_indexes_size_fixed_value_0,assert len(index) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_indexes_boundaries,assert index[0] >= start_datetime,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_indexes_boundaries,assert index[-1] <= end_datetime,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_series_has_datetime_index,"assert isinstance(series.index, pd.DatetimeIndex)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_series_size,assert 40 <= len(series.index) <= 1000,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_series_size_fixed_value,assert len(series.index) == 40,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_series_size_fixed_value_0,assert len(series.index) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_series_boundaries,assert series.index[0] >= start_datetime,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_datetime_series_boundaries,assert series.index[-1] <= end_datetime,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_indexes_is_timedelta,"assert isinstance(index, pd.TimedeltaIndex)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_indexes_size,assert 30 <= len(index) <= 1000,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_indexes_size_fixed_value,assert len(index) == 30,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_indexes_size_fixed_value_0,assert len(index) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_indexes_boundaries,assert index[0] >= start_timedelta,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_indexes_boundaries,assert index[-1] <= end_timedelta,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_series_has_timedelta_index,"assert isinstance(series.index, pd.TimedeltaIndex)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_series_size,assert 15 <= len(series.index) <= 1000,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_series_size_fixed_value,assert len(series.index) == 15,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_series_size_fixed_value_0,assert len(series.index) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_series_boundaries,assert series.index[0] >= start_timedelta,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_timedelta_series_boundaries,assert series.index[-1] <= end_timedelta,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_available_freqs_is_timedelta,"assert isinstance(frequency, pd.Timedelta)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_positive_bounded_integers_is_positive,assert integer >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_pair_of_ordered_timedeltas_is_ordered,assert pair[0] < pair[1],False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/utils/hypothesis/tests/test_time_indexes.py,test_pair_of_ordered_dates_is_ordered,assert pair[0] < pair[1],False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_explainable.py,test_bad_regressors,"assert hasattr(bad_regressor, 'fit')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_explainable.py,test_bad_regressors,"assert not hasattr(bad_regressor, 'predict')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_explainable.py,test_constructor,"assert isinstance(regressor.explainer, _LimeExplainer)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_explainable.py,test_constructor,"assert isinstance(regressor.explainer, _ShapExplainer)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_explainable.py,test_fit_values,"np.testing.assert_array_equal(estimator_fit_attributes, cloned_estimator_fit_attributes)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_explainable.py,test_predict_values,assert regressor_predictions.shape == estimator_predictions.shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_explainable.py,test_predict_values,assert regressor_predictions.shape[0] == len(regressor.explanations_),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/explainability/tests/test_explainer.py,test_models,"assert hasattr(regressor, 'fit')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/explainability/tests/test_explainer.py,test_models,"assert hasattr(regressor, 'predict')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/explainability/tests/test_explainer.py,test_fit_no_feature_names,"np.testing.assert_array_equal(explainer.feature_names_, [f'{i}' for i in range(X.shape[1])])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_multi_output.py,test_numeric_target_to_features_dicts,assert len(target_to_features_dict) == n_targets,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_multi_output.py,test_numeric_target_to_features_dicts,assert max(features) < n_features,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_multi_output.py,test_numeric_target_to_features_dicts,assert min(features) >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_multi_output.py,test_numeric_target_to_features_dicts,assert len(set(features)) == len(features),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_multi_output.py,test_numeric_target_to_features_dicts,assert min_features_per_target <= len(features) <= max_features_per_target,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
giotto-ai,giotto-time,gtime/regressors/tests/test_multi_output.py,test_fit_target_to_features_dict_consistent,assert len(estimator_.coef_) == expected_n_features,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
glue-viz,glue,glue/utils/tests/test_array.py,test_combine_slices_hypot,assert actual == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
google,python-fire,fire/parser_fuzz_test.py,testDefaultParseValueFuzz,"self.assertLessEqual(distance, max_distance, (distance, max_distance, uvalue, uresult))",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
google,caliban,tests/caliban/config/test_config.py,test_expand_image,assert c.expand_image(s) == c.DLVM_CONFIG[s],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/config/test_config.py,test_expand_image,assert c.expand_image(s) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_user_verify,"self.assertEqual(util.user_verify('test default', default=default), default)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_user_verify,"self.assertTrue(util.user_verify('y input', default=default))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_user_verify,"self.assertFalse(util.user_verify('n input', default=default))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_trap,"self.assertEqual(return_val, _test_raises())",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_wait_for_operation,"self.assertIsNone(util.wait_for_operation(api, 'name', list(conds), 0, spinner=False))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_wait_for_operation,"self.assertEqual({'status': expected_response}, util.wait_for_operation(api, 'name', list(conds), 0, spinner=True))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_wait_for_operation,"self.assertIsNone(util.wait_for_operation(api, 'name', list(conds), 0, spinner=False))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_get_zone_tpu_types,"self.assertEqual(sorted(tpus), sorted(['{}-{}'.format(x.name.lower(), x.count) for x in util.get_zone_tpu_types(api, 'p', 'z')]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_sanitize_job_name,"self.assertEqual(job_name, sanitized)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_sanitize_job_name,self.assertTrue(valid(sanitized)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_sanitize_job_name,"self.assertEqual(sanitized, util.sanitize_job_name(sanitized))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_sanitize_job_name,assert valid(util.sanitize_job_name(x)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_get_zone_gpu_types,"self.assertEqual(sorted(['{}-{}'.format(x['name'], x['maximumCardsPerInstance']) for x in gpus]), sorted(['nvidia-tesla-{}-{}'.format(x.gpu.name.lower(), x.count) for x in util.get_zone_gpu_types(api, 'p', 'z')]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_get_gke_cluster,"self.assertEqual(cname, util.get_gke_cluster(api, cname, 'p').name)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_get_gke_cluster,"self.assertIsNone(util.get_gke_cluster(api, invalid, 'p'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_get_zones_in_region,"self.assertIsNone(util.get_zones_in_region(api, 'p', region))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_get_zones_in_region,"self.assertIsNone(util.get_zones_in_region(api, 'p', region))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/gke/test_util.py,test_get_zones_in_region,"self.assertEqual(zones, util.get_zones_in_region(api, 'p', region))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_enum_vals,assert list(m.values()) == u.enum_vals(enum),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_any_of,"assert u.any_of(v, union) == enum1(v)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_any_of,"assert u.any_of(v, union) == expected",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_merge,assert merged[k] == v,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_merge,"assert merged[k] == m2.get(k, v)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_flipm,assert m == u.flipm(u.flipm(m)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_flipm_empty_values,assert {} == u.flipm(m),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_reorderm,"assert u.reorderm(m, (0, 2, 1)) == invert_inner(m)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_reorderm,"assert u.reorderm(m, (1, 0, 2)) == flipped",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_reorderm,"assert u.reorderm(m, (1, 2, 0)) == invert_inner(flipped)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_reorderm,"assert u.reorderm(m, (2, 1, 0)) == u.flipm(invert_inner(flipped))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_invertm,assert m == u.invertm(u.invertm(m)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_dict_by,assert len(k) == v,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_dict_by,assert set(m.keys()) == xs,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_n_chunks,"assert u.n_chunks(xs, len(xs)) == singletons",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_n_chunks,"assert u.n_chunks(xs, 1) == [xs]",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_n_chunks,assert len(recombined) == len(xs),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_n_chunks,assert set(xs) == set(recombined),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_partition_first_items,assert rt == xs,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_partition_by_one_gives_singletons,assert singletons == [[x] for x in xs],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/util/test_util.py,test_partition_by_big_gives_singleton,assert one_entry == [xs],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/cloud/test_types.py,test_validate_accelerator_count,"self.assertEqual(i, ct.validate_accelerator_count(accel, i))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
google,caliban,tests/caliban/platform/cloud/test_util.py,test_sanitize_labels_second_noop,assert once == twice,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
harvardnlp,cascaded-generation,genbmm/genbmm/test_sparse.py,test_sparse,assert plus.lu == banded.lu,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
harvardnlp,cascaded-generation,genbmm/genbmm/test_sparse.py,test_sparse,assert plus.ld == banded.ld,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
harvardnlp,cascaded-generation,genbmm/genbmm/test_sparse.py,test_sparse,"assert plus.lu == max(banded.lu, banded.ld)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
harvardnlp,cascaded-generation,genbmm/genbmm/test_sparse.py,test_sparse,"assert plus.ld == max(banded.lu, banded.ld)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
hchasestevens,hypothesis-protobuf,tests/unit/test_module_conversion.py,test_sfixed_values_are_in_range,assert -(1 << 31) <= sfixed.sfixed32 <= (1 << 31) - 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
hchasestevens,hypothesis-protobuf,tests/unit/test_module_conversion.py,test_sfixed_values_are_in_range,assert -(1 << 63) <= sfixed.sfixed64 <= (1 << 63) - 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/test_cx.py,test_point_cx_selection,assert all(expected == result),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/test_cx.py,test_multipoint_cx_selection,assert all(expected == result),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/test_cx.py,test_line_cx_selection,assert all(expected == result),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/test_cx.py,test_multiline_cx_selection,assert all(expected == result),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/test_cx.py,test_polygon_cx_selection,assert all(expected == result),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/test_cx.py,test_multipolygon_cx_selection,assert all(expected == result),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_point,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_point,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_point,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_point,"pd.testing.assert_series_equal(points_series.intersects(point), pd.Series(expected, index=points_series.index))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_point_offset,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_point_offset,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multipoint,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multipoint,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multipoint,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multipoint,"pd.testing.assert_series_equal(points_series.intersects(multipoint), pd.Series(expected, index=points_series.index))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_line,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_line,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_line,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_line,"pd.testing.assert_series_equal(points_series.intersects(line), pd.Series(expected, index=points_series.index))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multiline,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multiline,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multiline,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multiline,"pd.testing.assert_series_equal(points_series.intersects(multiline), pd.Series(expected, index=points_series.index))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_polygon,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_polygon,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_polygon,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_polygon,"pd.testing.assert_series_equal(points_series.intersects(polygon), pd.Series(expected, index=points_series.index))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multipolygon,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multipolygon,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multipolygon,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/intersection/test_point_intersection.py,test_points_intersects_multipolygon,"pd.testing.assert_series_equal(points_series.intersects(multipolygon), pd.Series(expected, index=points_series.index))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_measures.py,test_polygon_area,"np.testing.assert_allclose(area, expected_area)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_measures.py,test_multipolygon_area,"np.testing.assert_allclose(area, expected_area)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_parquet,"assert isinstance(df_read, GeoDataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_parquet,"pd.testing.assert_frame_equal(df, df_read)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_parquet,assert df_read.index.name == df.index.name,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_parquet_columns,"assert isinstance(df_read, GeoDataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_parquet_columns,"pd.testing.assert_frame_equal(df[columns], df_read)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_parquet_dask,"assert isinstance(ddf_read, DaskGeoDataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_parquet_dask,"assert set(ddf_read._partition_bounds) == {'points', 'lines'}",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_parquet_dask,"pd.testing.assert_frame_equal(expected_partition_bounds, ddf_read._partition_bounds['points'])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_parquet_dask,"pd.testing.assert_frame_equal(expected_partition_bounds, ddf_read._partition_bounds['lines'])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_parquet_dask,assert ddf_read.geometry.name == 'points',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions,assert ddf_packed.npartitions == 4,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions,"np.testing.assert_equal(expected_distances, hilbert_distances)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet,assert ddf_packed.npartitions <= 12,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet,"np.testing.assert_equal(expected_distances, hilbert_distances)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet,assert ddf_packed.geometry.name == 'points',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet,"pd.testing.assert_frame_equal(ddf_read_cols.compute(), ddf_packed[columns].compute())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet_glob,"pd.testing.assert_frame_equal(df_globbed, expected_df)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet_glob,"pd.testing.assert_frame_equal(expected_bounds['points'], ddf_globbed._partition_bounds['points'])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet_glob,"pd.testing.assert_frame_equal(expected_bounds['lines'], ddf_globbed._partition_bounds['lines'])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet_list_bounds,assert ddf_read.npartitions <= 7,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet_list_bounds,"pd.testing.assert_frame_equal(df_read, expected_df)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet_list_bounds,"pd.testing.assert_frame_equal(points_bounds, ddf_read._partition_bounds['points'])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet_list_bounds,"pd.testing.assert_frame_equal(lines_bounds, ddf_read._partition_bounds['lines'])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/test_parquet.py,test_pack_partitions_to_parquet_list_bounds,assert ddf_read.geometry.name == 'points',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/tools/test_sjoin.py,test_sjoin,"assert isinstance(result, GeoDataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/tools/test_sjoin.py,test_sjoin,assert len(result) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/tools/test_sjoin.py,test_sjoin,"pd.testing.assert_frame_equal(expected, result)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/tools/test_sjoin.py,test_sjoin,"assert isinstance(result_ddf, DaskGeoDataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/tools/test_sjoin.py,test_sjoin,assert result_ddf.npartitions <= 4,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/tools/test_sjoin.py,test_sjoin,"pd.testing.assert_frame_equal(expected, result)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_bounds_generation,assert len(bounds) % 2 == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_bounds_generation,assert bounds[d + n] >= bounds[d],False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_bounds_array_generation,assert bounds_array.shape[1] % 2 == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_bounds_array_generation,"assert np.all(bounds_array[:, d + n] >= bounds_array[:, d])",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_intersects_input_bounds,assert i in intersected,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_intersects_input_bounds,"assert intersected == intersects_bruteforce(b, bounds_array)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_empty,assert set(rt.intersects(query_bounds)) == set(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_empty,assert set(covers) == set(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_empty,assert set(overlaps) == set(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_empty,"assert rt.total_bounds == (np.nan,) * (2 * n)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_intersects_different_bounds_2d,"assert intersected == intersects_bruteforce(b, bounds_array)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_intersects_all,assert intersected == set(range(bounds_array.shape[0])),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_intersects_none,assert intersected == set(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_covers_overlaps_input_bounds,assert covers.isdisjoint(overlaps),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_covers_overlaps_input_bounds,assert covers == all_covers,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_covers_overlaps_input_bounds,assert intersects == covers.union(overlaps),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_pickle,"assert isinstance(rt2, HilbertRtree)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_rtree.py,test_rtree_pickle,assert rt_result == rt2_result and rt_result == rt3_result,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_segment_intersects_point,assert result1 == result2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_segment_intersects_point,assert result1 == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_segment_intersection,assert result1 == result2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_segment_intersection,assert result1 == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_point_intersects_polygon,assert expected == result,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_point_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_point_intersects_rect,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_point_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_multipoint_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_multipoint_intersects_rect,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_multipoint_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_line_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_line_intersects_rect,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_line_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_multiline_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_multiline_intersects_rect,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_multiline_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_polygon_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_polygon_intersects_rect,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_polygon_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_multipolygon_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_multipolygon_intersects_rect,"np.testing.assert_equal(result, np.flipud(expected))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_intersection.py,test_multipolygon_intersects_rect,"np.testing.assert_equal(result, expected)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/geometry/algorithms/test_orientation.py,test_triangle_orientation,assert result == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_hilbert_curve.py,test_coordinates_from_distance,assert scalar_result == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_hilbert_curve.py,test_coordinates_from_distance,"assert tuple(vector_result[i, :]) == expected",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_hilbert_curve.py,test_distance_from_coordinates,assert scalar_result == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holoviz,spatialpandas,spatialpandas/tests/spatialindex/test_hilbert_curve.py,test_distance_from_coordinates,assert vector_result[i] == expected,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_offsets_properties.py,test_on_offset_implementations,assert offset.onOffset(dt) == (compare == dt),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[0] == rng[0] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[-1] == rng[-1] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[0] == ser.iloc[0] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[-1] == ser.iloc[-1] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/quandl_requirements/cryptography-2.7/tests/hypothesis/test_padding.py,test_pkcs7,assert unpadder.update(padded) + unpadder.finalize() == data,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/quandl_requirements/cryptography-2.7/tests/hypothesis/test_padding.py,test_ansix923,assert unpadder.update(padded) + unpadder.finalize() == data,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left + right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left.apply(right) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left - right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left != right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left == right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left == right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left != right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
holzschu,python3_ios,extraPackages/pandas-0.24.2/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert cls(n) != cls(-n),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
holzschu,python3_ios,extraPackages/quandl_requirements/cryptography-2.7/tests/hypothesis/test_fernet.py,test_fernet,assert f.decrypt(ct) == data,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
hwayne,tlacli,tests/test_cfg.py,test_merge_additive_invariants,assert out.invariants == f.invariants | g.invariants,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
hwayne,tlacli,tests/test_cfg.py,test_merge_additive_invariants,assert out.properties == f.properties | g.properties,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
hwayne,tlacli,tests/test_cfg.py,test_merge_uses_right_constants,assert c not in f.constants.keys() and g.constants[c] == val or f.constants[c] == val,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False
hwayne,tlacli,tests/test_cfg.py,test_identity,assert f.merge(CFG()) == f,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
hwayne,tlacli,tests/test_cfg.py,test_identity,assert CFG().merge(f) == f,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
hynek,argon2-cffi,tests/test_utils.py,test_decoded_str_len,assert len(bs) == _decoded_str_len(len(b64encode(bs).rstrip(b'='))),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
hynek,argon2-cffi,tests/test_low_level.py,test_argument_ranges,"assert verify_secret(hash, password, Type.I)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ics-py,ics-py,tests/valuetype/text.py,test_any_text_value_recode,assert TextConverter.parse(esc) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ics-py,ics-py,tests/valuetype/text.py,test_any_text_value_recode,assert parse_contentline(cl.serialize()) == cl,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
ics-py,ics-py,tests/valuetype/text.py,test_any_text_value_recode,assert list(string_to_containers(cl.serialize())) == [cl],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ics-py,ics-py,tests/valuetype/text.py,test_any_text_value_recode,assert list(TextConverter.split_value_list(cl2.value)) == vals,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ics-py,ics-py,tests/valuetype/text.py,test_any_text_value_recode,assert parse_contentline(cl.serialize()) == cl,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
ics-py,ics-py,tests/valuetype/text.py,test_any_text_value_recode,assert list(string_to_containers(cl.serialize())) == [cl],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_hooks.py,test_contains,"assert isinstance(added, type(container))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_hooks.py,test_contains,assert item in added,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_hooks.py,test_contains,"assert isinstance(removed, type(container))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_hooks.py,test_contains,assert item not in removed,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_typeclass_laws.py,test_monoid_law_associativity,"assert add(add(m1, m1), m1) == add(m1, add(m1, m1))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_typeclass_laws.py,test_monoid_law_left_identity,"assert tc.mappend(tc.mempty(m), m) == m",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_typeclass_laws.py,test_monoid_law_right_identity,"assert tc.mappend(m, tc.mempty(m)) == m",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_typeclass_laws.py,test_functor_law_identity,"assert tc.fmap(data, identity) == identity(data)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_typeclass_laws.py,test_functor_law_distributive,"assert tc.fmap(functor, composed) == tc.fmap(tc.fmap(functor, f2), f1)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_typeclass_laws.py,test_applicative_law_identity,"assert tc.apply(data, tc.pure(data, identity)) == data",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_typeclass_laws.py,test_applicative_law_homomorphism,assert left == right,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_typeclass_laws.py,test_applicative_law_interchange,assert left == right,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ingolemo,python-lenses,tests/test_typeclass_laws.py,test_applicative_law_composition,assert left == right,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_parent_of_child,"self.assertEqual(base_task, child_task.parent())",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_child_greater_than_parent,"self.assert_fully_less_than(task, task.child())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_next_sibling_greater,"self.assert_fully_less_than(task, task.next_sibling())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_next_sibling,"self.assertEqual(sibling, TaskLevel(level=task_level[:-1] + [task_level[-1] + 1]))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_from_single_start_message,"self.assertThat(action, MatchesStructure.byEquality(status=STARTED_STATUS, action_type=message.contents[ACTION_TYPE_FIELD], task_uuid=message.task_uuid, task_level=message.task_level.parent(), start_time=message.timestamp, children=pvector([]), end_time=None, reason=None, exception=None))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_from_single_end_message,"self.assertThat(action, MatchesStructure.byEquality(status=SUCCEEDED_STATUS, action_type=end_message.contents[ACTION_TYPE_FIELD], task_uuid=end_message.task_uuid, task_level=end_message.task_level.parent(), start_time=None, children=pvector([]), end_time=end_message.timestamp, reason=None, exception=None))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_from_single_child_message,"self.assertThat(action, MatchesStructure.byEquality(status=None, action_type=None, task_uuid=message.task_uuid, task_level=message.task_level.parent(), start_time=None, children=pvector([message]), end_time=None, reason=None, exception=None))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_different_task_uuid,"self.assertRaises(WrongTask, WrittenAction.from_messages, start_message, end_message=end_message)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
itamarst,eliot,eliot/tests/test_action.py,test_invalid_start_message_missing_status,"self.assertRaises(InvalidStartMessage, WrittenAction.from_messages, message)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
itamarst,eliot,eliot/tests/test_action.py,test_invalid_start_message_wrong_status,"self.assertRaises(InvalidStartMessage, WrittenAction.from_messages, message)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
itamarst,eliot,eliot/tests/test_action.py,test_invalid_task_level_in_start_message,"self.assertRaises(InvalidStartMessage, WrittenAction.from_messages, message)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
itamarst,eliot,eliot/tests/test_action.py,test_action_type_mismatch,"self.assertRaises(WrongActionType, WrittenAction.from_messages, start_message, end_message=end_message)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
itamarst,eliot,eliot/tests/test_action.py,test_successful_end,"self.assertThat(action, MatchesStructure.byEquality(action_type=start_message.contents[ACTION_TYPE_FIELD], status=SUCCEEDED_STATUS, task_uuid=start_message.task_uuid, task_level=start_message.task_level.parent(), start_time=start_message.timestamp, children=pvector([]), end_time=end_message.timestamp, reason=None, exception=None))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_failed_end,"self.assertThat(action, MatchesStructure.byEquality(action_type=start_message.contents[ACTION_TYPE_FIELD], status=FAILED_STATUS, task_uuid=start_message.task_uuid, task_level=start_message.task_level.parent(), start_time=start_message.timestamp, children=pvector([]), end_time=end_message.timestamp, reason=reason, exception=exception))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_end_has_no_status,"self.assertRaises(InvalidStatus, WrittenAction.from_messages, start_message, end_message=end_message)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
itamarst,eliot,eliot/tests/test_action.py,test_children,"self.assertEqual(sorted(messages, key=task_level), action.children)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_action.py,test_wrong_task_uuid,"self.assertRaises(WrongTask, WrittenAction.from_messages, start_message, v(message))",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
itamarst,eliot,eliot/tests/test_action.py,test_wrong_task_level,"self.assertRaises(WrongTaskLevel, WrittenAction.from_messages, start_message, v(message))",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
itamarst,eliot,eliot/tests/test_action.py,test_duplicate_task_level,"self.assertRaises(DuplicateChild, WrittenAction.from_messages, start_message, messages)",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
itamarst,eliot,eliot/tests/test_parse.py,test_missing_action,"self.assertEqual(parsed_structure, action_structure)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_parse.py,test_parse_from_random_order,"self.assertEqual(parsed_structure, action_structure)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_parse.py,test_is_complete,"self.assertEqual(completed, [False for m in messages[:-1]] + [True])",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_parse.py,test_parse_into_tasks,"self.assertCountEqual(all_tasks, [parse_to_task(msgs) for msgs in all_messages])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_parse.py,test_incomplete_tasks,"self.assertEqual(dict(incomplete_matches=incomplete_matches, final_incompleted=parser.incomplete_tasks()), dict(incomplete_matches=[True] * (len(messages) - 1), final_incompleted=[]))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
itamarst,eliot,eliot/tests/test_parse.py,test_parse_stream,"self.assertCountEqual(all_tasks, [parse_to_task(msgs) for msgs in all_messages])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
janfreyberg,superintendent,tests/test_feature_conversion.py,test_list_round_trip,"assert exact_element_match(inp, features_to_array(inp))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
janfreyberg,superintendent,tests/test_feature_conversion.py,test_array_round_trip,"assert exact_element_match(inp, features_to_array(inp_list))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
janfreyberg,superintendent,tests/test_feature_conversion.py,test_df_round_trip,"assert exact_element_match(inp, features_to_array(inp_list))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
janfreyberg,superintendent,tests/test_feature_conversion.py,test_dfs_round_trip,"assert exact_element_match(inp, features_to_array(inp_list))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_forward,"assert log_probs.shape == (batch_dim,)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_forward,assert torch.all(log_probs.isfinite()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_forward,assert log_probs.is_floating_point(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_forward,assert input_dim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_forward,"assert torch.allclose(log_probs, 0.0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_forward,"assert allcloseish(log_probs, old_log_probs)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_valid_binary_probs,"assert allcloseish(log_probs.logsumexp(dim=0), 0.0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_backward,assert len(old_params) == len(new_params),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_backward,assert all((p.grad is not None for p in new_params)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_backward,assert old_p.shape == new_p.shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_backward,assert torch.all(old_p.isfinite()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_backward,assert torch.all(new_p.isfinite()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_backward,"assert allcloseish(old_p, new_p, tol=0.001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_model_backward,assert param_diff,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_prob_mps.py,test_trivial_embedding,"assert torch.allclose(normal_output, embed_output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_utils2.py,test_batch_broadcast_var_batch,assert tuple(tensor1.shape) == tuple(out_batch + nonbatch1),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_utils2.py,test_batch_broadcast_var_batch,assert tuple(tensor2.shape) == tuple(out_batch + nonbatch2),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_mps_base.py,test_contract_matseq_identity_batches,"assert torch.equal(lib_result, lib_result2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_mps_base.py,test_contract_matseq_identity_batches,"assert torch.allclose(lib_result, naive_result)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_mps_base.py,test_contract_matseq_random_inhom_bonddim,assert (lib_result - naive_result).norm() < 1e-05,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_mps_base.py,test_contract_functions_stable,"assert allcloseish(log_val1, correct_log_val)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_mps_base.py,test_contract_functions_stable,"assert allcloseish(log_val2, correct_log_val + log_scalar)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jemisjoky,TorchMPS,torchmps/tests/test_mps_base.py,test_contract_functions_stable,"assert allcloseish(log_val3, correct_log_val + log_scalar)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_offsets_properties.py,test_on_offset_implementations,assert offset.onOffset(dt) == (compare == dt),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[0] == rng[0] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[-1] == rng[-1] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[0] == ser.iloc[0] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[-1] == ser.iloc[-1] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left + right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left.apply(right) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left - right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left != right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left == right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left == right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left != right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jgagneastro,coffeegrindsize,App/dist/coffeegrindsize.app/Contents/Resources/lib/python3.7/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert cls(n) != cls(-n),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
jmespath,jmespath.py,extra/test_hypothesis.py,test_lexer_api,"assert isinstance(tokens, list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_lexer_api,"assert len(set(start_locations)) == len(start_locations), 'Tokens must have unique starting locations.'",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_lexer_api,"assert sorted(start_locations) == start_locations, 'Tokens must have increasing start locations.'",False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_lexer_api,assert tokens[-1]['type'] == 'eof',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_parser_api_from_str,"assert isinstance(ast.parsed, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_parser_api_from_str,assert 'type' in ast.parsed,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_parser_api_from_str,assert 'children' in ast.parsed,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_parser_api_from_str,"assert isinstance(ast.parsed['children'], list)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_abs,"assert Functions().call_function('abs', [arg]) >= 0",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_avg,"assert isinstance(result, numbers.Number)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_not_null,assert result in arg,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
jmespath,jmespath.py,extra/test_hypothesis.py,test_to_number,"assert isinstance(result, numbers.Number)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ecdf_formal,"assert np.allclose(dcst.ecdf_formal(x, data), correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ecdf,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ecdf,"assert np.allclose(y, y_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_swap_random,assert len(a_out) == len(b_out) == len(a) == len(b),False,True,False,True,True,False,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_swap_random,"assert np.allclose(ab, ab_out, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_swap_random,assert ab[0] in ab_out,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_swap_random,assert ab[1] in ab_out,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_bootstrap_replicate_1d,"assert np.isnan(x) and np.isnan(x_correct, atol=atol, equal_nan=True) or np.isclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_bootstrap_replicate_1d,"assert np.isnan(x) and np.isnan(x_correct, atol=atol, equal_nan=True) or np.isclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_bootstrap_replicate_1d,"assert np.isnan(x) and np.isnan(x_correct, atol=atol, equal_nan=True) or np.isclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps_not_numbaable,assert not numba_success,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_reps_not_numbaable,"assert np.allclose(x, x_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_bs_pairs,"assert np.allclose(bs_reps, bs_reps_correct, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_permutation_sample,"assert np.allclose(x_correct, x, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_permutation_sample,"assert np.allclose(y_correct, y, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_permutation_sample,"assert np.allclose(np.sort(np.concatenate((data_1, data_2))), np.sort(np.concatenate((x, y))), atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_perm_reps,"assert np.allclose(x_correct, x, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_perm_reps,"assert np.allclose(x_correct, x, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_perm_reps,"assert np.allclose(x_correct, x, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_draw_perm_reps,"assert np.allclose(x_correct, x, atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_diff_of_means,"assert np.allclose(dcst.diff_of_means(data_1, data_2), np.mean(data_1) - np.mean(data_2), atol=atol, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_studentized_diff_of_means,"assert np.isnan(dcst.studentized_diff_of_means(data_1, data_2))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_studentized_diff_of_means,"assert np.isclose(dcst.studentized_diff_of_means(data_1, data_2), t)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_pearson_r,"assert np.isnan(dcst.pearson_r(x, y))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_pearson_r,"assert np.isclose(dcst.pearson_r(x, y), original.pearson_r(x, y))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_pearson_r,"assert np.isclose(dcst.pearson_r(x, y), np.corrcoef(x, y)[0, 1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ks_stat,"assert np.isclose(dcst.ks_stat(x, theor_data), correct)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ks_stat,"assert np.isclose(dcst.ks_stat(x, theor_data), correct)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_ks_stat,"assert np.isclose(dcst.ks_stat(x, theor_data), correct)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data,"assert np.allclose(data, dcst_private._convert_data(data), atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data,"assert np.allclose(data, dcst_private._convert_data(df.loc[:, 'test']), atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data,"assert np.allclose(data, dcst_private._convert_data(s), atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data_scalar,assert type(conv_data) == np.ndarray,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data_scalar,assert len(conv_data) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_data_scalar,"assert np.isclose(conv_data[0], data, atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_two_data,"assert np.allclose(x, x_correct, atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_two_data,"assert np.allclose(y, y_correct, atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_two_data,"assert np.allclose(x, x_correct, atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
justinbois,dc_stat_think,tests/test_dc_stat_think.py,test_convert_two_data,"assert np.allclose(y, y_correct, atol=atol)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
knowsuchagency,orkestra,tests/unit/test_map_job.py,test_times_3,"assert times_3(n, generic_context) == n * 3",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
knowsuchagency,orkestra,tests/unit/test_map_job.py,test_sum_up,"assert sum_up(numbers, generic_context) == sum(numbers)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
knowsuchagency,orkestra,tests/unit/test_map_job.py,test_division_error_filter,assert result == event,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
knowsuchagency,orkestra,tests/unit/test_map_job.py,test_division_error_filter,assert result == 0.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
kragniz,python-etcd3,tests/test_etcd3.py,test_get_key,assert returned == string.encode('utf-8'),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
kragniz,python-etcd3,tests/test_etcd3.py,test_get_random_key,assert returned == b'dootdoot',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
kragniz,python-etcd3,tests/test_etcd3.py,test_get_key_serializable,assert returned == string.encode('utf-8'),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
kragniz,python-etcd3,tests/test_etcd3.py,test_get_have_cluster_revision,assert md.response_header.revision > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
kragniz,python-etcd3,tests/test_etcd3.py,test_put_key,assert base64.b64decode(out['kvs'][0]['value']) == string.encode('utf-8'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
kragniz,python-etcd3,tests/test_etcd3.py,test_put_has_cluster_revision,assert response.header.revision > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
kragniz,python-etcd3,tests/test_etcd3.py,test_put_has_prev_kv,assert response.prev_kv.value == b'old_value',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
kragniz,python-etcd3,tests/test_etcd3.py,test_put_if_not_exists,assert txn_status is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
kragniz,python-etcd3,tests/test_etcd3.py,test_put_if_not_exists,assert txn_status is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
leapfrogonline,ansible-merge-vars,tests/property/test_merge_vars_properties.py,test_merge_lists_no_dedup,"self.assertEqual(merged_var, list1 + list2 + list3)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
leapfrogonline,ansible-merge-vars,tests/property/test_merge_vars_properties.py,test_dedup_dedups,self.assertTrue(len(merged_var) == len(set(merged_var))),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
leapfrogonline,ansible-merge-vars,tests/property/test_merge_vars_properties.py,test_dedup_includes_all_vals,"self.assertEqual(merged_var_set, list_set)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
leapfrogonline,ansible-merge-vars,tests/property/test_merge_vars_properties.py,test_merge_dicts,"self.assertEqual(merged_var, expected)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
leapfrogonline,ansible-merge-vars,tests/property/test_merge_vars_properties.py,test_merge_rec_with_list_dicts,self.assertTrue(all((k in merged_var.keys() for k in list(dict1.keys()) + list(dict2.keys()) + list(dict3.keys())))),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
leapfrogonline,ansible-merge-vars,tests/property/test_merge_vars_properties.py,test_merge_rec_with_list_dicts,self.assertTrue(all([set(dict1[k]).issubset(set(merged_var[k])) for k in dict1.keys()] + [set(dict2[k]).issubset(set(merged_var[k])) for k in dict2.keys()] + [set(dict3[k]).issubset(set(merged_var[k])) for k in dict3.keys()])),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/dataset/test_speech_recognition_dataset_randomized.py,test_no_off_by_one_errors_in_dataset_batch_collation,"assert sups['start_frame'][idx] + sups['num_frames'][idx] <= cut.num_frames, f'Error at index {idx}'",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_mix,assert mixed.has_features,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_mix,assert feats.shape[0] == mixed.num_frames,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_mix,assert feats.shape[1] == mixed.num_features,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_mix,assert mixed.has_recording,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_mix,assert samples.shape[0] == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_mix,assert samples.shape[1] == mixed.num_samples,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_append,assert mixed.has_features,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_append,assert feats.shape[0] == mixed.num_frames,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_append,assert feats.shape[1] == mixed.num_features,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_append,assert mixed.has_recording,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_append,assert samples.shape[0] == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/cut/test_invariants_randomized.py,test_invariants_append,assert samples.shape[1] == mixed.num_samples,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/augmentation/test_torchaudio.py,test_augmentation_chain_randomized,assert audio_aug.shape[1] == recording_aug.num_samples,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
lhotse-speech,lhotse,test/augmentation/test_torchaudio.py,test_augmentation_chain_randomized,assert cut_aug.load_audio().shape[1] == cut_aug.num_samples,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
lidatong,dataclasses-json,tests/test_invariants.py,test_generic_encode_and_decode_are_inverses,assert dc.from_json(dc.to_json()) == dc,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_external.py,test_compare,"assert isclose(int_result, ext_result), str(lib)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_external.py,test_qval,"assert isclose(int_result, ext_result), f'{lib}({repr(s1)}, {repr(s2)})'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_external.py,test_list_of_numbers,"assert isclose(int_result, ext_result), f'{lib}({repr(s1)}, {repr(s2)})'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_compression/test_common.py,test_simmetry,"assert alg.similarity(left, right) == alg.similarity(right, left)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_compression/test_common.py,test_simmetry,"assert alg.distance(left, right) == alg.distance(right, left)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_compression/test_common.py,test_simmetry,"assert alg.normalized_similarity(left, right) == alg.normalized_similarity(right, left)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_compression/test_common.py,test_simmetry,"assert alg.normalized_distance(left, right) == alg.normalized_distance(right, left)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_compression/test_common.py,test_is_normalized,assert a == d == nd,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_compression/test_common.py,test_normalized_by_one,"assert isclose(s + d, 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_common.py,test_normalization_range,"assert 0 <= alg.normalized_distance(left, right) <= 1",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
life4,textdistance,tests/test_common.py,test_normalization_range,"assert 0 <= alg.normalized_similarity(left, right) <= 1",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
life4,textdistance,tests/test_common.py,test_normalization_by_one,"assert isclose(s + d, 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_common.py,test_normalization_same,"assert alg.normalized_distance(text, text) == 0",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_common.py,test_normalization_same,"assert alg.distance(text, text) == 0",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_common.py,test_normalization_same,"assert alg.normalized_similarity(text, text) == 1",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_common.py,test_normalization_monotonic,assert (nd < ns) == (d < s),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_compression/test_entropy_ncd.py,test_simmetry_compressor,"assert isclose(ALG._compress(text), ALG._compress(rev))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_compression/test_entropy_ncd.py,test_idempotency_compressor,assert ALG._get_size(text * 2) < ALG._get_size(text) * 2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
life4,textdistance,tests/test_compression/test_entropy_ncd.py,test_monotonicity_compressor,assert ALG._get_size(left) <= ALG._get_size(left + right),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
life4,textdistance,tests/test_compression/test_entropy_ncd.py,test_distributivity_compressor,assert actual1 <= actual2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
life4,textdistance,tests/test_compression/test_entropy_ncd.py,test_normalization_range,"assert 0 <= ALG.normalized_similarity(text, text) <= 1",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
life4,textdistance,tests/test_compression/test_entropy_ncd.py,test_normalization_range,"assert 0 <= ALG.normalized_distance(text, text) <= 1",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
life4,textdistance,tests/test_compression/test_sqrt_ncd.py,test_simmetry_compressor,assert ALG._compress(text) == ALG._compress(rev),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_compression/test_sqrt_ncd.py,test_idempotency_compressor,assert ALG._get_size(text * 2) < ALG._get_size(text) * 2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
life4,textdistance,tests/test_compression/test_sqrt_ncd.py,test_monotonicity_compressor,assert ALG._get_size(left) <= ALG._get_size(left + right),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
life4,textdistance,tests/test_compression/test_sqrt_ncd.py,test_distributivity_compressor,assert actual1 <= actual2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
life4,textdistance,tests/test_compression/test_sqrt_ncd.py,test_normalization_range,"assert 0 <= ALG.normalized_similarity(text, text) <= 1",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
life4,textdistance,tests/test_compression/test_sqrt_ncd.py,test_normalization_range,"assert 0 <= ALG.normalized_distance(text, text) <= 1",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
life4,textdistance,tests/test_token/test_jaccard.py,test_compare_with_tversky,"assert isclose(jd, td)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_token/test_jaccard.py,test_compare_with_tversky_as_set,"assert isclose(jd, td)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_token/test_sorensen.py,test_compare_with_tversky,"assert isclose(jd, td)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
life4,textdistance,tests/test_token/test_sorensen.py,test_compare_with_tversky_as_set,"assert isclose(jd, td)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
liiight,notifiers,tests/test_json_schema.py,test_list_to_commas,"assert list_to_commas(input_data) == ','.join(input_data)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
lordmauve,chopsticks,tests/test_pencode.py,test_roundtrip_bool,"assert isinstance(res, bool)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
loris-imageserver,loris,tests/identifiers_t.py,test_any_ident_is_allowed_if_regex_is_none,assert checker.is_allowed(ident=ident) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
lubieowoce,sumtype,sumtype/tests/property_tests.py,test_as_tuple_from_tuple_identity,assert x == x.__class__.from_tuple(x.as_tuple()),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
luoliyan,chinese-support-redux,tests/test_color.py,test_tone_number,"self.assertEqual(colorize_fuse(['图', '书', '馆'], [f'tu{a}', f'shu{b}', f'guan{c}']), '<span class=""tone{}"">图</span><span class=""tone{}"">书</span><span class=""tone{}"">馆</span>'.format(a, b, c))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_backoff.py,test_exponential_growth,"self.assertEqual(len(growth_seq), 10)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_backoff.py,test_exponential_growth,"self.assertIsInstance(thing, float)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_backoff.py,test_exponential_growth,"self.assertEqual(growth_seq, sorted(growth_seq))",False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_backoff.py,test_exponential_growth,"self.assertEqual(base * rate, growth_seq[0])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_backoff.py,test_exponential_growth,"self.assertEqual(base * rate ** 10, growth_seq[-1])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_backoff.py,test_full_jitter,"self.assertIsInstance(thing, float)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_backoff.py,test_full_jitter,"self.assertGreaterEqual(thing, 0.0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_backoff.py,test_full_jitter,"self.assertLess(thing, 10000.0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
maas,maas,src/provisioningserver/drivers/power/tests/test_wedge.py,test_power_query_returns_power_state,"self.assertEqual(get_wedge_state(power_state), output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/drivers/power/tests/test_mscm.py,test_power_query_returns_power_state,"self.assertEqual(states[power_state], output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_znums.py,test_roundtrip,"self.assertEqual(num, to_int(from_int(num)))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_znums.py,test_sorting_6_digit_znums,"self.assertEqual(6, len(za))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_znums.py,test_sorting_6_digit_znums,"self.assertEqual(6, len(zb))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_znums.py,test_sorting_6_digit_znums,"self.assertEqual(za, zb)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_znums.py,test_sorting_6_digit_znums,"self.assertLess(za, zb)",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
maas,maas,src/provisioningserver/utils/tests/test_znums.py,test_sorting_6_digit_znums,"self.assertGreater(za, zb)",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
maas,maas,src/provisioningserver/drivers/power/tests/test_msftocs.py,test_power_query_returns_power_state,"self.assertEqual(get_msftocs_state(power_state), output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maas,maas,src/provisioningserver/drivers/power/tests/test_hmc.py,test_power_query_returns_power_state,"self.assertEqual(get_hmc_state(power_state), output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maas,maas,src/maasserver/models/tests/test_subnet.py,test_get_smallest_enclosing_sane_subnet_finds_parent_ipv4,self.assertIsNone(subnet.get_smallest_enclosing_sane_subnet()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maas,maas,src/maasserver/models/tests/test_subnet.py,test_get_smallest_enclosing_sane_subnet_finds_parent_ipv4,"self.assertEqual(parent, subnet.get_smallest_enclosing_sane_subnet())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
maas,maas,src/maasserver/models/tests/test_subnet.py,test_get_smallest_enclosing_sane_subnet_finds_parent_ipv6,self.assertIsNone(subnet.get_smallest_enclosing_sane_subnet()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maas,maas,src/maasserver/models/tests/test_subnet.py,test_get_smallest_enclosing_sane_subnet_finds_parent_ipv6,"self.assertEqual(parent, subnet.get_smallest_enclosing_sane_subnet())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
man-group,notebooker,tests/unit/test_handle_overrides.py,test_handle_overrides_handles_anything_cleanly_no_process_variable,assert len(issues) >= 1 or len(overrides) >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
man-group,notebooker,tests/unit/test_handle_overrides.py,test_handle_overrides_handles_anything_cleanly_no_process_variable,assert len(issues) == 0 and len(overrides) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
man-group,notebooker,tests/unit/test_handle_overrides.py,test_handle_overrides_handles_anything_cleanly_no_process_import,assert len(issues) >= 1 or len(overrides) >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
man-group,notebooker,tests/unit/test_handle_overrides.py,test_handle_overrides_handles_anything_cleanly_no_process_import,assert len(issues) == 0 and len(overrides) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_calculateRatio,"assert np.array_equal(output, calculateRatio(rgb, pan, weight))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_Brovey,"assert np.array_equal(brovey_output, output)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_Brovey,"assert np.array_equal(brovey_ratio, ratio)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_fix_window_size,"assert _adjust_block_size(w, h, blocksize) == blocksize + 1",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_fix_window_size,"assert _adjust_block_size(w, h, blocksize) == blocksize",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_create_apply_mask,assert np.all(color_mask[color_mask != 0] <= np.iinfo(np.uint16).max),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_create_apply_mask,assert np.all(masked_rgb <= rgb),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_simple_mask,"assert np.array_equal(_simple_mask(data, ndv), np.invert(np.all(np.dstack(data) == ndv, axis=2)).astype(data.dtype) * nd)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_pad_window,"assert _pad_window(wnd, pad)[0] == (wnd[0][0] - pad, wnd[0][1] + pad)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_pad_window,"assert _pad_window(wnd, pad)[1] == (wnd[1][0] - pad, wnd[1][1] + pad)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_rescale,"assert np.array_equal(_rescale(arr, ndv, dst_dtype), np.concatenate([arr.astype(dst_dtype), _simple_mask(arr.astype(dst_dtype), (ndv, ndv, ndv)).reshape(1, arr.shape[1], arr.shape[2])]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_rescale,"assert np.array_equal(_rescale(arr, ndv, dst_dtype), np.concatenate([(arr / 257.0).astype(dst_dtype), _simple_mask(arr.astype(dst_dtype), (ndv, ndv, ndv)).reshape(1, arr.shape[1], arr.shape[2])]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_make_windows_full_block,assert windows[wind][0][1] - windows[wind][0][0] <= blocksize and windows[wind][1][1] - windows[wind][1][0] <= blocksize,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_make_windows_full_block,assert windows[wind][0][1] - windows[wind][0][0] == blocksize or windows[wind][1][1] - windows[wind][1][0] == blocksize,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_make_windows_last_block,assert windows[-1][0][1] == h and windows[-1][1][1] == w,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_make_windows_last_block,assert windows[-1][0][1] - windows[-1][0][0] <= blocksize and windows[-1][1][1] - windows[-1][1][0] <= blocksize,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_make_affine,assert to_affine[4] == -(fr_shape[0] / float(to_shape[0])),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_make_affine,assert fr_affine[2] == float(0) and to_affine[2] == float(0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_make_affine,assert fr_affine[0] == float(1) and fr_affine[4] == -float(1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_half_window,"assert np.all(map(lambda x: x[0] <= x[1], half_window))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_half_window,assert np.all(np.array(window) % half_window <= 1),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_half_window,assert window[0][0] / half_window[0][0] == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-pansharpen,tests/test_property_based.py,test_half_window,assert window[-1][-1] / half_window[-1][-1] == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_boundless_read.py,test_outer_boundless_pixel_fidelity,"assert rgb_padded.shape == (dataset.count, height, width)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_boundless_read.py,test_outer_boundless_pixel_fidelity,"assert numpy.all(rgb == rgb_padded[:, -row_start:height - row_stop, -col_start:width - col_stop])",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_boundless_read.py,test_outer_upper_left_boundless_pixel_fidelity,"assert rgb_boundless.shape == (dataset.count, height, width)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_boundless_read.py,test_outer_upper_left_boundless_pixel_fidelity,"assert numpy.all(rgb[:, 0:height + row_start, 0:width + col_start] == rgb_boundless[:, -row_start:height, -col_start:width])",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mapbox,rio-toa,tests/test_brightness_temp.py,test_brightness_temp,"np.testing.assert_array_equal(Output, Result)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mapbox,rio-rgbify,test/test_mbtiler.py,test_make_tiles_tile_bounds,"assert isinstance(created_tiles_gen, types.GeneratorType)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
mapbox,rio-rgbify,test/test_mbtiler.py,test_make_tiles_tile_bounds,assert len(created_tiles) == 85,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rio-rgbify,test/test_mbtiler.py,test_tile_range,"assert expected_length == len(list(_tile_range(mintile, maxtile)))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows_mixins.py,test_window_transform_rt,"assert dataset.window_transform(windows.Window(0, 0, dataset.width, dataset.height)) == dataset.transform",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows_mixins.py,test_window_transform_rt_north_down,"assert dataset.window_transform(windows.Window(0, 0, dataset.width, dataset.height)) == dataset.transform",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows_mixins.py,test_window_bounds_rt,"assert dataset.window_bounds(windows.Window(0, 0, dataset.width, dataset.height)) == dataset.bounds",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows_mixins.py,test_window_bounds_rt_north_down,"assert dataset.window_bounds(windows.Window(0, 0, dataset.width, dataset.height)) == dataset.bounds",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,mercantile,tests/test_funcs.py,test_bounding_tile_roundtrip,assert val.x == t.x,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,mercantile,tests/test_funcs.py,test_bounding_tile_roundtrip,assert val.y == t.y,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,mercantile,tests/test_funcs.py,test_bounding_tile_roundtrip,assert val.z == t.z,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,mercantile,tests/test_funcs.py,test_ul_tile_roundtrip,assert tile.z == t.z,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,mercantile,tests/test_funcs.py,test_ul_tile_roundtrip,assert tile.x == t.x,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,mercantile,tests/test_funcs.py,test_ul_tile_roundtrip,assert tile.y == t.y,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,mercantile,tests/test_funcs.py,test_ul_xy_bounds,"assert mercantile.xy(*mercantile.ul(t))[1] == pytest.approx(mercantile.xy_bounds(t).top, abs=1e-07)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,mercantile,tests/test_funcs.py,test_ul_xy_bounds,"assert mercantile.xy(*mercantile.ul(t))[0] == pytest.approx(mercantile.xy_bounds(t).left, abs=1e-07)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_class,"assert np.allclose(window.col_off, col_off)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_class,"assert np.allclose(window.row_off, row_off)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_class,"assert np.allclose(window.width, width)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_class,"assert np.allclose(window.height, height)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_flatten,"assert np.allclose(Window(col_off, row_off, width, height).flatten(), (col_off, row_off, width, height))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_todict,"assert np.allclose((d['col_off'], d['row_off'], d['width'], d['height']), (col_off, row_off, width, height))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_toranges,"assert np.allclose(Window(col_off, row_off, width, height).toranges(), ((row_off, row_off + height), (col_off, col_off + width)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_toslices,"assert isinstance(row_slice.start, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_toslices,assert row_slice.start == int(math.floor(row_off)) or row_slice.start == 0,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_toslices,"assert isinstance(row_slice.stop, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_toslices,assert row_slice.stop == int(math.ceil(row_off + height)) or row_slice.stop == 0,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_toslices,"assert isinstance(col_slice.start, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_toslices,assert col_slice.start == int(math.floor(col_off)) or col_slice.start == 0,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_toslices,"assert isinstance(col_slice.stop, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_toslices,assert col_slice.stop == int(math.ceil(col_off + width)) or col_slice.stop == 0,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_fromslices,"assert np.allclose(Window.from_slices(rows=slice(*rows), cols=slice(*cols)).flatten(), expected)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_fromslices,"assert np.allclose(Window.from_slices(rows=rows, cols=cols).flatten(), expected)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_fromslices,"assert np.allclose(Window.from_slices(rows=list(rows), cols=list(cols)).flatten(), expected)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_fromslices_implicit,"assert np.allclose(Window.from_slices(rows=implicit_start, cols=absolute).flatten(), (abs_off, 0, stop - abs_off, stop))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_fromslices_implicit,"assert np.allclose(Window.from_slices(rows=absolute, cols=implicit_start).flatten(), (0, abs_off, stop, stop - abs_off))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_fromslices_implicit,"assert np.allclose(Window.from_slices(rows=implicit_stop, cols=absolute, height=dim).flatten(), (abs_off, imp_off, stop - abs_off, dim - imp_off))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_fromslices_implicit,"assert np.allclose(Window.from_slices(rows=absolute, cols=implicit_stop, width=dim).flatten(), (imp_off, abs_off, dim - imp_off, stop - abs_off))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_fromslices_implicit,"assert np.allclose(Window.from_slices(rows=implicit_both, cols=implicit_both, width=dim, height=dim).flatten(), (0, 0, dim, dim))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_window_fromslices_boundless,"assert np.allclose(Window.from_slices(rows=(-row_off, row_stop), cols=(col_off, col_stop), boundless=True).flatten(), (col_off, -row_off, col_stop - col_off, row_stop + row_off))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_crop,"assert 0.0 <= round(cropped_window.col_off, 3) <= width",False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_crop,"assert 0.0 <= round(cropped_window.row_off, 3) <= height",False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_crop,"assert round(cropped_window.width, 3) <= round(width - cropped_window.col_off, 3)",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mapbox,rasterio,tests/test_windows.py,test_crop,"assert round(cropped_window.height, 3) <= round(height - cropped_window.row_off, 3)",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_extend_jsonpointer_one_key,assert pointer[-1] == newkey,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_extend_jsonpointer_one_key,assert str(pointer) == f'{value}/{newtoken}',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_extend_jsonpointer_multi_keys,assert pointer[len(base_ptr) + i] == newkeys[i],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_extend_jsonpointer_multi_keys,assert str(pointer) == value + ''.join((f'/{jsonpointer_escape(key)}' for key in newkeys)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_evaluate_jsonpointer,assert jp_cls().evaluate(value) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_evaluate_jsonpointer,assert jp_cls().evaluate(JSON(value)) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_evaluate_jsonpointer,assert jp_cls(pointer).evaluate(value) == target,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_evaluate_jsonpointer,assert jp_cls(pointer).evaluate(JSON(value)) == target,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_evaluate_jsonpointer,assert exc_info.type == jp_cls.reference_exc,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_evaluate_jsonpointer,assert exc_info.type == jp_cls.reference_exc,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_evaluate_jsonpointer,assert exc_info.type == jp_cls.reference_exc,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_evaluate_jsonpointer,assert exc_info.type == jp_cls.reference_exc,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_evaluate_jsonpointer,assert exc_info.type == jp_cls.reference_exc,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert ptr1 == JSONPointer(ptr1),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert ptr1 <= JSONPointer(ptr1),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert ptr1 >= JSONPointer(ptr1),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert not ptr1 < JSONPointer(ptr1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert not ptr1 > JSONPointer(ptr1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert ptr1 <= ptr1 / ptr2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert ptr1 / ptr2 >= ptr1,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert bool(ptr2) == (ptr1 < ptr1 / ptr2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert bool(ptr2) == (ptr1 / ptr2 > ptr1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert bool(ptr2) == (not ptr1 / ptr2 <= ptr1),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert bool(ptr2) == (not ptr1 >= ptr1 / ptr2),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert (ptr1 <= ptr2) == ([k for k in ptr1] == [k for k in ptr2[:len(ptr1)]]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert (ptr1 >= ptr2) == ([k for k in ptr1[:len(ptr2)]] == [k for k in ptr2]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert (ptr1 < ptr2) == (ptr1 <= ptr2 and ptr1 != ptr2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_compare_jsonpointer,assert (ptr1 > ptr2) == (ptr1 >= ptr2 and ptr1 != ptr2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_create_relative_jsonpointer,assert r1 == r2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_create_relative_jsonpointer,assert str(r1) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_create_relative_jsonpointer,assert eval(repr(r1)) == r1,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_jsonpointer.py,test_create_relative_jsonpointer,assert r1 == RelativeJSONPointer(**kwargs),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_type,assert result == ('null' in kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_type,assert result == ('boolean' in kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_type,assert result == ('number' in kwvalue or 'integer' in kwvalue),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_type,assert result == ('number' in kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_type,assert result == ('string' in kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_type,assert result == ('array' in kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_type,assert result == ('object' in kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_enum,"assert result == any((isequal(instval, kwval) for kwval in kwvalue))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_const,"assert result == isequal(instval, kwvalue)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_maximum,assert result == (instval <= kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_exclusive_maximum,assert result == (instval < kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_minimum,assert result == (instval >= kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_exclusive_minimum,assert result == (instval > kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_max_length,assert result == (len(instval) <= kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_min_length,assert result == (len(instval) >= kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_pattern,"assert result == (re.search(kwvalue, instval) is not None)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_max_items,assert result == (len(instval) <= kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_min_items,assert result == (len(instval) >= kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_unique_items,assert result == (len(instval) == len(uniquified)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_unique_items,assert result is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_contains,assert result.valid == (min_contains <= contains_count <= max_contains),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_max_properties,assert result == (len(instval) <= kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_min_properties,assert result == (len(instval) >= kwvalue),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_required,assert result == (not missing),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_validators.py,test_dependent_required,assert result == (not missing),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_formats.py,test_ipv4_valid,assert result is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_formats.py,test_ipv6_valid,assert result is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_formats.py,test_jsonpointer_valid,assert result is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_formats.py,test_uuid,assert result is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_dumps,"assert isequal(obj, value)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_dumpf,"assert isequal(obj, value)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_eq,"assert isequal(value1, value2) is (value1 == JSON(value2)) is (JSON(value1) == JSON(value2)) is (JSON(value1) == value2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_number,assert (value1 < value2) is (value1 < JSON(value2)) is (JSON(value1) < JSON(value2)) is (JSON(value1) < value2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_number,assert (value1 <= value2) is (value1 <= JSON(value2)) is (JSON(value1) <= JSON(value2)) is (JSON(value1) <= value2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_number,assert (value1 >= value2) is (value1 >= JSON(value2)) is (JSON(value1) >= JSON(value2)) is (JSON(value1) >= value2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_number,assert (value1 > value2) is (value1 > JSON(value2)) is (JSON(value1) > JSON(value2)) is (JSON(value1) > value2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_string,assert (value1 < value2) is (value1 < JSON(value2)) is (JSON(value1) < JSON(value2)) is (JSON(value1) < value2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_string,assert (value1 <= value2) is (value1 <= JSON(value2)) is (JSON(value1) <= JSON(value2)) is (JSON(value1) <= value2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_string,assert (value1 >= value2) is (value1 >= JSON(value2)) is (JSON(value1) >= JSON(value2)) is (JSON(value1) >= value2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_string,assert (value1 > value2) is (value1 > JSON(value2)) is (JSON(value1) > JSON(value2)) is (JSON(value1) > value2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_replace,assert jdoc_1 == jdoc,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_json.py,test_json_replace,assert jdoc_1 == jdoc,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_uri.py,test_create_uri,assert urllib.parse.unquote(str(uri)) == urllib.parse.unquote(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
marksparkza,jschon,tests/test_uri.py,test_create_uri,assert eval(repr(uri)) == uri,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
matthias-k,pysaliency,tests/test_numba_utils.py,test_simple_auc_hypothesis,"np.testing.assert_allclose(old_auc, new_auc)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
matthias-k,pysaliency,tests/test_numba_utils.py,test_numba_auc_test1,"assert np.isclose(numba_output[0], cython_output[0])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
matthias-k,pysaliency,tests/test_numba_utils.py,test_numba_auc_test2,"assert np.isclose(numba_output[0], cython_output[0])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_matching_blocks,assert ops.as_matching_blocks() == ops.as_opcodes().as_matching_blocks(),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_editops,"assert ops.apply(s1, s2) == s2",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_editops_block,"assert ops.apply(s1, s2) == s2",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_indel_editops,"assert ops.apply(s1, s2) == s2",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_indel_editops_block,"assert ops.apply(s1, s2) == s2",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_opcodes,"assert ops.apply(s1, s2) == s2",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_opcodes_block,"assert ops.apply(s1, s2) == s2",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_indel_opcodes,"assert ops.apply(s1, s2) == s2",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_indel_opcodes_block,"assert ops.apply(s1, s2) == s2",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_partial_ratio_short_needle,"assert isclose(fuzz.partial_ratio(s1, s2), partial_ratio_short_needle(s1, s2))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_token_ratio,"assert fuzz.token_ratio(s1, s2) == max(fuzz.token_sort_ratio(s1, s2), fuzz.token_set_ratio(s1, s2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_partial_token_ratio,"assert fuzz.partial_token_ratio(s1, s2) == max(fuzz.partial_token_sort_ratio(s1, s2), fuzz.partial_token_set_ratio(s1, s2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_word,"assert Levenshtein.distance(s1, s2) == reference_dist",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_word,"assert isclose(Levenshtein.normalized_similarity(s1, s2), reference_sim)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_word,"assert Indel.distance(s1, s2) == reference_dist",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_word,"assert isclose(Indel.normalized_similarity(s1, s2), reference_sim)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_block,"assert Levenshtein.distance(s1, s2) == reference_dist",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_block,"assert isclose(Levenshtein.normalized_similarity(s1, s2), reference_sim)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_block,"assert Indel.distance(s1, s2) == reference_dist",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_block,"assert isclose(Indel.normalized_similarity(s1, s2), reference_sim)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_random,"assert Levenshtein.distance(s1, s2) == reference_dist",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_random,"assert isclose(Levenshtein.normalized_similarity(s1, s2), reference_sim)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_random,"assert Indel.distance(s1, s2) == reference_dist",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_levenshtein_random,"assert isclose(Indel.normalized_similarity(s1, s2), reference_sim)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_multiple_processor_runs,assert utils_py.default_process(sentence) == utils_py.default_process(utils_py.default_process(sentence)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_multiple_processor_runs,assert utils_cpp.default_process(sentence) == utils_cpp.default_process(utils_cpp.default_process(sentence)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_only_identical_strings_extracted,assert matches != [],False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_only_identical_strings_extracted,assert processor(query) == processor(match[0]),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_jaro_winkler_word,"assert isclose(jaro_winkler_similarity(s1, s2), JaroWinkler.similarity(s1, s2))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_jaro_winkler_block,"assert isclose(jaro_winkler_similarity(s1, s2), JaroWinkler.similarity(s1, s2))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
maxbachmann,RapidFuzz,tests/test_hypothesis.py,test_jaro_winkler_random,"assert isclose(jaro_winkler_similarity(s1, s2), JaroWinkler.similarity(s1, s2))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.width == DEFAULT_VERTICAL_WIDTH,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert is_valid_level_length(level_header.height),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert is_valid_level_length(level_header.width),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.height == DEFAULT_HORIZONTAL_HEIGHT,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.music_index in range(16),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.time_index in range(4),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.scroll_type_index in range(4),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.start_x_index in range(4),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.start_y_index in range(8),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.start_action in range(8),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.object_palette_index in range(8),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.enemy_palette_index in range(4),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert level_header.graphic_set_index in range(32),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mchlnix,SMB3-Foundry,smb3parse/tests/unit_tests/test_level_header.py,test_construction,assert is_valid_object_set_number(level_header.jump_object_set_number),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/annotator/test/test_model.py,test_union_unary,"assert union(s, s) == s",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/annotator/test/test_model.py,test_union_unary,"assert union(s_ImpossibleValue, s) == s",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/annotator/test/test_model.py,test_commutativity_of_union_compatibility,"assert compatible(s1, s2) == compatible(s2, s1)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/annotator/test/test_model.py,test_union_commutative,"assert union(s2, s1) == s_union",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/annotator/test/test_model.py,test_union_commutative,assert s_union.contains(s1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/annotator/test/test_model.py,test_union_commutative,assert s_union.contains(s2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/annotator/test/test_model.py,test_union_associative,"assert union(union(s1, s2), s3) == union(s1, union(s2, s3))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/annotator/test/test_model.py,test_generalize_isinstance,assert s_res_12.contains(s_res_1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_json.py,test_roundtrip,assert json.loads(json.dumps(d)) == d,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/optimizeopt/test/test_intdiv.py,test_magic_numbers,assert a == n // m,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/optimizeopt/test/test_intdiv.py,test_unsigned_mul_high,assert c == a * b >> LONG_BIT,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/optimizeopt/test/test_intdiv.py,test_division_operations,assert constants[op].getint() == n // m,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/optimizeopt/test/test_intdiv.py,test_modulo_operations,assert constants[op].getint() == n % m,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/module/_io/test/test_interp_textio.py,test_readline,assert len(line) <= limit,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mesalock-linux,mesapy,pypy/module/_io/test/test_interp_textio.py,test_readline,assert txt.startswith(u''.join(lines)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/module/_io/test/test_interp_textio.py,test_read_buffer,assert buf.get_chars(-1) == text,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/module/_io/test/test_interp_textio.py,test_read_buffer,assert buf.exhausted(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/module/_io/test/test_interp_textio.py,test_readn_buffer,assert len(s) == n,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/module/_io/test/test_interp_textio.py,test_readn_buffer,assert len(s) <= n,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mesalock-linux,mesapy,pypy/module/_io/test/test_interp_textio.py,test_readn_buffer,assert ''.join(strings) == text[:sum(sizes)],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/module/_io/test/test_interp_textio.py,test_next_char,assert buf.exhausted(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/module/_io/test/test_interp_textio.py,test_next_char,assert u''.join(chars) == text,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_resume.py,test_ResumeDataLoopMemo_random,assert l[0] == len(l),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_resume.py,test_ResumeDataLoopMemo_random,assert l[1] == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_resume.py,test_ResumeDataLoopMemo_random,assert l[1] == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_resume.py,test_ResumeDataLoopMemo_random,assert l[2] == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_resume.py,test_ResumeDataLoopMemo_random,assert l[3] == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_resume.py,test_ResumeDataLoopMemo_random,assert l[4] == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_resume.py,test_ResumeDataLoopMemo_random,assert l[i + 6] == numb_state.liveboxes[mapping[item]],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_resume.py,test_ResumeDataLoopMemo_random,assert memo.consts[v].getint() == item.getint(),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_resume.py,test_ResumeDataLoopMemo_random,assert v == item.getint(),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/module/unicodedata/test/test_hyp.py,test_composition,assert norm2(norm1(s)) == norm3(s),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_opencoder.py,xxx_test_random_snapshot,"BaseTest.assert_equal(loop1, loop2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/objspace/std/test/test_bytesobject.py,test_hypo_index_find,assert space.int_w(w_index) == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/objspace/std/test/test_bytesobject.py,test_hypo_index_find,assert space.int_w(w_index) == rexpected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/objspace/std/test/test_bytesobject.py,test_hypo_index_find,assert w_res is space.newbool(expected),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/objspace/std/test/test_bytesobject.py,test_hypo_index_find,assert w_res is space.newbool(expected),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/objspace/std/test/test_bytesobject.py,test_hypo_index_find,assert w_res is space.newbool(expected),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,pypy/objspace/std/test/test_bytesobject.py,test_hypo_index_find,assert w_res is space.newbool(expected),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_textio.py,test_readline,assert len(line) <= limit,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_textio.py,test_readline,assert txt.startswith(u''.join(lines)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_find,assert 0 <= s.find(u) <= len(prefix),False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_find,"assert s.find(u, len(prefix), len(s) - len(suffix)) == len(prefix)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_index,assert 0 <= s.index(u) <= len(prefix),False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_index,"assert s.index(u, len(prefix), len(s) - len(suffix)) == len(prefix)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_rfind,assert s.rfind(u) >= len(prefix),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_rfind,"assert s.rfind(u, len(prefix), len(s) - len(suffix)) == len(prefix)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_rindex,assert s.rindex(u) >= len(prefix),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_rindex,"assert s.rindex(u, len(prefix), len(s) - len(suffix)) == len(prefix)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_startswith_basic,assert u.startswith(v) is (u[:len(v)] == v),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_startswith_start,"assert u.startswith(v, start) is expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_startswith_3,"assert u.startswith(v, start, end) is expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_endswith_basic,assert u.endswith(v) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_endswith_basic,assert u.endswith(v) is (u[len(u) - len(v):] == v),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_endswith_2,"assert u.endswith(v, start) is expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_bytes.py,test_endswith_3,"assert u.endswith(v, start, end) is expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/tool/algo/test/test_bitstring.py,test_random,"assert set([n for n in range(300) if bitcheck(bitstring, n)]) == set(lst)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_bridgeopt.py,test_random_class_knowledge,assert len(numb_state.create_numbering().code) == 4 + math.ceil(len(refboxes) / 6.0),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,rpython/jit/metainterp/test/test_bridgeopt.py,test_random_class_knowledge,assert (box in after_optimizer.constant_classes) == known_class,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_composition,"assert normalize(norm2, normalize(norm1, s)) == normalize(norm3, s)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_find,assert 0 <= s.find(u) <= len(prefix),False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_find,"assert s.find(u, len(prefix), len(s) - len(suffix)) == len(prefix)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_index,assert 0 <= s.index(u) <= len(prefix),False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_index,"assert s.index(u, len(prefix), len(s) - len(suffix)) == len(prefix)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_rfind,assert s.rfind(u) >= len(prefix),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_rfind,"assert s.rfind(u, len(prefix), len(s) - len(suffix)) == len(prefix)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_rindex,assert s.rindex(u) >= len(prefix),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_rindex,"assert s.rindex(u, len(prefix), len(s) - len(suffix)) == len(prefix)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_startswith_basic,assert u.startswith(v) is (u[:len(v)] == v),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_startswith_2,"assert u.startswith(v, start) is expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_startswith_3,"assert u.startswith(v, start, end) is expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_endswith_basic,assert u.endswith(v) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_endswith_basic,assert u.endswith(v) is (u[len(u) - len(v):] == v),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_endswith_2,"assert u.endswith(v, start) is expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mesalock-linux,mesapy,extra_tests/test_unicode.py,test_endswith_3,"assert u.endswith(v, start, end) is expected",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
meshy,framewirc,tests/test_message.py,test_split_garbage,assert len(line) <= max_length,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
meshy,framewirc,tests/test_message.py,test_split_garbage,"assert ''.join(map(bytes.decode, result)) == message",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_localcoordinates.py,test_quickcheck,assert parameter == parameter,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_material.py,test_anisotropic_xi_calculation_polynomial,"assert np.allclose(should_be_zero_4, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_material.py,test_anisotropic_xi_calculation_polynomial,"assert np.allclose(should_be_zero_3, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_material.py,test_anisotropic_xi_calculation_polynomial,"assert np.allclose(should_be_zero_2, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_material.py,test_anisotropic_xi_calculation_polynomial,"assert np.allclose(should_be_zero_1, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_material.py,test_anisotropic_xi_calculation_polynomial,"assert np.allclose(should_be_zero_0, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_material.py,test_anisotropic_xi_calculation_det,"assert np.allclose(should_be_zero, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_material.py,test_anisotropic_xi_calculation_polynomial_zeros,"assert np.allclose(should_be_zero, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_material.py,test_anisotropic_xi_eigenvalues,"assert np.allclose(analytical_solution - numerical_solution1, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_material.py,test_anisotropic_xi_eigenvalues,"assert np.allclose(analytical_solution - numerical_solution2, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mess42,pyrate,tests/test_material.py,test_anisotropic_xi_determinants,"assert np.allclose(should_be_zero_2, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
metasoarous,tripl,tests/test_tripl.py,test_issue14,"triple_store.assert_facts(subjects, id_attrs=['cft.subject:id'])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_uint,"assert GoUint.decode(GoUint.encode(n)) == (n, b'')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_int,"assert GoInt.decode(GoInt.encode(n)) == (n, b'')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_float,assert buf == b'',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_float,assert math.isnan(result),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_float,assert result == f,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_byte_slice,"assert GoByteSlice.decode(GoByteSlice.encode(buf)) == (buf, b'')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_str,"assert GoString.decode(GoString.encode(text)) == (text.encode('utf-8'), b'')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_complex,assert buf == b'',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_complex,assert math.isnan(result.real),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_complex,assert result.real == z.real,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_complex,assert math.isnan(result.imag),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mgeisler,pygob,tests/test_properties.py,test_complex,assert result.imag == z.imag,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
microsoft,electionguard-python,tests/property/test_decryption_mediator.py,test_get_plaintext_tally_with_all_guardians_present,self.assertIsNotNone(plaintext_tally),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
microsoft,electionguard-python,tests/property/test_decryption_mediator.py,test_get_plaintext_tally_with_all_guardians_present,self.assertIsNotNone(selections),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
microsoft,electionguard-python,tests/property/test_decryption_mediator.py,test_get_plaintext_tally_with_all_guardians_present,"self.assertEqual(expected_plaintext_tally, selections)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
microsoft,electionguard-python,tests/property/test_elgamal.py,test_elgamal_keypair_produces_valid_residue,self.assertTrue(keypair.public_key.is_valid_residue()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
microsoft,agogosml,agogosml_cli/cli/templates/apps/simple/{{cookiecutter.PROJECT_NAME_SLUG}}/testapp.py,test_validation,"assert datahelper.validate_schema(encoded_json, SCHEMA_FILEPATH) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
microsoft,agogosml,agogosml_cli/cli/templates/apps/simple/{{cookiecutter.PROJECT_NAME_SLUG}}/testapp.py,test_transform,assert transformed_object == data,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
miiohio,succinct,tests/test_poppy.py,test_relative_count,"assert Poppy._get_relative_count(basic_block_index=basic_block_index, packed_relative_counts=packed_count) == initial_value",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
miiohio,succinct,tests/test_poppy.py,test_relative_count,"assert Poppy._get_relative_count(basic_block_index=basic_block_index, packed_relative_counts=packed_count) == initial_value + add",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mintel,pytest-localstack,tests/unit/test_utils.py,test_remove_newline,"assert result == string + newline * (num_newlines - max(n, 0))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mitmproxy,mitmproxy,test/mitmproxy/test_command_lexer.py,test_quote_unquote_cycle,"assert command_lexer.unquote(command_lexer.quote(s)).replace('\\x22', '""') == s",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mitmproxy,pdoc,test/test_docstrings.py,test_google,assert not s or ret,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mitmproxy,pdoc,test/test_docstrings.py,test_numpy,assert not s or ret,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mitmproxy,pdoc,test/test_docstrings.py,test_rst,assert not s or ret,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mitmproxy,pdoc,test/test_docstrings.py,test_rst_extract_options_fuzz,assert not s or content or options,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mjwestcott,fennel,tests/unit/test_utils.py,test_backoff,assert 1 <= backoff(n) <= 604800,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
mozilla,bugbug,tests/test_testselect.py,test_all,assert task1 < task2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
mozilla,bugbug,tests/test_testselect.py,test_all,assert len(result) == len(g.components()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/blobs/test_base.py,test_merge_lists_unique_items_present,assert len(got) == len(expected),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/blobs/test_base.py,test_merge_lists_unique_items_present,assert all([expected_item in expected + got for expected_item in expected]),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/blobs/test_base.py,test_merge_lists_no_dupes,assert len(got) == len(expected),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/blobs/test_base.py,test_merge_lists_no_dupes,assert all([expected_item in expected + got for expected_item in expected]),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/blobs/test_base.py,test_merge_dicts_join_lists,assert got == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/web/test_client.py,testForceParamWithBadInputs,"self.assertUpdateEqual(ret, force_output)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/web/test_client.py,testUpdateInvalidQueryVersion,"self.assertEqual(query_version, 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/web/test_client.py,testUpdateQueryVersion,"self.assertEqual(query_version, qv)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/web/test_client.py,testUnknownQueryStringParametersAreAllowedV1,"self.assertEqual(ret.status_code, 200)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/web/test_client.py,testUnknownQueryStringParametersAreAllowedV2,"self.assertEqual(ret.status_code, 200)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/web/test_client.py,testUnknownQueryStringParametersAreAllowedV3,"self.assertEqual(ret.status_code, 200)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/web/test_client.py,testUnknownQueryStringParametersAreAllowedV4,"self.assertEqual(ret.status_code, 200)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/web/test_client.py,testUnknownQueryStringParametersAreAllowedV5,"self.assertEqual(ret.status_code, 200)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/web/test_client.py,testUnknownQueryStringParametersAreAllowedV6,"self.assertEqual(ret.status_code, 200)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mozilla-releng,balrog,tests/web/test_client.py,test404ResponseForNonUpdateEndpoint,"self.assertEqual(ret.status_code, 404)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mre,hyperjson,tests/test_hypothesis.py,test_floats,assert hyperjson.loads(hyperjson.dumps(xs)) == pytest.approx(xs),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mre,hyperjson,tests/test_hypothesis.py,test_text,assert hyperjson.loads(hyperjson.dumps(xs)) == xs,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mre,hyperjson,tests/test_hypothesis.py,test_bool,assert hyperjson.loads(hyperjson.dumps(xs)) == xs,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mre,hyperjson,tests/test_hypothesis.py,test_none,assert hyperjson.loads(hyperjson.dumps(xs)) == xs,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mre,hyperjson,tests/test_hypothesis.py,test_list_integers,assert hyperjson.loads(hyperjson.dumps(lst)) == lst,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mre,hyperjson,tests/test_hypothesis.py,test_list_floats,assert hyperjson.loads(hyperjson.dumps(lst)) == pytest.approx(lst),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mre,hyperjson,tests/test_hypothesis.py,test_list_text,assert hyperjson.loads(hyperjson.dumps(lst)) == lst,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mre,hyperjson,tests/test_hypothesis.py,test_list_mixed,assert hyperjson.loads(hyperjson.dumps(lst)) == lst,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mre,hyperjson,tests/test_hypothesis.py,test_json_obj,assert hyperjson.loads(hyperjson.dumps(j_obj)) == j_obj,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_utils.py,test_inline_context,assert not APS & phi[CONTEXT].atomic_predicates,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_ast.py,test_identities,assert mtl.TOP == mtl.TOP | phi,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_ast.py,test_identities,assert mtl.BOT == mtl.BOT & phi,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_ast.py,test_identities,assert mtl.TOP == phi | mtl.TOP,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_ast.py,test_identities,assert mtl.BOT == phi & mtl.BOT,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_ast.py,test_identities,assert phi == phi & mtl.TOP,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_ast.py,test_identities,assert phi == phi | mtl.BOT,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_ast.py,test_identities,assert phi & phi & phi == phi & (phi & phi),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_ast.py,test_identities,assert phi | phi | phi == phi | (phi | phi),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_ast.py,test_identities,assert ~~phi == phi,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_parser.py,test_stablizing_repr,assert phi == phi2,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_params.py,test_params1,assert phi2.params == set(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
mvcisback,py-metric-temporal-logic,mtl/test_params.py,test_params1,"assert phi2 == mtl.parse(f'G[{a}, {b}](x)')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_select,assert len(toas) == len(c),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_select,assert len(toas) == np.sum(c),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_select,assert np.all(toas.get_mjds() == m[c]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_getitem_boolean,assert len(toas) == len(c),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_getitem_boolean,assert len(s) == np.sum(c),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_getitem_boolean,assert np.all(s.get_mjds() == m[c]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_getitem_where,assert len(s) == len(a),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_getitem_where,assert set(s.get_mjds()) == set(m[a]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_getitem_where,assert len(s) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_getitem_where,assert set(s.get_mjds()) == set(m[[a]]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_indexing.py,test_getitem_slice,assert set(s.get_mjds()) == set(m[c]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_toa_reader.py,test_numpy_clusterss,assert np.all(np.diff(in_cluster) < gap),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_toa_reader.py,test_numpy_clusterss,assert np.all(np.abs(t[~c] - e) >= gap),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_str_roundtrip_is_exact,assert ld == np.longdouble(str(ld)),False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_longdouble_str_roundtrip_is_exact,assert ld == str2longdouble(longdouble2str(ld)),False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_longdouble2str_same_as_str,assert longdouble2str(ld) == str(ld),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_construction_jds_exact,"assert (jd1, jd2) == (jd1_t, jd2_t)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_construction_mjds_preserved,assert (abs(jd1 - jd1_t + (jd2 - jd2_t)) * u.day).to(u.ns) < 1 * u.ns,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_construction_mjd_versus_jd,assert abs(t - t2).to(u.ns) < 1 * u.ns,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_to_longdouble_via_jd,assert (abs(time_to_longdouble(t) - ld) * u.day).to(u.ns) < 1 * u.ns,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_to_longdouble,assert (abs(time_to_longdouble(t) - ld) * u.day).to(u.ns) < 1 * u.ns,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_from_longdouble,"assert abs(time_from_longdouble(ld, format='mjd', scale=scale) - t).to(u.ns) < 1 * u.ns",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_from_longdouble_utc,"assert abs(time_from_longdouble(ld, format=format, scale='utc') - t).to(u.ns) < 1 * u.ns",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_to_longdouble_close_to_time_to_mjd_string,assert abs(tld_str - tld) * u.day < 1 * u.ns,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_to_longdouble_no_longer_than_time_to_mjd_string,assert len(time_to_mjd_string(t)) >= len(str(time_to_longdouble(t))),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_to_mjd_string_versus_longdouble,assert abs(tld_str - m) * u.day < 1 * u.ns,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_to_mjd_string_versus_decimal,assert (abs(Decimal(time_to_mjd_string(t)) - m) * u.day).to(u.ns) < 1 * u.ns,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_from_mjd_string_versus_longdouble_tai,"assert abs(time_from_mjd_string(s, scale='tai') - time_from_longdouble(m, scale='tai')).to(u.ns) < 1 * u.ns",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_from_mjd_string_versus_longdouble_utc,"assert abs(time_from_mjd_string(s, scale='utc', format=format) - time_from_longdouble(s, scale='utc', format=format)).to(u.ns) < 1 * u.ns",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_pulsar_mjd_never_differs_too_much_from_mjd_tai,assert abs(t2 - t) <= 1 * u.ns,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_pulsar_mjd_never_differs_too_much_from_mjd_utc,assert abs(t2 - t).to(u.s) < (1 + 1e-10) * u.s,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_from_mjd_string_accuracy_vs_longdouble,"assert abs(time_from_mjd_string(s, format=format, scale='utc') - t).to(u.us) < 1 * u.us",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_from_mjd_string_accuracy_vs_longdouble,"assert abs(time_from_mjd_string(s, format=format, scale='utc') - t).to(u.us) < 1 * u.ns",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_time_from_mjd_string_roundtrip,"assert abs(t - time_from_mjd_string(time_to_mjd_string(t), format=format)).to(u.ns) < 1 * u.ns",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_mjd_equals_pulsar_mjd_in_tai,assert t == t2,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_pulsar_mjd_equals_mjd_on_non_leap_second_days,assert abs(t1 - t2).to(u.ns) < 5 * time_eps,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_pulsar_mjd_equals_mjd_on_leap_second_days,assert abs(t1 - t2).to(u.ns) < 4 * time_eps,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_pulsar_mjd_close_to_mjd_on_leap_second_days,assert abs(t1 - t2).to(u.s) < 1.1 * u.s,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_pulsar_mjd_proceeds_at_normal_rate_on_leap_second_days,assert abs((t2 - t1).to(u.day) / (f * u.day) - 1) < 1e-09,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_mjd_proceeds_slower_on_leap_second_days,assert abs((t2 - t1).to(u.s) / (f * 86401 * u.s) - 1) < 1e-09,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_d2tf_tf2d_roundtrip,"assert abs(tf2d_nice(*d2tf_nice(ndp, f)) - f) * 86400 < k * 10 ** (-ndp)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_mjds_to_str,assert abs(d2 - d) < 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_precision.py,test_mjds_to_str_roundtrip,assert abs(d_o - d) < time_eps,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_posvel_broadcasts,assert pv.pos.shape == pv.vel.shape == shape,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_posvel_broadcast_retains_quantity,assert pv.pos.shape == pv.vel.shape == shape,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_posvel_broadcast_retains_quantity,assert pv.pos.unit == l_unit,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_posvel_broadcast_retains_quantity,assert pv.vel.unit == l_unit / t_unit,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_mjds_to_str_array,"assert hasattr(r, 'dtype')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_mjds_to_str_array,assert np.shape(r) == s,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_mjds_to_str_array,"assert r_i == mjds_to_str(i_i, f_i)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_mjds_to_str_array_roundtrip_close,"assert hasattr(i_o, 'dtype')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_mjds_to_str_array_roundtrip_close,"assert hasattr(f_o, 'dtype')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_mjds_to_str_array_roundtrip_close,assert np.all(np.abs(l - l_o) * 86400 < 1e-09),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_str_to_mjds_array,assert np.shape(i) == np.shape(f) == np.shape(s),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_str_to_mjds_array,"assert i_i, f_i == str_to_mjds(s_i)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_mjds_to_jds_array,assert np.shape(jd1) == np.shape(jd2) == s,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_mjds_to_jds_array,"assert jd1_i, jd2_i == mjds_to_jds(i_i, f_i)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_mjds_to_jds_pulsar_array,assert np.shape(jd1) == np.shape(jd2) == s,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_mjds_to_jds_pulsar_array,"assert jd1_i, jd2_i == mjds_to_jds_pulsar(i_i, f_i)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_jds_to_mjds_array,assert np.shape(f) == s,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_jds_to_mjds_array,assert np.shape(i) == s,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_jds_to_mjds_array,"assert i_i, f_i == jds_to_mjds(jd1_i, jd2_i)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_jds_to_mjds_pulsar_array,assert np.shape(f) == s,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_jds_to_mjds_pulsar_array,assert np.shape(i) == s,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_jds_to_mjds_pulsar_array,"assert i_i, f_i == jds_to_mjds_pulsar(jd1_i, jd2_i)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nanograv,PINT,tests/test_utils.py,test_compute_hash_detects_changes,assert h_a != h_b,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
nanograv,PINT,tests/test_utils.py,test_compute_hash_accepts_no_change,assert h_a == h_b,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_obs_steps,assert self.env.obs_steps == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_period,assert self.env.period == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_simulate_trade,"assert action.sum() - Decimal('1.00000000') < Decimal('1E-8'), action.sum() - Decimal('1.00000000')",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_simulate_trade,"assert self.env.action_df.get_value(timestamp, symbol) - convert_to.decimal(action[i]) <= Decimal('1E-3')",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_simulate_trade,"assert self.env.portfolio_df.get_value(self.env.portfolio_df[symbol].last_valid_index(), symbol) - self.env.action_df.get_value(timestamp, symbol) * self.env.calc_total_portval(timestamp) / self.env.get_open_price(symbol, timestamp) <= convert_to.decimal('1E-4')",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_step,"assert isinstance(obs, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_step,assert obs.shape[0] == self.env.obs_steps,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_step,assert set(obs.columns.levels[0]) == set(list(self.env.pairs) + [self.env._fiat]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_step,"assert isinstance(reward, np.float64)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_step,"assert reward not in (np.nan, np.inf)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_step,"assert isinstance(done, bool)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_step,assert status == self.env.status,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
naripok,cryptotrader,tests/test_TradingEnvironment.py,test_step,assert status[key] == False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
naripok,cryptotrader,tests/test_utils.py,test_convert_to,assert number - Decimal.from_float(data).quantize(Decimal('0e-9')) < Decimal('1e-8'),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nategraf,Naumachia,registrar/app/test_zencode.py,test_encode_decode_hypothesis,"assert re.fullmatch('[a-zA-Z0-9]*', encoded)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nategraf,Naumachia,registrar/app/test_zencode.py,test_encode_decode_hypothesis,assert decode(encoded) == input,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nii-yamagishilab,tacotron2,tests/decoder_test.py,test_decoder,"self.assertAllClose(alignment_inference, alignment_training)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nii-yamagishilab,tacotron2,tests/decoder_test.py,test_decoder,"self.assertAllClose(output_inference, output_training)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nii-yamagishilab,tacotron2,tests/decoder_test.py,test_decoder,"self.assertAllClose(stop_token_inference, stop_token_training)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nii-yamagishilab,self-attention-tacotron,modules/transformer_test.py,test_equality_between_training_and_inference,"self.assertAllClose(training_output_value, inference_output_value)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nii-yamagishilab,self-attention-tacotron,modules/transformer_test.py,test_equality_between_training_and_inference,"self.assertAllClose(training_stop_token_value, inference_stop_token_value)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nii-yamagishilab,self-attention-tacotron,modules/transformer_test.py,test_equality_between_training_and_inference_of_mgc_f0,"self.assertAllClose(training_output_value1, inference_output_value1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nii-yamagishilab,self-attention-tacotron,modules/transformer_test.py,test_equality_between_training_and_inference_of_mgc_f0,"self.assertAllClose(training_output_value2, inference_output_value2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nii-yamagishilab,self-attention-tacotron,modules/transformer_test.py,test_equality_between_training_and_inference_of_mgc_f0,"self.assertAllClose(training_stop_token_value, inference_stop_token_value)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nix-community,pypi2nix,unittests/test_dependency_graph_serialization.py,test_equality_to_self,assert dependency_graph == dependency_graph,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nix-community,pypi2nix,unittests/test_dependency_graph_serialization.py,test_serialization_and_deserialization_leads_to_identity,assert DependencyGraph.deserialize(dependency_graph.serialize()) == dependency_graph,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_robot.py,test_jacobian_world,"np.testing.assert_allclose(actual, expected, atol=0.001)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_robot.py,test_jacobian_flange,"np.testing.assert_allclose(actual, expected, atol=1e-06)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_robot.py,test_ik,"np.testing.assert_allclose(actual_pose, pose, atol=1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_robot.py,test_ik,"np.testing.assert_allclose(actual_position, desired_position, atol=0.1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_x,"np.testing.assert_allclose(np.linalg.norm(row), 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_x,"np.testing.assert_allclose(np.linalg.norm(column), 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_x,"np.testing.assert_allclose(actual_matrix[:-1, -1], 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_x,"np.testing.assert_allclose(actual_matrix[-1, :-1], 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_x,"np.testing.assert_allclose(actual_matrix[axis_idx, axis_idx], 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_x,"np.testing.assert_allclose(actual=actual_rotation, desired=expected_rotation, rtol=1e-05, atol=1e-08)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_y,"np.testing.assert_allclose(np.linalg.norm(row), 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_y,"np.testing.assert_allclose(np.linalg.norm(column), 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_y,"np.testing.assert_allclose(actual_matrix[:-1, -1], 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_y,"np.testing.assert_allclose(actual_matrix[-1, :-1], 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_y,"np.testing.assert_allclose(actual_matrix[axis_idx, axis_idx], 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_y,"np.testing.assert_allclose(actual=actual_rotation, desired=expected_rotation, rtol=1e-05, atol=1e-08)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_z,"np.testing.assert_allclose(np.linalg.norm(row), 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_z,"np.testing.assert_allclose(np.linalg.norm(column), 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_z,"np.testing.assert_allclose(actual_matrix[:-1, -1], 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_z,"np.testing.assert_allclose(actual_matrix[-1, :-1], 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_z,"np.testing.assert_allclose(actual_matrix[axis_idx, axis_idx], 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_geometry.py,test_rotation_matrix_z,"np.testing.assert_allclose(actual=actual_rotation, desired=expected_rotation, rtol=1e-05, atol=1e-08)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_optimization.py,test_compute_absolute_errors_1d,"np.testing.assert_allclose(actual_error, 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_optimization.py,test_compute_absolute_errors_2d,"np.testing.assert_allclose(actual_error, 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_optimization.py,test_compute_relative_errors_1d,"np.testing.assert_allclose(actual_error, 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nnadeau,pybotics,tests/test_optimization.py,test_compute_relative_errors_2d,"np.testing.assert_allclose(actual_error, 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nubank,fklearn,tests/preprocessing/test_splitting.py,test_stratified_split_dataset,assert abs(len(train_data) - expected_train_size) <= MAX_STRATIFIED_SPLIT_SIZE_DIFFERENCE,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
nubank,fklearn,tests/preprocessing/test_splitting.py,test_stratified_split_dataset,assert abs(len(test_data) - expected_test_size) <= MAX_STRATIFIED_SPLIT_SIZE_DIFFERENCE,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
numpy,numpy,numpy/lib/tests/test_function_base.py,test_linear_interpolation_formula_monotonic,assert l0 == l1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
numpy,numpy,numpy/lib/tests/test_function_base.py,test_linear_interpolation_formula_monotonic,assert l0 <= l1,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
numpy,numpy,numpy/lib/tests/test_function_base.py,test_linear_interpolation_formula_monotonic,assert l0 >= l1,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
numpy,numpy,numpy/lib/tests/test_function_base.py,test_linear_interpolation_formula_bounded,"assert a <= nfb._lerp(a, b, t) <= b",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
numpy,numpy,numpy/lib/tests/test_function_base.py,test_linear_interpolation_formula_bounded,"assert b <= nfb._lerp(a, b, t) <= a",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
nylas,sync-engine,inbox/test/security/test_blobstorage.py,test_blobstorage,assert decode_blob(encode_blob(sample_input)) == sample_input,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nylas,sync-engine,inbox/test/security/test_blobstorage.py,test_encoded_format,assert encoded.startswith(chr(encrypt) + '\x00\x00\x00\x00'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nylas,sync-engine,inbox/test/security/test_blobstorage.py,test_encoded_format,assert data != sample_input,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
nylas,sync-engine,inbox/test/security/test_blobstorage.py,test_encoded_format,assert data != zlib.compress(sample_input),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
nylas,sync-engine,inbox/test/security/test_blobstorage.py,test_encoded_format,assert data == zlib.compress(sample_input),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nylas,sync-engine,inbox/test/security/test_blobstorage.py,test_message_body_storage,assert message._compacted_body is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nylas,sync-engine,inbox/test/security/test_blobstorage.py,test_message_body_storage,assert message._compacted_body.startswith(chr(encrypt) + '\x00\x00\x00\x00'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nylas,sync-engine,inbox/test/security/test_blobstorage.py,test_message_body_storage,assert message.body == sample_input,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nylas,sync-engine,tests/security/test_blobstorage.py,test_blobstorage,assert decode_blob(encode_blob(sample_input)) == sample_input,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
nylas,sync-engine,tests/security/test_blobstorage.py,test_encoded_format,assert encoded.startswith(chr(encrypt) + '\x00\x00\x00\x00'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nylas,sync-engine,tests/security/test_blobstorage.py,test_encoded_format,assert data != sample_input,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
nylas,sync-engine,tests/security/test_blobstorage.py,test_encoded_format,assert data != zlib.compress(sample_input),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
nylas,sync-engine,tests/security/test_blobstorage.py,test_encoded_format,assert data == zlib.compress(sample_input),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
nylas,sync-engine,tests/security/test_blobstorage.py,test_message_body_storage,assert message._compacted_body is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nylas,sync-engine,tests/security/test_blobstorage.py,test_message_body_storage,assert message._compacted_body.startswith(chr(encrypt) + '\x00\x00\x00\x00'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
nylas,sync-engine,tests/security/test_blobstorage.py,test_message_body_storage,assert message.body == sample_input,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
oilshell,oil,core/property_tests.py,testNeverPanics,"self.assertIs(_PromptLen(s) >= 0, True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
olipratt,swagger-conformance,examples/ex_targeted_test.py,single_operation_test,"assert response.status in put_operation.response_codes, '{} not in {}'.format(response.status, put_operation.response_codes)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
olipratt,swagger-conformance,examples/ex_targeted_test.py,single_operation_test,"assert out_data == in_data, '{!r} != {!r}'.format(out_data, in_data)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
opendatacube,datacube-core,tests/storage/test_netcdfwriter.py,test_create_string_variable,assert returned == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
opendatacube,datacube-core,tests/test_utils_other.py,test_gen_pass,assert len(password1) >= n_bytes,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
opendatacube,datacube-core,tests/test_utils_other.py,test_gen_pass,assert len(password2) >= n_bytes,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
opendatacube,datacube-core,tests/test_utils_other.py,test_gen_pass,assert password1 != password2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
opendatacube,datacube-core,tests/test_utils_other.py,test_write_user_secret_file,assert txt == txt_back,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
opendatacube,datacube-core,tests/test_utils_other.py,test_write_user_secret_file,assert slurp(fname) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_on_offset_implementations,assert offset.onOffset(dt) == (compare == dt),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[0] == rng[0] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res[-1] == rng[-1] + offset,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[0] == ser.iloc[0] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_apply_index_implementations,assert res2.iloc[-1] == ser.iloc[-1] + offset,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left + right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left.apply(right) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left - right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left != right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left == right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left == right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left != right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
osirislab,CSAW-CTF-2019-Quals,crypto/brillouin/lib/python2.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert cls(n) != cls(-n),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
pandas-dev,pandas,pandas/tests/tseries/offsets/test_offsets_properties.py,test_on_offset_implementations,assert offset.is_on_offset(dt) == (compare == dt),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandas-dev,pandas,pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left + right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pandas-dev,pandas,pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left - right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pandas-dev,pandas,pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left != right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
pandas-dev,pandas,pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left == right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pandas-dev,pandas,pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left != right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandas-dev,pandas,pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert cls(n) != cls(-n),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
pandas-dev,pandas,pandas/tests/tslibs/test_ccalendar.py,test_isocalendar,assert result == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_pandas_dtype_strategy,assert example.dtype.type == expected_type,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_pandas_dtype_strategy,assert chained_example.dtype.type == expected_type,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_check_strategy_continuous,"assert data.draw(strategies.ne_strategy(data_type, value=value)) != value",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
pandera-dev,pandera,tests/strategies/test_strategies.py,test_check_strategy_continuous,"assert data.draw(strategies.eq_strategy(data_type, value=value)) == value",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_check_strategy_continuous,"assert data.draw(strategies.gt_strategy(data_type, min_value=value)) > value",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_check_strategy_continuous,"assert data.draw(strategies.ge_strategy(data_type, min_value=value)) >= value",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_check_strategy_continuous,"assert data.draw(strategies.lt_strategy(data_type, max_value=value)) < value",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_check_strategy_continuous,"assert data.draw(strategies.le_strategy(data_type, max_value=value)) <= value",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_check_strategy_chained_continuous,"assert compare_op(example, assert_value)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_in_range_strategy,assert min_value <= data.draw(strat) <= max_value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_isin_notin_strategies,assert data.draw(isin_st) in values,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_isin_notin_strategies,assert data.draw(notin_st) not in values,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_str_pattern_checks,"assert re.search(pattern, example)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_str_length_checks,assert min_value <= len(example) <= max_value,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_register_check_strategy,assert result == 100,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_dataframe_strategy,assert df_sample.empty,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_dataframe_strategy,"assert df_sample.empty or isinstance(dataframe_schema(df_sample), pd.DataFrame)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_dataframe_strategy,"assert isinstance(dataframe_schema(df_sample), pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_dataframe_strategy_with_check,assert df_sample.empty,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_dataframe_strategy_with_check,"assert df_sample.empty or isinstance(dataframe_schema(df_sample), pd.DataFrame)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_dataframe_strategy_with_check,"assert isinstance(dataframe_schema(df_sample), pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_dataframe_with_regex,assert df.shape[1] == n_regex_columns,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_index_strategy,assert data_type.check(actual_data_type),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_multiindex_strategy,assert data_type.check(actual_data_type),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_field_element_strategy,"assert isinstance(element, pd.Timestamp)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_field_element_strategy,assert element.tz == data_type.tz,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_field_element_strategy,assert element.dtype.type == expected_type,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_check_nullable_field_strategy,assert example.isna().sum() >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_check_nullable_dataframe_strategy,assert example.isna().sum(axis=None).item() >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
pandera-dev,pandera,tests/strategies/test_strategies.py,test_empty_nullable_schema,assert data.draw(schema.strategy(size=0)).empty,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pbrod,nvector,src/nvector/tests/test_util.py,test_unit,assert np.all(np.isnan(vec)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pbrod,nvector,src/nvector/tests/test_util.py,test_unit,"assert np.any(np.isnan([x, y, z])) or np.any(np.isinf([x, y, z]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pbrod,numdifftools,src/numdifftools/tests/test_nd_algopy.py,test_derivative_on_sinh,assert np.isnan(val) == np.isnan(true_val),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_str,"self.assertEqual(str(zi), key)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_key,"self.assertEqual(zi.key, key)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_utc,"self.assertEqual(dt_zi.utcoffset(), ZERO)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_utc,"self.assertEqual(dt_zi.dst(), ZERO)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_utc,"self.assertEqual(dt_zi.tzname(), 'UTC')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_cache,"self.assertIs(zi, zi_rt)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_no_cache,"self.assertIsNot(zi, zi_rt)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_no_cache,"self.assertEqual(str(zi), str(zi_rt))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_cache_multiple_rounds,"self.assertEqual(pkl_str_0, pkl_str_1)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_cache_multiple_rounds,"self.assertEqual(pkl_str_1, pkl_str_2)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_cache_multiple_rounds,"self.assertIs(zi_0, zi_1)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_cache_multiple_rounds,"self.assertIs(zi_0, zi_2)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_cache_multiple_rounds,"self.assertIs(zi_1, zi_2)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_no_cache_multiple_rounds,"self.assertEqual(pkl_str_0, pkl_str_1)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_no_cache_multiple_rounds,"self.assertEqual(pkl_str_1, pkl_str_2)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_no_cache_multiple_rounds,"self.assertIsNot(zi_0, zi_1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_no_cache_multiple_rounds,"self.assertIsNot(zi_0, zi_2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_no_cache_multiple_rounds,"self.assertIsNot(zi_1, zi_2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_no_cache_multiple_rounds,"self.assertIsNot(zi_0, zi_cache)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_no_cache_multiple_rounds,"self.assertIsNot(zi_1, zi_cache)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_pickle_unpickle_no_cache_multiple_rounds,"self.assertIsNot(zi_2, zi_cache)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_cache,"self.assertIs(zi_0, zi_1)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_no_cache,"self.assertIsNot(zi_0, zi_1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_same_str,"self.assertEqual(str(py_dt), str(c_dt))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_same_offsets_and_names,"self.assertEqual(py_dt.tzname(), c_dt.tzname())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_same_offsets_and_names,"self.assertEqual(py_dt.utcoffset(), c_dt.utcoffset())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_same_offsets_and_names,"self.assertEqual(py_dt.dst(), c_dt.dst())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_same_from_utc,"self.assertEqual(self._is_ambiguous(py_dt), self._is_ambiguous(c_dt), (py_dt, c_dt))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_same_from_utc,"self.assertEqual(py_dt.tzname(), c_dt.tzname())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_same_from_utc,"self.assertEqual(py_dt.utcoffset(), c_dt.utcoffset())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_same_from_utc,"self.assertEqual(py_dt.dst(), c_dt.dst())",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_same_to_utc,"self.assertEqual(py_utc, c_utc)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_cross_module_pickle,"self.assertIs(py_to_c_zi, c_zi)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pganssle,zoneinfo,tests/test_zoneinfo_property.py,test_cross_module_pickle,"self.assertIs(c_to_py_zi, py_zi)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pgjones,quart,tests/test_json.py,test_jsonserializer,assert serializer.loads(serializer.dumps(value)) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pgjones,quart,tests/wrappers/test_response.py,test_datetime_headers,"assert response.headers.get(header.title().replace('_', '-'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pgjones,quart,tests/wrappers/test_response.py,test_datetime_headers,"assert getattr(response, header) == value",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_random_range,"assert mapping.indices[:, 0, :, :].min() >= 0",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_random_range,"assert mapping.indices[:, 0, :, :].max() < style.shape[2]",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_random_range,"assert mapping.indices[:, 1, :, :].min() >= 0",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_random_range,"assert mapping.indices[:, 1, :, :].max() < style.shape[3]",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_linear_range,"assert mapping.indices[:, 0, :, :].min() >= 0",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_linear_range,"assert mapping.indices[:, 0, :, :].max() < style.shape[2]",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_linear_range,"assert mapping.indices[:, 1, :, :].min() >= 0",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_linear_range,"assert mapping.indices[:, 1, :, :].max() < style.shape[3]",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_range_matrix,assert matcher.repro_target.scores.min() >= 0.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_range_matrix,assert matcher.repro_target.scores.max() <= 1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_range_matrix,assert matcher.repro_sources.scores.min() >= 0.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_range_matrix,assert matcher.repro_sources.scores.max() <= 1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_range_random,assert matcher.repro_sources.indices.min() != -1,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
photogeniq,texturize,tests/test_match.py,test_scores_range_random,assert matcher.repro_target.scores.min() >= 0.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_range_random,assert matcher.repro_target.scores.max() <= 1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_range_random,assert matcher.repro_sources.scores.max() >= 0.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_range_random,assert matcher.repro_sources.indices.max() != -1,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
photogeniq,texturize,tests/test_match.py,test_compare_random_converges,assert (matcher1.repro_target.indices != matcher2.repro_target.indices).sum() <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_compare_random_converges,"assert pytest.approx(0.0, abs=1e-06) == torch.dist(matcher1.repro_target.scores, matcher2.repro_target.scores)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_compare_random_converges,assert matcher2.repro_sources.indices.min() != -1,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
photogeniq,texturize,tests/test_match.py,test_compare_random_converges,assert (matcher1.repro_sources.indices != matcher2.repro_sources.indices).sum() <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_compare_random_converges,"assert pytest.approx(0.0, abs=1e-06) == torch.dist(matcher1.repro_sources.scores, matcher2.repro_sources.scores)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_random,"assert m.indices[:, 0].min() != m.indices[:, 0].max(dim=2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
photogeniq,texturize,tests/test_match.py,test_indices_random,"assert m.indices[:, 1].min() != m.indices[:, 1].max(dim=2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
photogeniq,texturize,tests/test_match.py,test_scores_identity,"assert pytest.approx(1.0, abs=1e-06) == matcher.repro_target.scores.min()",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_identity,"assert pytest.approx(1.0, abs=1e-06) == matcher.repro_sources.scores.min()",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_same_split,assert (target_indices != matcher.repro_target.indices).sum() <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_same_split,assert (source_indices != matcher.repro_sources.indices).sum() <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_same_rotate,"assert (matcher1.repro_target.indices[:, 0] != matcher2.repro_target.indices[:, 1]).sum() <= 1",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_same_rotate,"assert (matcher2.repro_target.indices[:, 1] != matcher1.repro_target.indices[:, 0]).sum() <= 1",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_symmetry_matrix,assert (matcher1.repro_target.indices != matcher2.repro_sources.indices).sum() <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_symmetry_matrix,assert (matcher1.repro_sources.indices != matcher2.repro_target.indices).sum() <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_symmetry_random,assert (matcher1.repro_target.indices != matcher2.repro_sources.indices).sum() <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_indices_symmetry_random,assert (matcher1.repro_sources.indices != matcher2.repro_target.indices).sum() <= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_zero,assert pytest.approx(0.0) == matcher.repro_target.scores.max(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_zero,assert pytest.approx(0.0) == matcher.repro_sources.scores.max(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_one,assert pytest.approx(1.0) == matcher.repro_target.scores.min(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_one,assert pytest.approx(1.0) == matcher.repro_sources.scores.min(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_reconstruct,"assert pytest.approx(0.0, abs=1e-06) == abs(score.mean() - matcher.repro_target.scores.mean())",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_reconstruct,"assert pytest.approx(0.0, abs=1e-06) == abs(score.mean() - matcher.repro_sources.scores.mean())",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scores_improve,assert after >= before,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_compare_inverse_asymmetrical,assert matcher.repro_sources.indices.max() > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_compare_inverse_asymmetrical,assert matcher.repro_target.indices.max() > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_compare_inverse_symmetrical,assert (matcher.repro_target.indices != matcher.repro_sources.indices).sum() == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_compare_inverse_symmetrical,assert (matcher.repro_target.indices != matcher.repro_sources.indices).sum() == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scatter_2d_single_float,"assert matcher.repro_target.scores[:, :, 1, 1] == 2.34",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scatter_2d_single_float,"assert matcher.repro_target.scores[:, :, 0, 0] == 0.0",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scatter_2d_single_long,assert (matcher.repro_target.indices == 234).sum() == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scatter_2d_single_long,assert (matcher.repro_target.indices == 345).sum() == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scatter_2d_single_long,"assert matcher.repro_target.indices[:, 0, 1, 1] == 234",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scatter_2d_single_long,"assert matcher.repro_target.indices[:, 1, 1, 1] == 345",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_scatter_2d_single_long,"assert matcher.repro_target.indices[:, :, 0, 0].max() == 0",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_nearest_neighbor_vs_matcher,assert (ima.flatten(1) != ida).sum() == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
photogeniq,texturize,tests/test_match.py,test_nearest_neighbor_vs_matcher,assert (imb.flatten(1) != idb).sum() == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
piccolbo,altair_recipes,tests/test_scatterplot.py,test_scatterplot_series,assert chart1.to_dict() == chart2.to_dict(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
piccolbo,altair_recipes,tests/test_scatterplot.py,test_multiscatterplot_series,assert chart1.to_dict() == chart2.to_dict(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_outlines.py,test_page_destination,assert dest == expected_dest,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_outlines.py,test_new_item,assert new_item.destination == expected_dest,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_outlines.py,test_new_item,assert new_obj.Title == title,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_outlines.py,test_new_item,assert new_obj.Dest == expected_dest,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_outlines.py,test_new_item,assert new_obj.is_indirect is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_object.py,test_ascii_involution,assert encode(b) == b,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_object.py,test_unicode_involution,assert str(encode(s)) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_object.py,test_binary_involution,assert bytes(encode(binary_)) == binary_,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_object.py,test_integer_comparison,assert encoded_equals == equals,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_object.py,test_integer_comparison,assert lessthan == encoded_lessthan,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_object.py,test_decimal_involution,assert encode(d) == d,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_object.py,test_decimal_from_float,"assert isclose(py_d, d, abs_tol=1e-05), (d, f.hex())",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_object.py,test_list,assert a == array,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_object.py,test_nested_list,assert a == array,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_object.py,test_nested_list2,assert a == array,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_codec.py,test_open_encoding_pdfdoc_write,assert txt.read_bytes() == s.encode('pdfdoc'),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_codec.py,test_stream_writer,assert data == s.encode('pdfdoc'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pikepdf,pikepdf,tests/test_codec.py,test_stream_reader,assert result == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/cli/test_fetchparams.py,test_fuzzing,assert config[s] == t,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/sync/test_status.py,test_legacy_status,assert dict(status.to_legacy_status()) == status_dict,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/sync/test_status.py,test_legacy_status,assert meta2_a.to_status() == meta_a,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/sync/test_status.py,test_legacy_status,assert meta2_b.to_status() == meta_b,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/sync/test_status.py,test_legacy_status,assert ident_a == ident_b == ident,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/test_metasync.py,test_fuzzing,assert await a.get_meta(key) == await b.get_meta(key) == s,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/test_metasync.py,test_fuzzing,assert s == expected_values[key],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/test_repair.py,test_repair_uids,assert uid1 == uid2,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/test_repair.py,test_repair_uids,assert uid1 != uid2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
pimutils,vdirsyncer,tests/unit/test_repair.py,test_repair_unsafe_uids,assert (await s.get(href))[0].uid == uid,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/test_repair.py,test_repair_unsafe_uids,assert not href_safe(uid),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/utils/test_vobject.py,test_replace_uid,assert item.uid == uid,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/utils/test_vobject.py,test_replace_uid,assert item.raw.count(f'\nUID:{uid}') == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pimutils,vdirsyncer,tests/unit/utils/test_vobject.py,test_replace_uid,assert '\nUID:' not in item.raw,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
poliastro,poliastro,tests/tests_core/test_core_util.py,test_alinspace_no_max_value_uses_full_circle,assert result.max() - result.min() == pytest.approx(2 * np.pi),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
poljar,weechat-matrix,tests/color_test.py,test_color_conversion,assert new_color_name == color_name,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
poljar,weechat-matrix,tests/color_test.py,test_unpaired_prefix_asterisk_without_space_is_literal,assert text.strip() == formatted.to_weechat(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
poljar,weechat-matrix,tests/http_parser_test.py,test_html_named_entity_parsing,assert parser.unescape('&{};'.format(name)) == character,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
poljar,weechat-matrix,tests/http_parser_test.py,test_html_numeric_reference_parsing,assert parser.unescape('&#{};'.format(num)) == character,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
poljar,weechat-matrix,tests/http_parser_test.py,test_html_entityref_reconstruction_from_name,assert s[0].text == parser.unescape('&{};'.format(name)) and len(s) == 1,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False
poljar,weechat-matrix,tests/http_parser_test.py,test_html_charref_reconstruction_from_name,assert s[0].text == parser.unescape('&#{};'.format(num)) and len(s) == 1,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False
poljar,matrix-nio,tests/key_export_test.py,test_encrypt,assert data == plaintext,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_camera.py,test_transformation_roundtrip,"assert point_viewport.isclose(point, rel_tol=1e-05, rel_to=[cam.position])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_camera.py,test_transformation_roundtrip,"assert point_frame.isclose(point, rel_tol=1e-05, rel_to=[cam.position])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom,"assert isclose(sprite.bottom, y - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_set,assert sprite.bottom == y,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_set,assert sprite.position.y == y + 0.5,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_plus_equals,assert sprite.bottom == y - 0.5,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_middle,"assert isclose(bottom_middle.y, y - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_middle,"assert isclose(bottom_middle.x, x)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_middle_set,"assert bottom_middle == Vector(x, y)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_middle_set,"assert sprite.position == bottom_middle + Vector(0, 0.5)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_middle_plus_equals,"assert bottom_middle == Vector(x, y - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_left,"assert isclose(bottom_left.y, y - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_left,"assert isclose(bottom_left.x, x - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_left_set,"assert bottom_left == Vector(x, y)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_left_set,"assert sprite.position == bottom_left + Vector(0.5, 0.5)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_left_plus_equals,"assert bottom_left == Vector(x - 0.5, y - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_right,"assert isclose(bottom_right.y, y - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_right,"assert isclose(bottom_right.x, x + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_right_set,"assert bottom_right == Vector(x, y)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_right_set,"assert sprite.position == bottom_right + Vector(-0.5, 0.5)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_bottom_right_plus_equals,"assert bottom_right == Vector(x + 0.5, y - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_center_equals_position,assert sprite.center == sprite.position,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_center_setting,assert sprite.center.x == x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_center_setting,assert sprite.center.y == y,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_center_setting,assert sprite.position == sprite.center,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_center_plus_equals,assert sprite.position.x == x + delta_x,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_center_plus_equals,assert sprite.position.y == y + delta_y,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_center_plus_equals,assert sprite.position == sprite.center,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_left,"assert isclose(sprite.left, x - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_left_set,assert sprite.left == x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_left_set,assert sprite.position.x == x + 0.5,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_left_plus_equals,assert sprite.left == x - 0.5,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_left_middle,"assert isclose(left_middle.y, y)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_left_middle,"assert isclose(left_middle.x, x - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_left_middle_set,"assert left_middle == Vector(x, y)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_left_middle_set,"assert sprite.position == left_middle + Vector(0.5, 0)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_left_middle_plus_equals,"assert left_middle == Vector(x - 0.5, y)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_right,"assert isclose(sprite.right, x + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_right_set,assert sprite.right == x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_right_set,assert sprite.position.x == x - 0.5,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_right_plus_equals,assert sprite.right == x + 0.5,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_right_middle,"assert isclose(right_middle.y, y)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_right_middle,"assert isclose(right_middle.x, x + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_right_middle_set,"assert right_middle == Vector(x, y)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_right_middle_set,"assert sprite.position == right_middle + Vector(-0.5, 0)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_right_middle_plus_equals,"assert right_middle == Vector(x + 0.5, y)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top,"assert isclose(sprite.top, y + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_set,assert sprite.top == y,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_set,assert sprite.position.y == y - 0.5,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_plus_equals,assert sprite.top == y + 0.5,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_middle,"assert isclose(top_middle.y, y + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_middle,"assert isclose(top_middle.x, x)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_middle_set,"assert top_middle == Vector(x, y)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_middle_set,"assert sprite.position == top_middle + Vector(0, -0.5)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_middle_plus_equals,"assert top_middle == Vector(x, y + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_left,"assert isclose(top_left.y, y + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_left,"assert isclose(top_left.x, x - 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_left_set,"assert top_left == Vector(x, y)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_left_set,"assert sprite.position == top_left + Vector(0.5, -0.5)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_left_plus_equals,"assert top_left == Vector(x - 0.5, y + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_right,"assert isclose(top_right.y, y + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_right,"assert isclose(top_right.x, x + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_right_set,"assert top_right == Vector(x, y)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_right_set,"assert sprite.position == top_right + Vector(-0.5, -0.5)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ppb,pursuedpybear,tests/test_sprites.py,test_sides_top_right_plus_equals,"assert top_right == Vector(x + 0.5, y + 0.5)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_identity_should_return_first_argument,assert identity(text) is text,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_identity_should_return_first_argument,assert identity(integer) is integer,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_compose_should_applied_function_on_value_and_return_it_result,"assert compose(integer, increase) == integer + 1",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_compose_should_applied_function_on_value_and_return_it_result,"assert compose(integer, increase, increase) == integer + 2",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_compose_should_applied_function_on_value_and_return_it_result,"assert compose(integer, increase, increase, increase) == integer + 3",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_compose_should_appield_functions_from_last_to_first,"assert compose(integer, increase, lambda value: value * 2) == integer * 2 + 1",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_eq,"assert eq(text, text)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_eq,assert eq(text)(text),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_pipe_should_appield_functions_from_first_to_last,"assert pipe(integer, increase, lambda value: value * 2) == (integer + 1) * 2",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_find_should_return_none_when_item_is_not_in_collection_otherwise_should_return_item,"assert find(lst_copy, eq(integer)) == integer",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils.py,test_find_should_return_none_when_item_is_not_in_collection_otherwise_should_return_item,"assert find(lst[1:], eq(lst[0])) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_1_argument,assert fn(integer1) == fn(integer1),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_2_arguments,"assert fn(integer1)(integer2) == fn(integer1, integer2)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_3_arguments,"assert fn(integer1)(integer2)(integer3) == fn(integer1, integer2, integer3)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_3_arguments,"assert fn(integer1, integer2)(integer3) == fn(integer1, integer2, integer3)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_3_arguments,"assert fn(integer1)(integer2, integer3) == fn(integer1, integer2, integer3)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_4_arguments,"assert fn(integer1)(integer2)(integer3)(integer4) == fn(integer1, integer2, integer3, integer4)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_4_arguments,"assert fn(integer1, integer2, integer3)(integer4) == fn(integer1, integer2, integer3, integer4)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_4_arguments,"assert fn(integer1, integer2)(integer3, integer4) == fn(integer1, integer2, integer3, integer4)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_4_arguments,"assert fn(integer1)(integer2, integer3, integer4) == fn(integer1, integer2, integer3, integer4)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_4_arguments,"assert fn(integer1, integer2)(integer3)(integer4) == fn(integer1, integer2, integer3, integer4)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_utils_curry.py,test_curry_4_arguments,"assert fn(integer1)(integer2, integer3, integer4) == fn(integer1, integer2, integer3, integer4)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_maybe.py,test_maybe_eq_operator_should_compare_values,assert Maybe.just(integer) == Maybe.just(integer),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_maybe.py,test_maybe_eq_operator_should_compare_values,assert Maybe.just(integer) != Maybe.nothing(),False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
przemyslawjanpietrzak,pyMonet,tests/test_maybe.py,test_maybe_get_or_else_method_should_return_maybe_value_when_monad_is_not_empty,assert Maybe.just(integer).get_or_else(0) is integer,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_maybe.py,test_maybe_get_or_else_method_should_return_argument_when_monad_is_empty,assert Maybe.nothing().get_or_else(integer) is integer,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_maybe.py,test_maybe_is_nothing_should_return_proper_boolean,assert Maybe.just(integer).is_nothing is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_maybe.py,test_maybe_transform,assert Maybe.nothing().to_box() == Box(None),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_maybe.py,test_maybe_transform,assert Maybe.nothing().to_either() == Left(None),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_maybe.py,test_maybe_transform,assert Maybe.nothing().to_lazy().get() is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_maybe.py,test_maybe_transform,"assert Maybe.nothing().to_try() == Try(None, is_success=False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_maybe.py,test_maybe_transform,assert Maybe.nothing().to_validation() == Validation.success(None),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_lazy.py,test_transform_to_validation_should_validation,assert Lazy(lambda: integer).to_validation() == Validation.success(integer),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_lazy.py,test_lazy_applicative,assert Lazy(increase).ap(Lazy(lambda: integer)).get() == increase(integer),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_try.py,test_get_or_default_method_should_return_value_when_exception_was_not_thrown,assert Try.of(try_spy.fn).get_or_else(text) == 42,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_try.py,test_try_monad_left_unit_law,"assert Try(integer, True).bind(lambda value: Try(value + 1, True)) == Try(increase(integer), True)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_try.py,test_try_monad_right_unit_law,"assert Try(integer, True).bind(lambda value: Try(value, True)) == Try(integer, True)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_either_eq_operator_should_compare_values,assert Right(integer) == Right(integer),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_either_eq_operator_should_compare_values,assert Right(integer) != Right(integer + 1),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_either_eq_operator_should_compare_values,assert Left(integer) == Left(integer),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_either_eq_operator_should_compare_values,assert Left(integer) != Left(integer + 1),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_either_eq_operator_should_compare_values,assert Right(integer) != Left(integer),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_mapper_should_be_applied_only_on_current_value,assert Left(integer).map(increase) == Left(integer),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_mapper_should_be_applied_only_on_current_value,assert Right(integer).map(increase) == Right(increase(integer)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_is_right_should_return_suitable_value,assert Right(integer).is_right(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_is_right_should_return_suitable_value,assert not Left(integer).is_right(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_is_left_should_return_suitable_value,assert Left(integer).is_left(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_is_left_should_return_suitable_value,assert not Right(integer).is_left(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_either_ap_on_left_should_not_be_applied,assert Left(integer).ap(Right(lambda_fn)) == Left(integer),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_either.py,test_either_ap_on_left_should_not_be_applied,assert Left(integer).ap(Left(lambda_fn)) == Left(integer),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_semigroups.py,test_fold,assert First(text).fold(identity) is text,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_semigroups.py,test_fold,assert All(boolean).fold(identity) is boolean,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
przemyslawjanpietrzak,pyMonet,tests/test_semigroups.py,test_fold,assert Map(dictionary).fold(identity) is dictionary,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ptrus,suffix-trees,suffix_trees/test/test_gen.py,test_find_substring_true,assert STree.STree(string).find(substr) > -1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
ptrus,suffix-trees,suffix_trees/test/test_gen.py,test_find_substring_false,assert STree.STree(string).find(substr) == -1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ptrus,suffix-trees,suffix_trees/test/test_gen.py,test_find_all_substring_true,assert len(STree.STree(string).find_all(substr)) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
ptrus,suffix-trees,suffix_trees/test/test_gen.py,test_find_all_substring_false,assert STree.STree(string).find_all(substr) == {},False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
public,sonora,tests/test_protocol.py,test_timeout_serdes,"assert abs(timeout - des) < 1e-09, (timeout, ser)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
py-lidbox,lidbox,tests/test_models.py,test_ap_lstm,assert not np.isnan(y).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
py-lidbox,lidbox,tests/test_models.py,test_ap_lstm,"assert y.shape == (x.shape[0], 4 * num_lstm_units)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pycco-docs,pycco,tests/test_pycco.py,test_shift,"assert p.shift(fragments, default) == default",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pycco-docs,pycco,tests/test_pycco.py,test_shift,assert [head] + fragments == fragments2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pycco-docs,pycco,tests/test_pycco.py,test_destination,assert dest.startswith(outdir),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pycco-docs,pycco,tests/test_pycco.py,test_destination,assert dest.endswith('.html'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pycco-docs,pycco,tests/test_pycco.py,test_parse,"assert {'code_text', 'docs_text'} == set(s.keys())",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pycco-docs,pycco,tests/test_pycco.py,test_get_language_specify_language,"assert p.get_language(source, code, language_name='python') == supported_languages['.py']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pycco-docs,pycco,tests/test_pycco.py,test_get_language_bad_source,"assert p.get_language(source, code) == PYTHON",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pycco-docs,pycco,tests/test_pycco.py,test_get_language_bad_source,"assert p.get_language(source, 'badlang')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pycco-docs,pycco,tests/test_pycco.py,test_get_language_bad_code,"assert p.get_language(source, code) == PYTHON",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pycco-docs,pycco,tests/test_pycco.py,test_ensure_directory,assert os.path.isdir(safe_name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_pandas_roundtrip.py,test_roundtrip_dataarray,"xr.testing.assert_identical(original, roundtripped)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_pandas_roundtrip.py,test_roundtrip_dataset,"assert isinstance(df, pd.DataFrame)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pydata,xarray,properties/test_pandas_roundtrip.py,test_roundtrip_dataset,"xr.testing.assert_identical(dataset, roundtripped)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_pandas_roundtrip.py,test_roundtrip_pandas_series,"pd.testing.assert_series_equal(ser, roundtripped)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_pandas_roundtrip.py,test_roundtrip_pandas_series,"xr.testing.assert_identical(arr, roundtripped.to_xarray())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_pandas_roundtrip.py,test_roundtrip_pandas_dataframe,"pd.testing.assert_frame_equal(df, roundtripped)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_pandas_roundtrip.py,test_roundtrip_pandas_dataframe,"xr.testing.assert_identical(arr, roundtripped.to_xarray())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_pandas_roundtrip.py,test_roundtrip_pandas_dataframe_datetime,"pd.testing.assert_frame_equal(df, roundtripped)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_pandas_roundtrip.py,test_roundtrip_pandas_dataframe_datetime,"xr.testing.assert_identical(dataset, roundtripped.to_xarray())",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_encode_decode.py,test_CFMask_coder_roundtrip,"xr.testing.assert_identical(original, roundtripped)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_encode_decode.py,test_CFMask_coder_decode,assert np.isnan(decoded[0]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_encode_decode.py,test_CFScaleOffset_coder_roundtrip,"xr.testing.assert_identical(original, roundtripped)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pydata,xarray,properties/test_encode_decode.py,test_iso8601_decode,assert dt == parsed,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_add_column.py,test_add_column_scalar,assert 'fortytwo' in df.columns,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_add_column.py,test_add_column_fill_remaining_iterable,assert not pd.isna(df['fill_in_iterable']).any(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_encode_categorical.py,test_encode_categorical,assert df['names'].dtypes == 'category',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_encode_categorical.py,test_all_None,assert expected['names'].equals(result['names']),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_encode_categorical.py,test_all_cat_None_1,assert expected['names'].equals(result['names']),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_encode_categorical.py,test_all_cat_None_2,assert expected['names'].equals(result['names']),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_encode_categorical.py,test_all_cat_not_None,assert expected['numbers'].equals(result['numbers']),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_reorder_columns.py,test_reorder_columns,assert all(df.reorder_columns(df.columns).columns == df.columns),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_reorder_columns.py,test_reorder_columns,"assert all(df.reorder_columns(['animals@#$%^', 'Bell__Chart']).columns == ['animals@#$%^', 'Bell__Chart', 'a', 'decorated-elephant', 'cities'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_remove_empty.py,test_remove_empty,assert not pd.isna(df[col]).all(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_remove_empty.py,test_remove_empty,assert not pd.isna(d).all(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/math/test_ecdf.py,test_ecdf,assert len(x) == len(y),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/ml/test_get_features_targets.py,test_get_features_targets,assert X.shape[1] == 4,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/ml/test_get_features_targets.py,test_get_features_targets,assert len(y.shape) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/ml/test_get_features_targets.py,test_get_features_targets_multi_features,assert X.shape[1] == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/ml/test_get_features_targets.py,test_get_features_targets_multi_features,assert len(y.shape) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/ml/test_get_features_targets.py,test_get_features_target_multi_columns,assert X.shape[1] == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/ml/test_get_features_targets.py,test_get_features_target_multi_columns,assert y.shape[1] == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_filter_column_isin.py,test_filter_column_isin,assert set(df['names']).issubset(iterable),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyjanitor-devs,pyjanitor,tests/functions/test_bin_numeric.py,test_bin_numeric_expected_columns,assert set(df.columns) == set(expected_columns),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pymor,pymor,src/pymortests/tools.py,test_vtkio,assert len(meshes) == len(data),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pymtl,pymtl3,examples/ex02_cksum/test/ChecksumCL_test.py,test_hypothesis,assert s.cksum_func(words) == checksum(words),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pymtl,pymtl3,examples/ex02_cksum/test/utils_test.py,test_hypothesis,assert b128_to_words(words_to_b128(words)) == words,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_string_conversion2,assert sjs == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_string_conversion2,assert run_js('(spy) => spy === self.sjs')(s),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_number_conversions,assert x_js == float(n),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_number_conversions,assert x_js == n,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_number_conversions_2,assert run_js('(n) => typeof n')(n) == 'number',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_number_conversions_2,"assert isinstance(n_js, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_number_conversions_2,"assert isinstance(n_js, float)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_number_conversions_3,assert jsty == 'number',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_number_conversions_3,assert jsty == 'bigint',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_number_conversions_3,"assert isinstance(n_js, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pyodide,pyodide,src/tests/test_typeconversions.py,test_number_conversions_3,"assert isinstance(n_js, float)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pypa,linehaul,tests/test_strategies.py,test_greater_than_minimum,assert self._ver_2_list(version) >= self._ver_2_list(min_version),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pypa,linehaul,tests/test_strategies.py,test_less_than_maximum,assert self._ver_2_list(version) <= self._ver_2_list(max_version),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pypa,linehaul,tests/test_strategies.py,test_inbetween_min_and_max,assert self._ver_2_list(min_version) <= self._ver_2_list(version) <= self._ver_2_list(max_version),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pypa,linehaul,tests/test_strategies.py,test_produces_with_more_digits_than_min,assert len(version.split('.')) >= min_digits,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pypa,linehaul,tests/test_strategies.py,test_produces_with_less_digits_than_max,assert len(version.split('.')) <= max_digits,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pypa,linehaul,tests/test_strategies.py,test_produces_inbetween_min_and_max_digits,assert min_digits <= len(version.split('.')) <= max_digits,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pypa,linehaul,tests/test_strategies.py,test_mixture,assert self._ver_2_list(min_version) <= self._ver_2_list(version) <= self._ver_2_list(max_version),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pypa,linehaul,tests/test_strategies.py,test_mixture,assert min_digits <= len(version.split('.')) <= max_digits,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pypa,linehaul,tests/unit/protocol/test_line_receiver.py,test_yields_lines,assert lines == [i + b'\n' for i in b''.join(data).split(b'\n')[:-1]],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/protocol/test_line_receiver.py,test_skips_none_return_callback,assert lines == [i + b'\n' for i in b''.join(data).split(b'\n')[:-1] if i != skipped[:-1]],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/ua/test_parser.py,test_valid_data,assert parser.Pip1_4UserAgent(ua) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_invalid_token_skips,"assert parse_line(line, token=token) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_unparseable_syslog,"assert parse_line(line, token=token) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_unparseable_syslog,"assert caplog.record_tuples == [('linehaul.server', logging.ERROR, ANY)]",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_unparseable_syslog,assert caplog.record_tuples[0][2].startswith('Unparseable syslog message'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_unparseable_event,"assert parse_line(line, token=token) is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_unparseable_event,"assert caplog.record_tuples == [('linehaul.server', logging.ERROR, ANY)]",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_unparseable_event,assert caplog.record_tuples[0][2].startswith('Unparseable event:'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_extract_item_data,assert extract_item_date(download) == expected,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_compute_batches,assert datetime.date.fromtimestamp(item['json']['timestamp']) == template_date,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_compute_batches,assert len(ids) == len(events),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/test_server.py,test_compute_batches,assert total_events == len(events),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pypa,linehaul,tests/unit/syslog/test_parser.py,test_syslog_parsing,assert parse(line) == syslog_message,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pytest-dev,pytest,testing/python/metafunc.py,test_idval_hypothesis,"assert isinstance(escaped, str)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_str,assert (str(e) == repr(e)) is add_str,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_hash_mirrors_eq,assert i == i,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_hash_mirrors_eq,assert hash(i) == hash(i),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_init,"assert e.value.args[0].endswith(""__init__() got an unexpected keyword argument 'a'"")",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_no_init_default,"assert (42, [], 23) == (i._a, i._b, i.c)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_validator_others,assert 1 == i.a,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_dunders.py,test_validator_others,assert 'foo' == i.b,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_instance,assert 'Passed object must be a class.' == e.value.args[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_fields,"assert all((isinstance(a, Attribute) for a in fields(C)))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_fields_properties,"assert getattr(fields(C), attribute.name) is attribute",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_instance,assert 'Passed object must be a class.' == e.value.args[0],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_fields_dict,"assert isinstance(d, dict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_fields_dict,assert list(fields(C)) == list(d.values()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_fields_dict,assert [a.name for a in fields(C)] == list(d),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_convert_property,assert c.x == val + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_convert_property,assert c.y == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_converter_factory_property,assert c.x == val + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_converter_factory_property,assert c.y == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_metadata_present,assert class_attr.metadata is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
python-attrs,attrs,tests/test_make.py,test_metadata_present,assert len(class_attr.metadata) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_metadata_present,assert hyp_attr.metadata == class_attr.metadata,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_metadata_present,assert hyp_attr.metadata[k] == class_attr.metadata[k],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_metadata_present,assert hyp_attr.metadata.get(k) == class_attr.metadata.get(k),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_empty_metadata_singleton,assert a.metadata is fields(C)[0].metadata,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_empty_countingattr_metadata_independent,assert x.metadata is not y.metadata,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
python-attrs,attrs,tests/test_make.py,test_not_none_metadata,assert len(fields(C)) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-attrs,attrs,tests/test_make.py,test_not_none_metadata,assert cls_a.metadata != {},False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
python-attrs,attrs,tests/test_make.py,test_not_none_metadata,assert cls_a.metadata == raw_a.metadata,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_functional.py,test_programmatic,"assert (Attribute(name='a', alias='a', default=NOTHING, validator=None, repr=True, cmp=None, eq=True, order=True, hash=None, init=True, inherited=False), Attribute(name='b', alias='b', default=NOTHING, validator=None, repr=True, cmp=None, eq=True, order=True, hash=None, init=True, inherited=False)) == attr.fields(PC)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_shallow,"assert {'x': 1, 'y': 2} == asdict(C(x=1, y=2), False, dict_factory=dict_factory)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_recurse,"assert {'x': {'x': 1, 'y': 2}, 'y': {'x': 3, 'y': 4}} == asdict(C(C(1, 2), C(3, 4)), dict_factory=dict_class)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_filter,"assert {'x': {'x': 1}} == asdict(C(C(1, 2), C(3, 4)), filter=lambda a, v: a.name != 'y', dict_factory=dict_factory)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_sets_no_retain,"assert {'x': 1, 'y': [1, 2, 3]} == d",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_dicts,"assert {'x': 1, 'y': {'a': {'x': 4, 'y': 5}}} == res",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_dicts,"assert isinstance(res, dict_factory)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_roundtrip,"assert isinstance(dict_instance, dict_class)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_roundtrip,assert instance == roundtrip_instance,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_asdict_preserve_order,assert [a.name for a in fields(cls)] == list(dict_instance.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_shallow,"assert tuple_factory([1, 2]) == astuple(C(x=1, y=2), False, tuple_factory=tuple_factory)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_recurse,"assert tuple_factory([tuple_factory([1, 2]), tuple_factory([3, 4])]) == astuple(C(C(1, 2), C(3, 4)), tuple_factory=tuple_factory)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_filter,"assert tuple_factory([tuple_factory([1])]) == astuple(C(C(1, 2), C(3, 4)), filter=lambda a, v: a.name != 'y', tuple_factory=tuple_factory)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_dicts,"assert tuple_factory([1, {'a': tuple_factory([4, 5])}]) == res",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_dicts,"assert isinstance(res, tuple_factory)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_roundtrip,"assert isinstance(tuple_instance, tuple_class)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_roundtrip,assert instance == roundtrip_instance,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_sets_no_retain,"assert (1, [1, 2, 3]) == d",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_no_changes,assert i1 is not i2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
python-attrs,attrs,tests/test_funcs.py,test_no_changes,assert i1 == i2,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_change,"assert getattr(changed, k) == v",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_unknown,"assert (f'aaaa is not an attrs attribute on {C!r}.',) == e.value.args",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_no_changes,assert i1 is not i2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
python-attrs,attrs,tests/test_funcs.py,test_no_changes,assert i1 == i2,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_change,"assert getattr(changed, name) == change_dict[name.replace('_', '')]",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-attrs,attrs,tests/test_funcs.py,test_unknown,assert e.value.args[0].endswith(expected),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_idna_text_min_max,"self.assertRaises(AssertionError, data.draw, idna_text(min_size=0))",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_idna_text_min_max,"self.assertRaises(AssertionError, data.draw, idna_text(max_size=0))",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_port_numbers_bounds,"self.assertGreaterEqual(port, 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_port_numbers_bounds,"self.assertLessEqual(port, 65535)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_port_numbers_bounds_allow_zero,"self.assertGreaterEqual(port, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_port_numbers_bounds_allow_zero,"self.assertLessEqual(port, 65535)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_hostnames_idn_nolead,self.assertTrue(hostname == hostname.lstrip(digits)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_hostnames_ascii_nolead,self.assertTrue(hostname == hostname.lstrip(digits)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_paths,"self.assertNotIn('#/?', segment)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_encoded_urls,"self.assertIsInstance(url, EncodedURL)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-hyper,hyperlink,src/hyperlink/test/test_hypothesis.py,test_decoded_urls,"self.assertIsInstance(url, DecodedURL)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-hyper,brotlicffi,test/test_simple_compression.py,test_streaming_compression,assert decompressed == f.read(),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,brotlicffi,test/test_simple_compression.py,test_streaming_compression_flush,assert decompressed == f.read(),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,brotlicffi,test/test_simple_compression.py,test_compressed_data_roundtrips,assert brotlicffi.decompress(brotlicffi.compress(s)) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,brotlicffi,test/test_simple_compression.py,test_process_alias,assert d1.decompress(s1) + d1.finish() == d2.process(s2) + d2.finish() == s,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_streams_are_well_ordered,assert sorted(streams_by_id) == streams_by_id,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_stream_ordering,assert (s1 < s2) == (a < b),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_stream_ordering,assert (s1 <= s2) == (a <= b),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_stream_ordering,assert (s1 > s2) == (a > b),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_stream_ordering,assert (s1 >= s2) == (a >= b),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_stream_ordering,assert (s1 == s2) == (a == b),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_stream_ordering,assert (s1 != s2) == (a != b),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_priority_tree_initially_outputs_all_stream_ids,assert expected == result,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_priority_tree_blocking_is_isomorphic,assert expected == result,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_removing_items_behaves_similarly_to_blocking,assert expected == result,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_period_of_repetition,"assert next(p) == next(pattern), i",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
python-hyper,priority,test/test_priority.py,test_priority_tree_distribution,assert len(count) == len(streams_and_weights),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
python-trio,pytest-trio,pytest_trio/_tests/test_hypothesis_interaction.py,test_mark_inner,"assert isinstance(n, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-trio,pytest-trio,pytest_trio/_tests/test_hypothesis_interaction.py,test_mark_outer,"assert isinstance(n, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
python-trio,pytest-trio,pytest_trio/_tests/test_hypothesis_interaction.py,test_mark_and_parametrize,assert x is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytorch,opacus,opacus/tests/dp_layers/dp_multihead_attention_test.py,test_dp_attn_hook,self.assertFalse('in_proj_bias' in dp_attn.state_dict()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_bytes_trie.py,test_contains,assert word in trie,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_bytes_trie.py,test_contains,assert missing_key not in trie,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_bytes_trie.py,test_getitem,assert trie[key] == [value],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_bytes_trie.py,test_iteritems,assert trie.items() == list(trie.iteritems()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_bytes_trie.py,test_iteritems,assert trie.items(prefix) == list(trie.iteritems(prefix)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_bytes_trie.py,test_iterkeys,assert trie.keys() == list(trie.iterkeys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_bytes_trie.py,test_iterkeys,assert trie.keys(prefix) == list(trie.iterkeys(prefix)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_bytes_trie.py,test_dumps_loads,assert trie == pickle.load(buf),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_init,assert key in trie,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_init,assert missing_key not in trie,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_key_id,assert trie.restore_key(key_id) == key,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_getitem,assert trie.restore_key(key_id) == key,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_get,assert trie.restore_key(key_id) == key,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_get,assert trie.restore_key(key_id) == key,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_get,assert trie.get(b'non_existing_bytes_key') is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_get,"assert trie.get(b'non_existing_bytes_key', 'default value') == 'default value'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_saveload,assert key in trie2,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_mmap,assert key in trie2,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_tobytes_frombytes,assert key in trie2,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_tobytes_frombytes,assert trie2.key_id(key) == trie.key_id(key),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_dumps_loads,assert key in trie2,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_dumps_loads,assert trie2.key_id(key) == trie.key_id(key),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_iterkeys,assert trie.keys() == list(trie.iterkeys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_iterkeys,assert trie.keys(prefix) == list(trie.iterkeys(prefix)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_iteritems,assert trie.items() == list(trie.iteritems()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_binary_trie.py,test_iteritems,assert trie.items(prefix) == list(trie.iteritems(prefix)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_record_trie.py,test_dumps_loads,assert trie == pickle.load(buf),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_init,assert key in trie,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_init,assert missing_key not in trie,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_key_id,assert trie.restore_key(key_id) == key,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_getitem,assert trie.restore_key(key_id) == key,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_get,assert trie.restore_key(key_id) == key,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_get,assert trie.restore_key(key_id) == key,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_get,assert trie.restore_key(key_id) == key,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_get,assert trie.get('non_existing_key') is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_get,assert trie.get(b'non_existing_bytes_key') is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_get,"assert trie.get('non_existing_key', 'default value') == 'default value'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_get,"assert trie.get(b'non_existing_bytes_key', 'default value') == 'default value'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_saveload,assert key in trie2,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_mmap,assert key in trie2,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_map,assert key in trie2,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_map_with_pad,assert key in trie2,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_tobytes_frombytes,assert key in trie2,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_tobytes_frombytes,assert trie2.key_id(key) == trie.key_id(key),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_dumps_loads,assert key in trie2,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_dumps_loads,assert trie2.key_id(key) == trie.key_id(key),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_iterkeys,assert trie.keys() == list(trie.iterkeys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_iterkeys,assert trie.keys(prefix) == list(trie.iterkeys(prefix)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_iteritems,assert trie.items() == list(trie.iteritems()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,marisa-trie,tests/test_trie.py,test_iteritems,assert trie.items(prefix) == list(trie.iteritems(prefix)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_contains,assert word in trie,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_contains,assert trie[word] == trie.get(word) == i + 1,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_len,assert len(trie) == len(set(words)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_pickle_unpickle,assert word in trie,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_pickle_unpickle,assert trie[word] == i,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_pop,assert trie.pop(word) == i,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_pop,"assert trie.pop(word, 42) == trie.get(word, 42) == 42",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_clear,assert len(trie) == len(words),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_clear,assert not trie,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_clear,assert len(trie) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pytries,datrie,tests/test_random.py,test_clear,assert trie[word] == i,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_discover.py,test_device_number,assert a_device in res,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_discover.py,test_path,"assert res == set((a_device,))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_discover.py,test_name,assert a_device in res,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_discover.py,test_anything,assert a_device in results,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_attributes_tests.py,test_getitem,"assert isinstance(value, bytes)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_attributes_tests.py,test_getitem_nonexisting,assert a_device.attributes.get(not_key) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_util.py,test_get_device_type_character_device,assert _util.get_device_type(a_device.device_node) == 'char',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_util.py,test_get_device_type_block_device,assert _util.get_device_type(a_device.device_node) == 'block',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_parent,"assert a_device.parent is None or isinstance(a_device.parent, Device)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_child_of_parent,assert a_device in a_device.parent.children,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_children,assert child != a_device,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_children,assert a_device in child.ancestors,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_ancestors,assert ancestor == child.parent,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_find_parent,assert parent.subsystem == a_device.subsystem,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_find_parent,assert parent in a_device.ancestors,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_find_parent_no_devtype_mock,"assert isinstance(parent, Device)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_find_parent_no_devtype_mock,assert parent._as_parameter_ is mock.sentinel.referenced_device,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_find_parent_no_devtype_mock,"get_parent.assert_called_once_with(a_device, b'subsystem', None)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_find_parent_with_devtype_mock,"assert isinstance(parent, Device)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_find_parent_with_devtype_mock,assert parent._as_parameter_ is mock.sentinel.referenced_device,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_find_parent_with_devtype_mock,"get_parent.assert_called_once_with(a_device, b'subsystem', b'devtype')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_traverse,assert parent == child.parent,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_sys_path,assert device.sys_path == device_datum.sys_path,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_sys_path,assert is_unicode_string(device.sys_path),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_device_path,assert device.device_path == device_datum.device_path,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_device_path,assert is_unicode_string(device.device_path),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_subsystem,assert device.subsystem == device_datum.properties['SUBSYSTEM'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_subsystem,assert is_unicode_string(device.subsystem),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_device_sys_name,"assert a_device.sys_name.replace('/', '!') == os.path.basename(a_device.device_path)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_device_sys_name,assert is_unicode_string(a_device.sys_name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_sys_number,assert a_device.sys_number == match.group(0),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_sys_number,assert is_unicode_string(a_device.sys_name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_sys_number,assert a_device.sys_number is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_type,assert device.device_type == device_datum.properties.get('DEVTYPE'),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_type,assert is_unicode_string(device.device_type),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_driver,assert device.driver == device_datum.properties.get('DRIVER'),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_driver,assert is_unicode_string(device.driver),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_device_node,assert device.device_node == device_datum.device_node,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_device_node,assert is_unicode_string(device.device_node),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_device_number,assert device.device_number == device_datum.device_number,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_is_initialized,"assert isinstance(a_device.is_initialized, bool)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_is_initialized_mock,assert not a_device.is_initialized,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_is_initialized_mock,func.assert_called_once_with(a_device),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_time_since_initialized,"assert isinstance(a_device.time_since_initialized, timedelta)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_time_since_initialized_mock,assert a_device.time_since_initialized.microseconds == 100,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_time_since_initialized_mock,func.assert_called_once_with(a_device),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_links,assert sorted(device.device_links) == sorted(device_datum.device_links),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_links,assert is_unicode_string(link),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_action,assert a_device.action is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_action_mock,assert a_device.action == 'spam',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_action_mock,func.assert_called_once_with(a_device),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_action_mock,assert is_unicode_string(a_device.action),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_action_mock,func.assert_called_once_with(a_device),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_sequence_number,assert a_device.sequence_number == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_attributes,"assert isinstance(a_device.attributes, Attributes)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_tags,"assert isinstance(a_device.tags, Tags)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_iteration,assert is_unicode_string(prop),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_iteration,assert prop in device_properties,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_length,assert frozenset(device_datum.properties.keys()) == frozenset(device.properties.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_key_subset,assert frozenset(device_datum.properties.keys()) <= frozenset(device.properties.keys()),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_getitem,assert sorted(device.properties[prop].split()) == sorted(device_datum.properties[prop].split()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_getitem,assert sorted(device.properties[prop].split(':')) == sorted(device_datum.properties[prop].split(':')),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_getitem_devname,assert device_devname == data_devname,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_getitem_nonexisting,assert str(excinfo.value) == repr('a non-existing property'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_asbool,assert device.properties.asbool(prop),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_asbool,assert not device.properties.asbool(prop),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_hash,assert hash(a_device) == hash(a_device.device_path),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_hash,assert hash(a_device.parent) == hash(a_device.parent),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_hash,assert hash(a_device.parent) != hash(a_device),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_equality,assert a_device == a_device.device_path,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_equality,assert a_device == a_device,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_equality,assert a_device.parent == a_device.parent,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_equality,assert not a_device == a_device.parent,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_inequality,assert not a_device != a_device.device_path,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_inequality,assert not a_device != a_device,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_inequality,assert not a_device.parent != a_device.parent,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_inequality,assert a_device != a_device.parent,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_device_ordering,assert str(exc_info.value) == 'Device not orderable',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_id_wwn_with_extension,assert a_device.subsystem == 'block',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_id_wwn_with_extension,assert match is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
pyudev,pyudev,tests/_device_tests/_device_tests.py,test_id_wwn_with_extension,assert target_path == a_device.device_node,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_devices_tests.py,test_from_path,"assert a_device == Devices.from_path(a_context, a_device.device_path)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_devices_tests.py,test_from_path_strips_leading_slash,"assert Devices.from_path(a_context, path[1:]) == Devices.from_path(a_context, path)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_devices_tests.py,test_from_sys_path,"assert a_device == Devices.from_sys_path(a_context, a_device.sys_path)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_devices_tests.py,test_from_name,assert new_device == a_device,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_devices_tests.py,test_from_name_no_device_in_existing_subsystem,assert error.subsystem == subsys,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_devices_tests.py,test_from_name_no_device_in_existing_subsystem,assert error.sys_name == 'foobar',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_devices_tests.py,test_from_device_number,assert a_device == device,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_devices_tests.py,test_from_device_file,assert a_device == device,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_tags_tests.py,test_iteration_and_contains,assert frozenset(device.tags) == frozenset(device_datum.tags),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_tags_tests.py,test_iteration_and_contains,assert all((is_unicode_string(tag) for tag in device.tags)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_tags_tests.py,test_iteration_mock,"assert tags == ['spam', 'eggs']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_tags_tests.py,test_iteration_mock,func.assert_called_once_with(a_device),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_tags_tests.py,test_contains_mock,assert 'foo' in a_device.tags,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/_device_tests/_tags_tests.py,test_contains_mock,"func.assert_called_once_with(a_device, b'foo')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_enumerate.py,test_match_subsystem_nomatch_unfulfillable,assert not list(devices),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_enumerate.py,test_match_property_bool,assert all((device.properties[key] == value and device.properties.asbool(key) == bool_value for device in devices)),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_enumerate.py,test_match_parent,assert device in children,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_enumerate.py,test_match_passthrough_subsystem,match_subsystem.assert_called_with(mock.sentinel.subsystem),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_enumerate.py,test_match_passthrough_sys_name,match_sys_name.assert_called_with(mock.sentinel.sys_name),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_enumerate.py,test_match_passthrough_tag,match_tag.assert_called_with(mock.sentinel.tag),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_enumerate.py,test_match_passthrough_parent,match_parent.assert_called_with(mock.sentinel.parent),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_enumerate.py,test_match_passthrough_property,assert match_property.call_count == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_enumerate.py,test_match_passthrough_property,"assert ('spam', mock.sentinel.spam) in posargs",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
pyudev,pyudev,tests/test_enumerate.py,test_match_passthrough_property,"assert ('eggs', mock.sentinel.eggs) in posargs",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/config/test_configutils.py,test_from_str_hypothesis,assert family,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/config/test_configtypes.py,test_from_str_hypothesis,assert converted == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/config/test_configtypes.py,test_hypothesis,assert typ.from_str(typ.to_str(converted)) == converted,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/config/test_configtypes.py,test_hypothesis_text,assert typ.to_str(converted) == text,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/config/test_configtypes.py,test_hypothesis,assert math.isnan(converted_2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/config/test_configtypes.py,test_hypothesis,assert converted == pytest.approx(converted_2),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/config/test_configtypes.py,test_hypothesis,assert d.from_str(d.to_str(converted)) == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/config/test_configtypes.py,test_hypothesis_text,assert d.to_str(converted) == '' if not val else text,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/utils/test_utils.py,test_invariants,assert len(os.fsencode(sanitized)) <= 255 - len('(123).download'),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/utils/test_utils.py,test_ceil_log_hypothesis,assert base ** exponent >= number,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
qutebrowser,qutebrowser,tests/unit/utils/test_utils.py,test_ceil_log_hypothesis,assert base ** (exponent - 1) < number,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
qutebrowser,qutebrowser,tests/unit/completion/test_completionmodel.py,test_first_last_item,assert not model.first_item().isValid(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/completion/test_completionmodel.py,test_first_last_item,assert not model.last_item().isValid(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/completion/test_completionmodel.py,test_first_last_item,assert model.first_item().row() == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/completion/test_completionmodel.py,test_first_last_item,assert model.first_item().parent().row() == first,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/completion/test_completionmodel.py,test_first_last_item,assert model.last_item().row() == counts[last] - 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/completion/test_completionmodel.py,test_first_last_item,assert model.last_item().parent().row() == last,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/completion/test_completionmodel.py,test_count,assert model.count() == sum(counts),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/completion/test_completionmodel.py,test_set_pattern,c.set_pattern.assert_called_with(pat),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/misc/test_sql.py,test_from_int_hypothesis,assert version.to_int() == val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/misc/test_sql.py,test_to_int_hypothesis,assert version.from_int(version.to_int()) == version,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/utils/test_version.py,test_parse_hypothesis,assert info.vendor == vendor,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/utils/test_version.py,test_parse_hypothesis,assert info.version_str == version_str,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/utils/test_version.py,test_parse_hypothesis,assert vendor in str(info),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
qutebrowser,qutebrowser,tests/unit/utils/test_version.py,test_parse_hypothesis,assert version_str in str(info),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_stage.py,test_stage_state_assignment,"self.assertEqual(s._state, val)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_stage.py,test_stage_state_assignment,"self.assertEqual(s._state_history, state_history)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_stage.py,test_stage_post_exec_assignment,"self.assertEqual(s._post_exec, func)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_stage.py,test_stage_post_exec_assignment,"self.assertEqual(s._post_exec, tmp.func)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config,"self.assertEqual(amgr._reattempts, d['reattempts'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config,"self.assertEqual(amgr._resubmit_failed, d['resubmit_failed'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config,"self.assertEqual(amgr._autoterminate, d['autoterminate'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config,"self.assertEqual(amgr._write_workflow, d['write_workflow'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config,"self.assertEqual(amgr._rts, d['rts'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config,"self.assertEqual(amgr._rts_config, d['rts_config'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config2,"self.assertEqual(amgr._reattempts, d2['reattempts'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config2,"self.assertEqual(amgr._resubmit_failed, d2['resubmit_failed'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config2,"self.assertEqual(amgr._autoterminate, d2['autoterminate'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config2,"self.assertEqual(amgr._write_workflow, d2['write_workflow'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config2,"self.assertEqual(amgr._rts, 'mock')",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config2,"self.assertEqual(amgr._rts_config, {'sandbox_cleanup': True, 'db_cleanup': True})",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_amgr.py,test_amgr_read_config2,"self.assertEqual(amgr.services, services_mocked)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_pipeline.py,test_pipeline_state_assignment,"self.assertEqual(p._state, val)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_pipeline.py,test_pipeline_state_assignment,"self.assertEqual(p._state_history, state_history)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_validate,self.assertTrue(rmgr._validate_resource_desc()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_validate,self.assertTrue(rmgr._validated),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_validate,self.assertTrue(rmgr._validate_resource_desc()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_validate,self.assertTrue(rmgr._validate_resource_desc()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_populate,"self.assertEqual(rmgr.resource, res_descr['resource'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_populate,"self.assertEqual(rmgr.walltime, res_descr['walltime'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_populate,"self.assertEqual(rmgr.cpus, res_descr['cpus'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_populate,"self.assertEqual(rmgr.gpus, res_descr['gpus'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_populate,"self.assertEqual(rmgr.memory, res_descr['memory'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_populate,"self.assertEqual(rmgr.project, res_descr['project'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_populate,"self.assertEqual(rmgr.access_schema, res_descr['access_schema'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
radical-cybertools,radical.entk,tests/test_component/test_rmgr_base.py,test_populate,"self.assertEqual(rmgr.queue, res_descr['queue'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
raiden-network,raiden,raiden/tests/unit/transfer/mediated_transfer/test_mediation_fee.py,test_fee_round_trip,assert fee_calculation,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
raiden-network,raiden,raiden/tests/unit/transfer/mediated_transfer/test_mediation_fee.py,test_fee_round_trip,assert abs(amount - amount_without_margin_after_fees) <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
raiden-network,raiden,raiden/tests/unit/transfer/mediated_transfer/test_mediation_fee.py,test_fee_round_trip,assert amount_with_margin_after_fees >= amount,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
raiden-network,raiden,raiden/tests/unit/transfer/mediated_transfer/test_mediation_fee.py,test_fee_add_remove_invariant,assert amount_with_fees,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
raiden-network,raiden,raiden/tests/unit/transfer/mediated_transfer/test_mediation_fee.py,test_fee_add_remove_invariant,assert amount - 1 <= amount_without_fees <= amount + 1,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rayanht,paprika,tests/test_oo.py,test_pickled,"self.assertEqual(unpickled, c)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rayanht,paprika,tests/test_oo.py,test_pickled_protocol_4,"self.assertEqual(unpickled, c)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_initProjection,"np.testing.assert_almost_equal(p.getFieldOfView()[0], test_args[key])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_initProjection,"np.testing.assert_almost_equal(p.getFieldOfView()[1], test_args[key])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_initProjection,"np.testing.assert_almost_equal(p.focallength_x_px * p.sensor_width_mm / p.image_width_px, test_args[key])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_initProjection,"np.testing.assert_almost_equal(p.focallength_y_px * p.sensor_height_mm / p.image_height_px, test_args[key])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_initProjection,"np.testing.assert_almost_equal(getattr(p, key), test_args[key])",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_transFieldOfView,"np.testing.assert_almost_equal(cam.projection.focallength_x_px, focalX, 2, err_msg='Converting focallength to view and back failed.')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_transFieldOfView,"np.testing.assert_almost_equal(cam.projection.focallength_y_px, focalY, 2, err_msg='Converting focallength to view and back failed.')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_transFieldOfView,"np.testing.assert_almost_equal(cam.projection.imageFromFOV(viewX), cam.projection.image_width_px, err_msg='imageFromFOV failed for view_x')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_transFieldOfView,"np.testing.assert_almost_equal(cam.projection.imageFromFOV(view_y=viewY), cam.projection.image_height_px, err_msg='imageFromFOV failed for view_y')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_saveLoad,"self.assertAlmostEqual(getattr(cam, key), getattr(cam2, key), 3)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_saveLoad,"self.assertAlmostEqual(getattr(cam, key), getattr(cam2, key), 3)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_saveLoad,"self.assertAlmostEqual(getattr(cam, key), getattr(cam2, key), 3)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_lens,"np.testing.assert_almost_equal(pos2, pos0, 0, err_msg='Transforming from distorted to undistorted image fails.')",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_transWorldToCam,"np.testing.assert_almost_equal(p, p2, 1, err_msg=""Transforming from camera to world and back doesn't return the original point."")",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_pointBehindCamera,"np.testing.assert_equal(np.isnan(p[..., :2]), np.isnan(p1), err_msg='Points behind the camera do not produce a nan value.')",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_rays,"np.testing.assert_almost_equal(np.linalg.norm(rays, axis=-1), np.ones(rays.shape[0]), 2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_rays,"np.testing.assert_almost_equal(p, p2, 1, err_msg=""Transforming from camera to world and back doesn't return the original point."")",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_cameraGroup,"assert len(camGroup) == max(length(projections), length(orientations))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_cameraGroup,assert cam.projection == projections[index],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_cameraGroup,assert cam.projection == projections,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_cameraGroup,assert cam.orientation == orientations[index],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_transforms.py,test_cameraGroup,assert cam.orientation == orientations,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_helpers.py,test_cameraCone,assert np.all(np.isnan(cone_image)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_helpers.py,test_cameraCone,assert np.all(np.isnan(cone_image)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_helpers.py,test_cameraOrigin,assert np.all(np.isnan(image_point)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsStringBackForth,"np.testing.assert_almost_equal(gps_tuple, [lat, lon], 2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsStringBackForth,"np.testing.assert_almost_equal(gps_tuple, [lat, lon], 2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsStringBackForth,"np.testing.assert_almost_equal(gps_tuple, [lat, lon, height], 2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsStringBackForth,"np.testing.assert_almost_equal(gps_tuple, [lat, lon, height], 2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsStringBackForth,"self.assertRaises(ValueError, lambda: ct.formatGPS(lat, lon, ''))",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsStringBackForth,"self.assertRaises(ValueError, lambda: ct.formatGPS(lat, lon, '%2d %2d %2d %2d %2d'))",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsSpaceBackForth,"np.testing.assert_almost_equal(min([ct.getDistance(gps, gps_2) / distance, ct.getDistance(gps, gps_2)]), 0, 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsSpaceBackForth,"np.testing.assert_almost_equal(distance, ct.getDistance(gps0, gps), 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsSpaceBackForth,"np.testing.assert_almost_equal(difference_angle, 0, 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsSpaceBackForth,"np.testing.assert_almost_equal(min([ct.getDistance(gps, gps_2) / distance, ct.getDistance(gps, gps_2)]), 0, 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_gps.py,test_gpsSpaceBackForth,"np.testing.assert_almost_equal(distance, ct.getDistance(gps0, gps), 0)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_ray.py,test_rayIntersectTriangle,self.assertFalse(np.any(np.isnan(intersection))),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_ray.py,test_lineDistance,"np.testing.assert_almost_equal(c1, c1_new, 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_ray.py,test_lineDistance,"np.testing.assert_almost_equal(np.array([c1]), c1_new, 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_ray.py,test_lineDistance,"np.testing.assert_almost_equal(dist, distance, 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rgerum,cameratransform,tests/test_ray.py,test_lineDistance,"np.testing.assert_almost_equal(intersection, center, 1)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rhettinger,modernpython,test_quadratic.py,test_quad,"assert cmath.isclose(a * x1 ** 2 + b * x1 + c, 0.0, abs_tol=0.0001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rhettinger,modernpython,test_quadratic.py,test_quad,"assert cmath.isclose(a * x1 ** 2 + b * x1 + c, 0.0, abs_tol=0.0001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
robinhood,faust,t/unit/utils/test_json.py,test_str_to_decimal_decimals,assert str_to_decimal(str(x)) == x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
robinhood,faust,t/meticulous/assignor/test_copartitioned_assignor.py,test_fresh_assignment,"assert is_valid(new_assignments, partitions, replicas)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
robinhood,faust,t/meticulous/assignor/test_copartitioned_assignor.py,test_add_new_clients,"assert is_valid(new_assignments, partitions, replicas)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
robinhood,faust,t/meticulous/assignor/test_copartitioned_assignor.py,test_add_new_clients,"assert client_addition_sticky(old_assignments, new_assignments)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
robinhood,faust,t/meticulous/assignor/test_copartitioned_assignor.py,test_remove_clients,"assert is_valid(new_assignments, partitions, replicas)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
robinhood,faust,t/meticulous/assignor/test_copartitioned_assignor.py,test_remove_clients,"assert client_removal_sticky(old_assignments, new_assignments)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_utils.py,test_reduce_broadcast_shape_consistency,"assert reduce_broadcast(grad, var_shape=shapes.input_shapes[0]).shape == shapes.input_shapes[0]",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_utils.py,test_reduce_broadcast_shape_consistency,"assert reduce_broadcast(grad, var_shape=shapes.input_shapes[1]).shape == shapes.input_shapes[1]",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_utils.py,test_reduce_broadcast_keepdim,"assert reduced_grad.shape == tuple((i if i < j else j for i, j in zip(var_shape, grad.shape)))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_utils.py,test_reduce_broadcast_keepdim,"assert (i == 1 for i, j in zip(var_shape, grad.shape) if i < j)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/losses/test_margin_ranking.py,test_ranked_margin,assert not x1_real._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/losses/test_margin_ranking.py,test_ranked_margin,assert not x2_real._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert base.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert leaf.constant is base.constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert view1.constant is base.constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert view2.constant is base.constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert view_of_view.constant is base.constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert leaf.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert view1.base is base,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert view2.base is base,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert view_of_view.base is base,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert base.base is None and base.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert view1.base is None and view1.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert view2.base is None and view2.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_basic_view_relationships,assert view_of_view.base is None and view_of_view.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_view_owns_grad_in_correspondence_with_base,assert base.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_view_owns_grad_in_correspondence_with_base,assert base.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_view_owns_grad_in_correspondence_with_base,assert transposed_view.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_view_owns_grad_in_correspondence_with_base,assert dangling_view.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_view_owns_grad_in_correspondence_with_base,assert top_half_view.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_view_owns_grad_in_correspondence_with_base,assert bottom_half_view.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_view_owns_grad_in_correspondence_with_base,assert leaf.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_view_semantics.py,test_view_owns_grad_in_correspondence_with_base,assert leaf.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_replay_view_op.py,test_view_func_replay_op_mirrors_standard_op,"assert isinstance(b_via_replay.creator, type(b_view.creator))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_replay_view_op.py,test_view_func_replay_op_mirrors_standard_op,assert b_via_replay.constant is b_view.constant,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_replay_view_op.py,test_view_func_replay_op_mirrors_standard_op,assert b_via_replay.base is b_view.base,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/ufuncs/test_dtype.py,test_constant_and_grad_propagates_correctly_according_to_dtype,assert out.constant is _expected_constant,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_involving_a_tensor_in_a_graph_nulls_its_gradient,assert x.grad is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_involving_a_tensor_in_a_graph_nulls_its_gradient,assert x.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_involving_a_tensor_in_a_graph_nulls_its_gradient,assert x._ops is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_backprop_clears_graph,assert f.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_backprop_clears_graph,assert y.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_backprop_clears_graph,assert x.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_backprop_clears_graph,assert not f._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_backprop_clears_graph,assert f.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_backprop_clears_graph,assert not y._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_backprop_clears_graph,assert y.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_backprop_clears_graph,assert not x._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_no_null_grad_semantics.py,test_backprop_clears_graph,assert x.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_LiveMetric.py,test_from_dict_input_validation2,assert input_dict,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_uniform.py,test_uniform_statistics,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_uniform.py,test_uniform_statistics,assert tensor.min() >= lower_bound,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_uniform.py,test_uniform_statistics,assert tensor.max() <= upper_bound,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_uniform.py,test_uniform_statistics,assert (max(hist) - min(hist)) / np.mean(hist) < 0.1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_uniform.py,test_uniform,assert tensor.shape == shape,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_uniform.py,test_uniform,assert tensor.dtype == dtype,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_uniform.py,test_uniform,assert tensor.constant == constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/ufuncs/test_fwd_prop_and_backprop.py,test_ufunc_fwd,assert numpy_out.dtype == mygrad_out.dtype,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/ufuncs/test_fwd_prop_and_backprop.py,test_ufunc_fwd,assert mygrad_out.base is None and numpy_out.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/ufuncs/test_fwd_prop_and_backprop.py,test_ufunc_fwd,assert mygrad_out.constant is expected_constant,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/ufuncs/test_fwd_prop_and_backprop.py,test_ufunc_fwd,"assert t.constant or t.grad.shape == t.shape, f'arg: {n}'",False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_reshape.py,test_in_place_reshape,assert array.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_reshape.py,test_in_place_reshape,assert tensor.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_reshape.py,test_in_place_reshape_post_view,assert array.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_reshape.py,test_in_place_reshape_post_view,assert tensor.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_reshape.py,test_in_place_reshape_post_view,assert a1.base is array,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_reshape.py,test_in_place_reshape_post_view,assert t1.base is tensor,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_LivePlot.py,test_fuzz_plot_grid,assert plotter._pltkwargs['nrows'] * plotter._pltkwargs['ncols'] >= num_metrics,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,noggin,tests/test_LivePlot.py,test_flat_color_syntax,"assert p.metric_colors == {n: dict(train=c) for n, c in zip(metric_names, colors)}",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_LivePlot.py,test_setting_color_for_non_metric_is_silent,assert plotter.metric_colors == original_colors,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_LivePlot.py,test_set_color,assert plotter.metric_colors[metric] == colors,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_weakref.py,test_refs_that_point_forward_in_graph_are_weak,assert len(x._view_children) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_weakref.py,test_derefrencing_tensor_from_upstream_in_graph_doesnt_break_graph,assert len(x._ops) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/test_sliding_window.py,test_memory_details,assert not y.flags['WRITEABLE'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert y.constant is constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert y.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert y.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert not x._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert x.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert y.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert x.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert y.constant is x.constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert y.creator is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert not y.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert x._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_context_manager,assert not x.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_on_in_place_op_does_not_track_graph,assert old_x.data.flags.writeable is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_on_in_place_op_does_not_track_graph,assert x.data.flags.writeable is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_on_in_place_op_does_not_track_graph,assert x.constant is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_on_in_place_op_does_not_track_graph,assert x.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_on_in_place_op_does_not_track_graph,assert x.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_on_in_place_op_does_not_track_graph,assert not old_x._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_on_in_place_op_does_not_track_graph,assert not old_x._view_children,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_on_in_place_op_does_not_track_graph,"assert np.shares_memory(x, old_x)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_decorator,assert y.constant is constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_decorator,assert y.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_decorator,assert not y._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_decorator,assert y.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_decorator,assert not x._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_no_autodiff.py,test_no_autodiff_decorator,assert x.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/numpy_compat/test_array_creation.py,test_asarray_no_copy,assert array is (tensor.data if not as_array else tensor),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/numpy_compat/test_array_creation.py,test_asarray_returns_array_with_expected_data_and_attributes,"assert isinstance(actual, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/numpy_compat/test_array_creation.py,test_asarray_returns_array_with_expected_data_and_attributes,assert actual.dtype == expected.dtype,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/numpy_compat/test_array_creation.py,test_asarray_returns_array_with_expected_data_and_attributes,assert actual.shape == expected.shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/numpy_compat/test_array_creation.py,test_asarray_returns_array_with_expected_data_and_attributes,assert actual.flags[f'{order.capitalize()}_CONTIGUOUS'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_sequence_ops.py,test_sequential_arithmetic,assert all((not x._ops for x in tensors)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_dirac.py,test_dirac_dimensions,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_dirac.py,test_dirac_dimensions,"assert np.all(tensor.sum(axis=tuple((i for i in range(1, len(shape))))) <= 1)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_dirac.py,test_dirac_matmul,"assert isinstance(output, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_dirac.py,test_dirac_matmul,"assert np.allclose(output.data, matrix, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/utils/test_utils.py,test_finite_difference_no_broadcast,"assert finite_difference(unary_func, x, back_grad=grad, vary_ind=[])[0] is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/utils/test_utils.py,test_numerical_gradient_no_broadcast,"assert numerical_gradient(unary_func, x, back_grad=grad, vary_ind=[])[0] is None",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_contains_method,assert (x in graph) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_contains_method,assert (view in graph) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_contains_method,assert (mg.asarray(x) in graph) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert x is not _x,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert y is not _y,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert graph[x].parent is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert graph[y].parent is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert x.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert _x.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert y.base is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert _y.base is _x,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert _y.creator.variables[0] is _x,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert tuple(_x._view_children)[0] is _y,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert node1.tensor is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,assert node2.tensor is y,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_basic_duplicating_graph_info,"assert (node.tensor is t for node, t in zip(graph.get_path_to_base(y), [y, x]))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_graph_iteration_is_depth_first,assert actual is expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_memory_locking,assert not node.data.flags.writeable or num_views == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_duplicating_graph.py,test_memory_locking,assert node.data.flags.writeable is was_writeable,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_create_plot,"assert isinstance(plotter, LivePlot)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_create_plot,"assert isinstance(fig, Figure)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_create_plot,"assert isinstance(ax, (Axes, ndarray))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_create_plot,assert plotter._pltkwargs['nrows'] * plotter._pltkwargs['ncols'] >= len(plotter.metrics),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_create_plot,assert plotter.last_n_batches == last_n_batches,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_create_plot,assert plotter.max_fraction_spent_plotting == max_fraction_spent_plotting,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_metric_io_train,assert list(train) == list(logger.train_metrics),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_metric_io_train,assert expected == actual,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_metric_io_test,assert list(test) == list(logger.test_metrics),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_metric_io_test,assert expected == actual,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_plot_logger,"assert isinstance(plotter, LivePlot)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_plot_logger,"assert isinstance(fig, Figure)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_plot_logger,"assert isinstance(ax, (Axes, ndarray))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_plot_logger,assert plotter.last_n_batches == last_n_batches,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_plot_logger,assert plotter._pltkwargs['nrows'] * plotter._pltkwargs['ncols'] >= len(plotter.metrics),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,noggin,tests/test_utils.py,test_plot_logger,assert plotter.figsize == figsize,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/math/test_misc.py,test_clip_input_validation,"np.testing.assert_array_equal(numpy_out, mygrad_out.data)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/linalg/test_einsum.py,test_einsum_bkwd1,assert not x._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/linalg/test_einsum.py,test_einsum_bkwd1,assert not y._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/linalg/test_einsum.py,test_einsum_bkwd1,assert x.grad is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/linalg/test_einsum.py,test_einsum_bkwd1,assert y.grad is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/linalg/test_einsum.py,test_einsum_can_produce_diag_view_for_nd_tensor,assert diag.base is x,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/linalg/test_einsum.py,test_einsum_can_produce_full_view,assert view.base is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/linalg/test_einsum.py,test_backprop_through_inplace_op,assert diag.base is x,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/linalg/test_einsum.py,test_backprop_through_inplace_op,assert scalar.grad == 3.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_setitem.py,test_setitem_sanity_check,"assert isinstance(w, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_setitem.py,test_setitem_sanity_check,assert w.grad is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/tensor_ops/test_setitem.py,test_setitem_sanity_check,assert w.constant is x.constant,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_setitem.py,test_setitem_sanity_check,assert x.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_setitem.py,test_setitem_sanity_check,assert y.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_setitem.py,test_setitem_sanity_check,"assert not w._ops, 'clear-graph with clear-graph failed'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_setitem.py,test_setitem_sanity_check,"assert not x._ops, 'clear-graph with clear-graph failed'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_setitem.py,test_setitem_sanity_check,"assert not y._ops, 'clear-graph failed'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_respects_original_writeability,assert x.data.flags.writeable is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_complicated_inplace_pattern2,assert vert_flipped_x.base is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_complicated_inplace_pattern2,assert vert_horiz_flipped_x.base is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_complicated_inplace_pattern2,assert horiz_flipped_x.base is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_complicated_inplace_pattern2,assert view_of_x.base is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_complicated_inplace_pattern2,assert x.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_complicated_inplace_pattern2,assert not x.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_complicated_inplace_pattern2,assert not diag_x.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_complicated_inplace_pattern2,assert x.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_complicated_inplace_pattern2,assert diag_x.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_in_place_semantics.py,test_complicated_inplace_pattern2,assert y.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_random.py,test_random_shape_funcs,assert tens.constant is constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_random.py,test_unpacked_shape_funcs,assert tens.constant is constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_memory_locks_with_multiple_inputs,assert writeable(x) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_memory_locks_with_multiple_inputs,assert writeable(y) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_memory_locks_with_multiple_inputs,"assert writeable_lookup(item) is writeable(item), n",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_view_of_locked_but_tracked_array_gets_unlocked,assert writeable(x) is x_was_writeable,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_view_of_locked_but_tracked_array_gets_unlocked,assert writeable(view_x) is x_was_writeable,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_views_becomes_writeable_after_base_is_made_writeable,assert writeable(x) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_views_becomes_writeable_after_base_is_made_writeable,assert writeable(y) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_views_becomes_writeable_after_base_is_made_writeable,"assert view_y1.flags.writeable is False, ""view-y1 can't be made writeable until y is made writeable""",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_views_becomes_writeable_after_base_is_made_writeable,"assert view_y2.flags.writeable is False, ""view-y2 can't be made writeable until y is made writeable""",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_views_becomes_writeable_after_base_is_made_writeable,assert writeable(x) is x_was_writeable,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_views_becomes_writeable_after_base_is_made_writeable,assert writeable(y) is y_writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_views_becomes_writeable_after_base_is_made_writeable,assert writeable(view_y1) is y_writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_views_becomes_writeable_after_base_is_made_writeable,assert writeable(view_y2) is y_writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_that_errored_op_doesnt_leave_inputs_locked,assert writeable(t1) is t1_was_writeable,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_that_errored_op_doesnt_leave_inputs_locked,assert writeable(t2) is t2_was_writeable,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_inverted_writeability_context,assert writeable(x) is was_writeable,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_inverted_writeability_context,assert writeable(y),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_inverted_writeability_context,assert not writeable(z),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_inverted_writeability_context,assert not writeable(x),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_inverted_writeability_context,assert writeable(z),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_inverted_writeability_context,assert writeable(x) is was_writeable,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(zo) is not (fz is view or fz is direct_ref),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(zo) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,"assert writeable(xo) is False or (isinstance(xo, np.ndarray) and fx is downstream_copy)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,"assert writeable(yo) is False or (isinstance(yo, np.ndarray) and fy is downstream_copy)",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(z) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(x) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(y) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(zo) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(xo) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(yo) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(z) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(x) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_memory_locking.py,test_test_mem_locking_with_inplace_target_and_boolean_mask,assert writeable(y) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_constant_inference.py,test_that_typical_op_propagates_constant_under_general_conditions,assert out.constant is expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_backward.py,test_tensor_backward_produces_grad_of_correct_dtype_and_shape,assert tensor.dtype == tensor.grad.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_backward.py,test_incompatible_grad_shape_raises,assert tensor.shape == tensor.grad.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_backward.py,test_incompatible_grad_shape_raises,assert tensor.dtype == tensor.grad.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/math/sequence/test_sequential_funcs.py,test_var_no_axis_fwd,assert np.all(o == mg.zeros_like(x)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/math/sequence/test_sequential_funcs.py,test_var_no_axis_bkwrd,assert np.all(x.grad == mg.zeros_like(x)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/math/sequence/test_sequential_funcs.py,test_std_no_axis_fwd,assert np.all(o == mg.zeros_like(x)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/math/sequence/test_sequential_funcs.py,test_std_no_axis_bkwrd,assert np.all(x.grad == mg.zeros_like(x)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_normal.py,test_normal_statistics,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_normal.py,test_normal_statistics,"assert np.isclose(np.mean(tensor.data), mean, atol=0.01)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_normal.py,test_normal_statistics,"assert np.isclose(np.std(tensor.data), std, atol=0.01)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_normal.py,test_normal,assert tensor.shape == shape,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_normal.py,test_normal,assert tensor.dtype == dtype,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_normal.py,test_normal,assert tensor.constant == constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_manip.py,test_transpose,assert out.constant and (not x_arr.constant),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_manip.py,test_atleast_kd_fixed_point,assert len(out1) == len(out2),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_manip.py,test_atleast_kd_fixed_point,"assert all((x is y for x, y in zip(out1, out2)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/losses/test_negative_log_likelihood.py,test_weighted_negative_log_likelihood_vs_softmax_cross_entropy,"assert np.isclose(weighted_nll.data, weights[y.data].data * nll.data)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_arange_like_against_numpy_equivalent,assert tensor.dtype == array.dtype,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_arange_like_against_numpy_equivalent,"assert tensor.constant is expected_constant(dest_dtype=tensor.dtype, constant=constant)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_tensor_creation_from_shape_against_numpy_equivalent,assert tensor.dtype == array.dtype,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_tensor_creation_from_shape_against_numpy_equivalent,"assert tensor.constant is expected_constant(dest_dtype=tensor.dtype, constant=constant)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_tensor_create_like_against_numpy_equivalent,assert tensor.dtype == array.dtype,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_tensor_create_like_against_numpy_equivalent,"assert tensor.constant is expected_constant(arr_like, dest_dtype=tensor.dtype, constant=constant)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_identity,assert tensor.dtype == arr.dtype,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_identity,"assert tensor.constant is expected_constant(dest_dtype=tensor.dtype, constant=constant)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_eye,assert tensor.dtype == arr.dtype,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_eye,"assert tensor.constant is expected_constant(dest_dtype=tensor.dtype, constant=constant)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_returns_tensor_reference_consistently,assert astensor(t) is t,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_returns_tensor_reference_consistently,"assert astensor(t, dtype=t.dtype) is t",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_returns_tensor_reference_consistently,"assert astensor(t, constant=t.constant) is t",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_returns_tensor_reference_consistently,"assert astensor(t, dtype=t.dtype, constant=t.constant) is t",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_with_incompat_constant_still_passes_array_ref,assert t2 is not t,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_with_incompat_constant_still_passes_array_ref,assert t2.data is t.data,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_with_incompat_constant_still_passes_array_ref,assert t2.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_with_incompat_constant_still_passes_array_ref,assert t3 is not t,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_with_incompat_constant_still_passes_array_ref,assert t3.data is t.data,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_with_incompat_constant_still_passes_array_ref,assert t3.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_doesnt_mutate_input_tensor,assert t.constant is o_constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_doesnt_mutate_input_tensor,assert t.creator is o_creator,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_astensor_doesnt_mutate_input_tensor,assert t.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_as_tensor,"assert isinstance(t, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_as_tensor,assert t.dtype == ref_tensor.dtype,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_as_tensor,assert t.constant is ref_tensor.constant,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_as_tensor,"assert a == original, 'the original array was mutated'",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_tensor_mirrors_array,assert tens.dtype == arr.dtype,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_tensor_mirrors_array,assert tens.shape == arr.shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_tensor_mirrors_array,"assert np.shares_memory(tens, tensor_like) is np.shares_memory(arr, arr_like)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_tensor_mirrors_array,assert (tens is tensor_like) is (arr is arr_like),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_tensor_mirrors_array,assert (tens.base is tensor_like) is (arr.base is arr_like),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_creation.py,test_tensor_mirrors_array,assert arr.base is not arr_like,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rsokl,MyGrad,tests/tensor_base/test_view_graph.py,test_view_children_tracking,"assert all((x.base is base for x in [child, a, b]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_view_graph.py,test_view_children_tracking,assert c.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_conv.py,test_padding,"assert out.shape == (1,) * x.ndim",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_conv.py,test_padding,assert out.item() == 0.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_conv.py,test_padding,assert x.grad.shape == x.shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/activations/test_softmax.py,test_softmax_on_empty_arrays,assert out.shape == arr.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/activations/test_softmax.py,test_softmax_on_empty_arrays,assert out.dtype == expected_dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/activations/test_softmax.py,test_softmax_numerical_stability,"assert np.all(np.logical_and(0 <= out, out <= 1))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/activations/test_softmax.py,test_log_softmax_numerical_stability,"assert np.all(np.logical_and(0 <= out, out <= 1)), out",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_xarray.py,test_concat_experiments,assert list(out.coords['experiment']) == list(range(num_exps)),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_xarray.py,test_concat_experiments,assert list(out.data_vars) == list(metrics),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/custom_strategies/test_custom_strategies.py,test_choices,"assert choice in set(combinations('abcdefg', 3))",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_uniform.py,test_he_uniform_statistics,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_uniform.py,test_he_uniform_statistics,"assert np.isclose(np.mean(tensor.data), 0, atol=0.01)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_uniform.py,test_he_uniform_statistics,assert tensor.min() >= -gain / factor,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_uniform.py,test_he_uniform_statistics,assert tensor.max() <= gain / factor,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_uniform.py,test_he_uniform_statistics,assert (max(hist) - min(hist)) / np.mean(hist) < 0.1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_uniform.py,test_he_uniform,assert tensor.shape == shape,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_uniform.py,test_he_uniform,assert tensor.dtype == dtype,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_uniform.py,test_he_uniform,assert tensor.constant == constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_joining.py,test_join_fwd,"assert isinstance(mygrad_out, mg.Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_joining.py,test_join_fwd,"assert mygrad_out.base is None and numpy_out.base is None, 'mygrad func and numpy func disagree on views'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/test_tensor_joining.py,test_join_fwd,assert mygrad_out.constant is constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_operator_override.py,test_arithmetic_operators_between_array_and_tensor_cast_to_tensor,"assert isinstance(out, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_operator_override.py,test_arithmetic_operators_between_array_and_tensor_cast_to_tensor,"assert isinstance(out.creator, op)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_operator_override.py,test_arithmetic_operators_between_array_and_tensor_cast_to_tensor,"assert isinstance(out, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_operator_override.py,test_arithmetic_operators_between_array_and_tensor_cast_to_tensor,"assert isinstance(out.creator, op)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_operator_override.py,test_arithmetic_operators_between_array_and_tensor_cast_to_tensor,"assert isinstance(out, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_operator_override.py,test_arithmetic_operators_between_array_and_tensor_cast_to_tensor,"assert isinstance(out.creator, op)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_operator_override.py,test_floor_div,assert actual.dtype == desired.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_ops/test_getitem.py,test_get_item_propagate_constant,assert y.constant is x.constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_normal.py,test_glorot_normal_statistics,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_normal.py,test_glorot_normal_statistics,"assert np.isclose(np.mean(tensor.data), 0, atol=0.001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_normal.py,test_glorot_normal_statistics,"assert np.isclose(val, 1, atol=0.001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_normal.py,test_glorot_normal,assert tensor.shape == shape,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_normal.py,test_glorot_normal,assert tensor.dtype == dtype,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_normal.py,test_glorot_normal,assert tensor.constant == constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_normal.py,test_glorot_normal_statistics,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_normal.py,test_glorot_normal_statistics,"assert np.isclose(np.mean(tensor.data), 0, atol=0.001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_normal.py,test_glorot_normal_statistics,"assert np.isclose(val, 1, atol=0.001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_normal.py,test_glorot_normal,assert tensor.shape == shape,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_normal.py,test_glorot_normal,assert tensor.dtype == dtype,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_he_normal.py,test_glorot_normal,assert tensor.constant == constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_plotting.py,test_plot_batches_flag_via_plot,assert bool(metric.batch_line.get_xdata().size) is plot_batches,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_plotting.py,test_plot_batches_flag_via_plot,assert metric.epoch_line.get_xdata().size > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,noggin,tests/test_plotting.py,test_plot_batches_flag_via_plot,assert metric.epoch_line.get_xdata().size > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,noggin,tests/test_plotting.py,test_plot_batches_flag_via_set_batch,assert metric.batch_line is None or bool(metric.batch_line.get_xdata().size) is plot_batches,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,noggin,tests/test_plotting.py,test_plot_batches_flag_via_set_batch,assert metric.epoch_line.get_xdata().size > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,noggin,tests/test_plotting.py,test_plot_batches_flag_via_set_batch,assert metric.epoch_line.get_xdata().size > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_choices,"assert set(chosen) <= set(seq), 'choices contains elements that do not belong to `seq`'",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_choices,"assert len(chosen) == size, 'the number of choices does not match `size`'",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_choices,"assert unique_choices == sorted(chosen), '`choices` with `replace=False` draws elements with replacement'",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_integer_index,"assert isinstance(o, Real), 'An integer index should produce a number from a 1D array'",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_slice_index,"assert isinstance(o, np.ndarray) and o.ndim == 1, 'A slice index should produce a 1D array from a 1D array'",False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_slice_index,"assert np.shares_memory(o, x), 'A slice should produce a view of `x`'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_slice_index,assert -size <= index.start <= size,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_slice_index,assert -size <= index.stop <= size,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_basic_index,"assert np.shares_memory(x, o), 'The basic index should produce a view of the original array.'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_basic_index,"assert min_dim <= o.ndim <= max_dim, 'The dimensionality input constraints were not obeyed'",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_advanced_integer_index,"assert min_dims <= out.ndim <= max_dims, 'The input parameters were not respected'",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_advanced_integer_index,"assert not np.shares_memory(x, out), 'An advanced index should create a copy upon indexing'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_valid_single_axis,assert axis is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_valid_axes,assert axis is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_valid_axes,assert all((i >= 0 for i in axis)),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_valid_axes,assert axis >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_valid_axes,assert min_dim <= len(axis),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_valid_axes,assert len(axis) <= max_dim,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_valid_axes,assert min_dim <= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_static_constant,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_static_constant,assert tensor.constant is constant,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_static_constant,assert tensor.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_shape,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_shape,assert tensor.shape == shape,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_shape,assert tensor.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_dtype,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_dtype,assert tensor.dtype == dtype,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_dtype,assert tensor.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_with_grad,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_with_grad,assert tensor.dtype == dtype,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_with_grad,"assert isinstance(tensor.grad, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_with_grad,assert tensor.grad.shape == tensor.shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_with_grad,assert tensor.grad.dtype == (grad_dtype if grad_dtype is not None else tensor.dtype),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_with_grad,assert np.all((100 <= tensor.grad) & (tensor.grad <= 200)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensors_with_grad,assert np.all((-10 <= tensor.grad) & (tensor.grad <= 10)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensor_owns_memory,assert t.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensor_owns_memory,assert t.data.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensor_read_only_default,assert tensor.data.flags.writeable is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensor_read_only,assert tensor.data.flags.writeable is not read_only,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensor_ndmin,assert tensor.ndim >= ndmin,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_tensor_ndmin,assert tensor.shape == tensor.grad.shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/custom_strategies/test_strategies.py,test_no_value,assert x is _NoValue,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_placeholder_copy.py,test_placeholder_tensor,assert placeholder is not x,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rsokl,MyGrad,tests/tensor_base/test_placeholder_copy.py,test_placeholder_tensor,assert placeholder.constant is x.constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_placeholder_copy.py,test_placeholder_tensor,assert placeholder.data.flags.writeable is x.data.flags.writeable,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_placeholder_copy.py,test_placeholder_tensor,"assert np.shares_memory(x, placeholder)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_placeholder_copy.py,test_placeholder_tensor,assert placeholder.data.flags.writeable is was_writeable,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_placeholder_copy.py,test_placeholder_tensor,assert x.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_chainrule_scalar,assert x.constant is x_constant,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_chainrule_scalar,assert y.constant is y_constant,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_chainrule_scalar,assert z.constant is z_constant,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_chainrule_scalar,assert f.constant is (x.constant and y.constant and z.constant),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_chainrule_scalar,assert g.constant is (x.constant and z.constant and f.constant),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_chainrule_scalar,assert g.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_chainrule_scalar,assert f.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_chainrule_scalar,assert x.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_chainrule_scalar,assert y.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_chainrule_scalar,assert z.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_identical_inputs,assert v3.data.item() == 8.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_linear_graph,assert v2.data == v1_val ** 2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_linear_graph,assert v3.data == np.exp(v1_val ** 2),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_linear_graph,assert v4.data == 2 * v3.data,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_linear_graph,assert v1.constant is v1_const,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_linear_graph,assert v2.constant is (v2_const or v1.constant),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_linear_graph,assert v3.constant is (v3_const or v2.constant or v1.constant),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_linear_graph,assert v4.constant is (v4_const or v3.constant or v2.constant or v1.constant),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_fanout_graph,assert v2.data == v1_val ** 2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_fanout_graph,assert v3.data == np.exp(v1_val),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_fanout_graph,assert v4.data == 2 * v1_val,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_fanout_graph,assert v5.data == v2.data * v3.data * v4.data,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_fanout_graph,"assert v1.constant is expected_constant(dest_dtype=float, constant=v1_const)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_fanout_graph,"assert v2.constant is expected_constant(v1, dest_dtype=float, constant=v2_const)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_fanout_graph,"assert v3.constant is expected_constant(v1, dest_dtype=float, constant=v3_const)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_fanout_graph,"assert v4.constant is expected_constant(v1, dest_dtype=float, constant=v4_const)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_fanout_graph,"assert v5.constant is expected_constant(v2, v3, v4, dest_dtype=float, constant=v5_const)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_interesting_graph,assert v3.data == v1_val ** 2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_interesting_graph,assert v4.data == v2_val * v3.data,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_interesting_graph,assert v5.data == v4.data * v3.data,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_interesting_graph,"assert v1.constant is expected_constant(dest_dtype=float, constant=v1_const)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_interesting_graph,"assert v2.constant is expected_constant(dest_dtype=float, constant=v2_const)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_interesting_graph,"assert v3.constant is expected_constant(v1, v1, dest_dtype=float, constant=v3_const)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_interesting_graph,"assert v4.constant is expected_constant(v2, v3, dest_dtype=float, constant=v4_const)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_interesting_graph,"assert v5.constant is expected_constant(v4, v3, dest_dtype=float, constant=v5_const)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert v3.data == v1_val ** 2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert v4.data == v1_val * v2_val * v3.data,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert v5.data == v4.data * v3.data * v1_val,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert dead_leaf.data == dangling_site.data * 3.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert v1.constant is v1_const,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert v2.constant is v2_const,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert v3.constant is v3_const or v1.constant,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert v4.constant is v4_const or (v1.constant and v2.constant and v3.constant),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert v5.constant is v5_const or (v1.constant and v3.constant and v4.constant),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert dead_leaf.constant is dangling_const or dangling_site.constant,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert dead_leaf.creator is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/tensor_base/test_chainrule.py,test_dynamic_interesting_graph,assert dead_leaf.creator is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/nnet/initializers/test_constant.py,test_constant_initializer,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_constant.py,test_constant_initializer,"assert np.allclose(tensor.data, value, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_constant.py,test_constant_initializer,assert tensor.data.shape == array.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_constant.py,test_constant_initializer,assert tensor.data.dtype == array.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_batchnorm.py,test_batchnorm,assert b2 is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_batchnorm.py,test_batchnorm,assert g2 is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_batchnorm.py,test_batchnorm,"assert o is c, ""('{x}', '{gamma}', '{beta}', '{grad}')[{n}]"".format(x=x, gamma=gamma, beta=beta, grad=grad, n=n)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_batchnorm.py,test_batchnorm,"assert not np.shares_memory(g2.grad, b2.grad)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_batchnorm.py,test_batchnorm,"assert not np.shares_memory(grad, t2.grad)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_batchnorm.py,test_batchnorm,assert not t2._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_batchnorm.py,test_batchnorm,assert not g2._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_batchnorm.py,test_batchnorm,assert not b2._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_all_constant,assert X.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_all_constant,assert Wz.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_all_constant,assert Wr.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_all_constant,assert Wh.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_all_constant,assert Uz.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_all_constant,assert Ur.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_all_constant,assert Uh.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_all_constant,assert bz.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_all_constant,assert br.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_all_constant,assert bh.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_fwd,assert s.constant is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_fwd,"assert np.all(np.logical_or(d == 1 / (1 - dropout), d == 0))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_fwd,assert not x._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert s.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert Wz.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert Wr.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert Wh.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert Uz.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert Ur.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert Uh.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert bz.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert br.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert bh.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert V.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert X.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/layers/test_gru.py,test_gru_backward,assert not x._ops,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_uniform.py,test_glorot_normal_statistics,"assert isinstance(tensor, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_uniform.py,test_glorot_normal_statistics,"assert np.isclose(np.mean(tensor.data), 0, atol=0.001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_uniform.py,test_glorot_normal_statistics,assert tensor.min() >= -gain * np.sqrt(6 / (fan_in + fan_out)),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_uniform.py,test_glorot_normal_statistics,assert tensor.max() <= gain * np.sqrt(6 / (fan_in + fan_out)),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_uniform.py,test_glorot_normal_statistics,assert (max(hist) - min(hist)) / np.mean(hist) < 0.1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_uniform.py,test_glorot_normal,assert tensor.shape == shape,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_uniform.py,test_glorot_normal,assert tensor.dtype == dtype,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/nnet/initializers/test_glorot_uniform.py,test_glorot_normal,assert tensor.constant == constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_dtype_init.py,test_integer_dtype_behavior,assert tensor.constant is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_dtype_init.py,test_integer_dtype_behavior,"assert np.issubdtype(tensor.dtype, np.integer) or np.issubdtype(tensor.dtype, np.bool_)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_dtype_init.py,test_float_dtype_behavior,assert tensor.constant is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_dtype_init.py,test_float_dtype_behavior,assert tensor.constant is constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_dtype_init.py,test_float_dtype_behavior,"assert np.issubdtype(tensor.dtype, np.floating)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_astype.py,test_astype,assert new_tensor is not tensor,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rsokl,MyGrad,tests/tensor_base/test_astype.py,test_astype,assert new_tensor.constant is expected_tensor.constant,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_astype.py,test_astype,assert tensor.creator is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/tensor_base/test_astype.py,test_astype,assert new_tensor.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_astype.py,test_astype,assert new_tensor.dtype == dest_type,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_astype.py,test_astype,assert new_tensor.shape == tensor.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_astype.py,test_astype,assert new_tensor.data is not tensor.data,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rsokl,MyGrad,tests/tensor_base/test_pow_special_cases.py,test_special_pow_propagate_constant,assert y.constant is x.constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/utils/test_dtype_and_constant_checking.py,test_no_input_as_int_infers_constant_out,"assert expected_constant(dest_dtype=dest_dtype, constant=None) is True",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/utils/test_dtype_and_constant_checking.py,test_no_input_as_float_infers_variable_out,"assert expected_constant(dest_dtype=dest_dtype, constant=None) is False",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/utils/test_dtype_and_constant_checking.py,test_any_variable_input_infers_to_variable_out,"assert expected_constant(*inp, dest_dtype=dest_dtype, constant=None) is False",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/utils/test_dtype_and_constant_checking.py,test_all_constant_input_infers_to_constant_out,"assert expected_constant(*inp, dest_dtype=dest_dtype, constant=None) is True",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/utils/test_dtype_and_constant_checking.py,test_specifying_constant_without_float_output_always_determines_output_state,"assert expected_constant(*inp, dest_dtype=dest_dtype, constant=constant) is constant",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/utils/test_dtype_and_constant_checking.py,test_integer_output_is_always_constant,"assert expected_constant(*inp, dest_dtype=dest_dtype, constant=constant) is True",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_ndmin,assert tensor.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_ndmin,assert tensor.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_ndmin,assert tensor[...].base is tensor,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_ndmin,assert not tensor.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_ndmin,assert tensor.data.flags.writeable,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_basic_backward,assert tensor.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_basic_backward,assert tensor.dtype == tensor.grad.dtype,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_copy,assert y.creator is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_copy,assert y.dtype == y_copy.dtype,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_copy,assert y_copy.constant is (constant if set_constant is None else set_constant),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_copy,assert y_copy.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_properties,assert tensor.ndim == array.ndim,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_properties,assert tensor.shape == array.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_properties,assert tensor.size == array.size,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_properties,assert len(tensor) == len(array),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_properties,assert tensor.dtype == array.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_properties,assert not creator or tensor.creator is ref,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_tensor_copy_on_init_mirrors_array,"assert np.shares_memory(tensor, arr) is np.shares_memory(array, arr)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_init_params,assert tensor.creator is creator,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_init_params,assert tensor.constant is constant,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_init_params,assert tensor.dtype is arr.dtype,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_init_params,assert tensor.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_init_params,assert tensor.base is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_init_params,assert tensor.ndim >= ndmin,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_special_methods,"assert isinstance(tensor_out, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_special_methods,assert tensor_out.constant is constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_special_methods,"assert isinstance(tensor_out.creator, op)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_special_methods,assert tensor_out.creator.variables[0] is x,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_special_methods,assert tensor_out.creator.variables[1] is y,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_special_methods,assert tensor_out.creator.variables[0] is y,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_special_methods,assert tensor_out.creator.variables[1] is x,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_pos,assert y.creator.variables[0] is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_pos,assert y.constant is x.constant,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_neg,"assert isinstance(tensor_out, Tensor)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_neg,"assert isinstance(tensor_out.creator, Negative)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_neg,assert tensor_out.creator.variables[0] is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_math_methods,"assert hasattr(x, attr)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_math_methods,assert method_out.constant is constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_math_methods,assert type(method_out.creator) is type(function_out.creator),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_axis_interchange_methods,assert method_out.constant is constant,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_axis_interchange_methods,assert type(method_out.creator) is type(function_out.creator),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_null_grad,assert x.grad is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_null_grad,assert y is x,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert unused is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert len(g._ops) > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert g.creator is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert len(x._ops) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert len(y._ops) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert len(z._ops) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert len(f._ops) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert x.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert y.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert z.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_clear_graph,assert f.creator is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rsokl,MyGrad,tests/tensor_base/test_tensor.py,test_index,assert arr_index == tens_index,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_rt_numpy_property.py,test_cat2keys,assert len(key1) == len(key2),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_rt_numpy_property.py,test_cat2keys,"assert not set(filter(not_nan, expected_key1.symmetric_difference(actual_key1))), f'\nexpected {expected_key1}\nactual {actual_key1}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_rt_numpy_property.py,test_cat2keys,"assert not set(filter(not_nan, expected_key2.symmetric_difference(actual_key2))), f'\nexpected {expected_key2}\nactual {actual_key2}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_categorical_property.py,test_hstack,"assert isinstance(output, Categorical)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_categorical_property.py,test_hstack,"assert len(output) == sum(map(len, categoricals)), f'Length of hstacked categoricals should be the sum of the aggregate categoricals\n' + msg + f'actual:\n{output}\nexpected:\n{categoricals}'",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_categorical_property.py,test_hstack,"assert not set(actual_counts.elements()).symmetric_difference(set(expected_counts.elements())), f'The hstacked categories should be equivalent to the set of aggregate categories\n' + msg + f'actual {set(actual_counts.elements())}\nexpected {set(expected_counts.elements())}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_categorical_property.py,test_hstack,"assert expected_counts == actual_counts, f'The hstacked multiplicity of categories should be equivalent to the multiplicity of aggregate categories\n' + msg + f'actual {actual_counts}\nexpected {expected_counts}'",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_sds_property.py,test_save_load_datasets,"assert id(multiset[shallow_copy_name]) != id(multiset2[shallow_copy_name]), f'Identity of saved object should be different from the loaded object.'",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rtosholdings,riptable,riptable/hypothesis_tests/test_sds_property.py,test_save_load_datasets,"assert id(multiset[deep_copy_name]) != id(multiset2[deep_copy_name]), f'Identity of saved object should be different from the loaded object.'",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
rtosholdings,riptable,riptable/hypothesis_tests/test_sds_property.py,test_stack_save_load,"assert isinstance(pds, type(None)), f'got type {type(pds)}'",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_sds_property.py,test_stack_save_load,"assert isinstance(pds, list), f'got type {type(pds)}'",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_abs,"assert isinstance(rt_abs, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_abs,"assert isinstance(rt_abs, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_absolute,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_absolute,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_all,assert rt_all == built_in_all,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_all,assert rt_all == np_all,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_any,assert rt_any == built_in_any,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_any,assert rt_any == np_any,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_argsort,"assert isinstance(rt_argsort, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ceil_array,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ceil_array,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_concatenate_first_axis,"assert isinstance(rt_concatenate, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_concatenate_flatten,"assert isinstance(rt_concatenate, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_concatenate_second_axis,"assert isinstance(rt_concatenate, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_cumsum,"assert isinstance(rt_cumsum, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_cumsum,"assert isinstance(rt_cumsum, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_cumsum,"assert rt_cumsum.dtype == output_dtype, f'Dtype should be the same as input array.'",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_diff,"assert isinstance(rt_diff, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_double,"assert isinstance(rt_double, type(np_double))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_double,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_double,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_double,"assert isinstance(rt_square, type(np_square))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_empty,"assert isinstance(rt_empty, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_empty,assert np.isfortran(rt_empty) == (order == 'F'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_empty,assert not np.isfortran(rt_empty),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_empty_like,assert np.isfortran(rt_empty_like),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_empty_like,assert not np.isfortran(rt_empty_like),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_empty_like,"assert isinstance(rt_empty_like, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_empty_like,"assert isinstance(rt_empty_like, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_empty_like,"assert not isinstance(rt_empty_like, FastArray)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_float32,"assert isinstance(rt_float32, type(np_float32))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_float32,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_float32,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_float32,"assert isinstance(rt_square, type(np_square))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_float32,"assert isinstance(rt_sqrt, type(np_sqrt))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_float64,"assert isinstance(rt_float64, type(np_float64))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_float64,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_float64,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_float64,"assert isinstance(rt_square, type(np_square))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_float64,"assert isinstance(rt_sqrt, type(np_sqrt))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_floor_array,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_floor_array,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_full,"assert isinstance(rt_full, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_full,assert np.isfortran(rt_full) == np.isfortran(np_full),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_full_str,"assert isinstance(rt_full, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_full_str,assert np.isfortran(rt_full) == np.isfortran(np_full),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_full_kwargs,"assert isinstance(rt_full, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_full_kwargs,assert np.isfortran(rt_full) == np.isfortran(np_full),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_hstack,"assert isinstance(rt_hstack, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int8,"assert isinstance(rt_int8, type(np_int8))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int8,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int8,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int16,"assert isinstance(rt_int16, type(np_int16))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int16,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int16,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int32,"assert isinstance(rt_int32, type(np_int32))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int32,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int32,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int64,"assert isinstance(rt_int64, type(np_int64))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int64,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_int64,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_interp,"assert isinstance(rt_interp, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_isfinite,"assert isinstance(rt_isfinite, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_isinf,"assert isinstance(rt_isinf, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_isnan,"assert isinstance(rt_isnan, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_log_array,"assert isinstance(rt_log, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_log10_array,"assert isinstance(rt_log10, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_nan_to_num_array,"assert isinstance(rt_nan_to_num, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_nanpercentile_array,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_nanstd,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_nansum,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_nansum_1D_int,assert rt_output.dtype.type == np.int64,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_nanvar,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones,"assert isinstance(rt_ones, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones,assert np.isfortran(rt_ones) == (order == 'F'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones,assert not np.isfortran(rt_ones),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones_kwargs,"assert isinstance(rt_ones, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones_kwargs,assert np.isfortran(rt_ones) == (order == 'F'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones_kwargs,assert not np.isfortran(rt_ones),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones_like,assert np.isfortran(rt_ones_like),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones_like,assert not np.isfortran(rt_ones_like),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones_like,"assert isinstance(rt_ones_like, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones_like,"assert isinstance(rt_ones_like, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_ones_like,"assert not isinstance(rt_ones_like, FastArray)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_percentile_array,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_putmask,"assert isinstance(rt_putmask, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_repeat_array_repeats,"assert isinstance(rt_repeat, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_reshape,assert np.isfortran(rt_reshape) == np.isfortran(np_reshape),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_reshape,"assert isinstance(rt_reshape, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_round_array,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_trunc,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_trunc,"assert isinstance(rt_output, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint8,"assert isinstance(rt_uint8, type(np_uint8))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint8,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint8,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint16,"assert isinstance(rt_uint16, type(np_uint16))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint16,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint16,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint32,"assert isinstance(rt_uint32, type(np_uint32))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint32,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint32,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint64,"assert isinstance(rt_uint64, type(np_uint64))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint64,"assert isinstance(rt_plus, type(np_plus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_uint64,"assert isinstance(rt_minus, type(np_minus))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_vstack,"assert isinstance(rt_vstack, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros,"assert isinstance(rt_zeros, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros,assert np.isfortran(rt_zeros) == (order == 'F'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros,assert not np.isfortran(rt_zeros),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros_kwargs,"assert isinstance(rt_zeros, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros_kwargs,assert np.isfortran(rt_zeros) == (order == 'F'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros_kwargs,assert not np.isfortran(rt_zeros),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros_like,assert np.isfortran(rt_zeros_like),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros_like,assert not np.isfortran(rt_zeros_like),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros_like,"assert isinstance(rt_zeros_like, FastArray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros_like,"assert isinstance(rt_zeros_like, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
rtosholdings,riptable,riptable/hypothesis_tests/test_riptide_numpy_equivalency.py,test_zeros_like,"assert not isinstance(rt_zeros_like, FastArray)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(StellarLuminosity(R, None, L).T, T, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(StellarLuminosity(None, T, L).R, R, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(KeplersThirdLaw(None, M_s, P, M_p).a, a, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(KeplersThirdLaw(a, None, P, M_p).M_s, M_s, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(KeplersThirdLaw(a, M_s, P, None).M_p, M_p, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(SurfaceGravity(M, R, None).g, g, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(SurfaceGravity(M, None, g).R, R, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(SurfaceGravity(None, R, g).M, M, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(TransitDepth(R_s, R_p).depth, depth, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(TransitDepth(R_s, None, depth).R_p, R_p, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(TransitDepth(None, R_p, depth).R_s, R_s, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(Density(M, None, density).R, R, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(Density(None, R, density).M, M, 4)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(eq.ImpactParameter(a, None, i, b).R_s, R_s, 3)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ryanvarley,ExoData,exodata/tests/test_equations.py,test_can_derive_other_vars_from_one_calculated,"self.assertAlmostEqual(eq.ImpactParameter(None, R_s, i, b).a, a, 3)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_requirements.py,test_requirement_line,"assert line.get_line(with_markers=True, with_hashes=True) == req.line",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_requirements.py,test_requirement_line,"assert line.get_line(with_markers=True, with_hashes=True, as_list=True) == req.as_list",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_requirements.py,test_requirement_line,"assert line.get_line(with_markers=False, with_hashes=True) == req.line_without_markers",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_requirements.py,test_requirement_line,"assert line.get_line(with_markers=False, with_hashes=True, as_list=True) == req.list_without_markers",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_requirements.py,test_repo_line,"assert Line(repo_line).get_line(with_prefix=True, with_markers=True, as_list=False) == reformatted_line",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_requirements.py,test_repo_line,"assert Line(repo_line).get_line(with_prefix=True, with_markers=True, as_list=True) == repo_list",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_uri,"assert parsed_url.base_url == url, '{} {} {!s}'.format(parsed_url.base_url, url, authurl)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_uri,assert '----' in parsed_url.safe_string,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_uri,assert '****' in parsed_url.hidden_auth,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_repository_url,assert parsed_url.subdirectory,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_repository_url,"assert parsed_url.url_without_ref == '{0}#{1}'.format(url_without_fragment_or_ref, parsed_url.fragment)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_repository_url,assert parsed_url.url_without_ref == url_without_fragment_or_ref,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_repository_url,assert parsed_url.url_without_fragment_or_ref == url_without_fragment_or_ref,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_repository_url,assert parsed_url.url_without_ref == url,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_repository_url,assert parsed_url.url_without_fragment_or_ref == url_without_fragment,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_repository_url,assert parsed_url.url_without_fragment_or_ref == url,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_repository_url,assert parsed_url.url_without_fragment == url_without_fragment,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sarugaku,requirementslib,tests/unit/test_uri.py,test_repository_url,assert parsed_url.url_without_fragment == url,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_get_converted_relative_path,assert relpath.startswith('.'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_get_converted_relative_path,assert vistir.path.abspathu(relpath) == os.path.abspath(vistir.misc.to_text(path)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_is_valid_url,assert vistir.path.is_valid_url(unparsed_url),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_path_to_url,assert file_url.startswith('file:'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_path_to_url,assert vistir.path.is_file_url(file_url) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_path_to_url,assert vistir.path.is_file_url(FakeLink(url=file_url)) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_path_to_url,assert file_url == filename,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_path_to_url,assert not file_url,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_normalize_drive,assert vistir.path.normalize_drive(lower_path) == upper_path,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_normalize_drive,assert vistir.path.normalize_drive(upper_path) == upper_path,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
sarugaku,vistir,tests/test_path.py,test_normalize_drive,assert vistir.path.normalize_drive(filename) == filename,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
satellogic,orbit-predictor,tests/test_sun.py,test_eclipse_duration_beta_90_is_0,assert eclipse_duration_value == expected_eclipse_duration,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
satellogic,orbit-predictor,tests/test_sun.py,test_eclipse_duration_dwarf_planet_always_0,assert eclipse_duration_value == expected_eclipse_duration,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
satellogic,orbit-predictor,tests/test_sun.py,test_eclipse_duration_is_maximum_at_beta_0,assert beta != 0,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
satellogic,orbit-predictor,tests/test_sun.py,test_eclipse_duration_is_maximum_at_beta_0,"assert eclipse_duration(beta, period) < ref_eclipse_duration",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
satellogic,orbit-predictor,tests/test_accurate_predictor.py,test_pass_is_always_returned,"self.assertGreater(pass_.max_elevation_deg, 0)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
satellogic,orbit-predictor,tests/test_predictors.py,test_get_normal_vector_zero_inclination_always_z_aligned,assert normal_vector[0] == normal_vector[1] == 0,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
satellogic,orbit-predictor,tests/test_predictors.py,test_get_normal_vector_zero_inclination_always_z_aligned,assert normal_vector[2] == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
satellogic,orbit-predictor,tests/test_predictors.py,test_get_beta_always_between_m_90_and_90,assert -90 <= nss.get_beta(when_utc) <= 90,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
saulzar,multical,multical/transform/hypothesis.py,truncate_normalise,"assert np.allclose(r, m), f'm = {m}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_top_level_strategy,assert not validator.is_valid(instance),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_top_level_strategy,assert is_valid_header(instance),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_failing_mutations,"assert mutation(MutationContext(schema, {}, location, 'application/json'), data.draw, schema) == MutationResult.FAILURE",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_change_type_urlencoded,"assert change_type(context, data.draw, schema) == MutationResult.FAILURE",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_successful_mutations,"assert mutation(MutationContext(schema, {}, 'body', 'application/json'), data.draw, schema) == MutationResult.SUCCESS",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_successful_mutations,assert not validator.is_valid(new_instance),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_path_parameters_are_string,assert new_schema['type'] == 'object',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_path_parameters_are_string,"assert not isinstance(new_instance['foo'], (list, dict))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_path_parameters_are_string,assert len(new_instance) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_path_parameters_are_string,assert not validator.is_valid(new_instance),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_custom_fields_are_intact,assert key in new_schema,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
schemathesis,schemathesis,test/specs/openapi/test_negative.py,test_no_unsatisfiable_schemas,assert canonicalish(mutated_schema) != FALSEY,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
scrapy-plugins,scrapy-splash,tests/test_utils.py,test_fast_hash,assert _fast_hash(val1) == _fast_hash(val1),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
scrapy-plugins,scrapy-splash,tests/test_utils.py,test_fast_hash,assert _fast_hash(val1) != _fast_hash(val2),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
scrapy-plugins,scrapy-splash,tests/test_utils.py,test_dict_hash,assert dict_hash(val1) == dict_hash(val1),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
scrapy-plugins,scrapy-splash,tests/test_utils.py,test_dict_hash,assert dict_hash(val1) != dict_hash(val2),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
scrapy-plugins,scrapy-splash,tests/test_utils.py,test_json_based_hash,assert json_based_hash(val1) == json_based_hash(val1),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
scrapy-plugins,scrapy-splash,tests/test_utils.py,test_json_based_hash,assert json_based_hash(val1) != json_based_hash(val2),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
se2p,pynguin,tests/utils/test_randomness.py,test_set_get_seed,assert rng.get_seed() == seed,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
seatgeek,fuzzywuzzy,test_fuzzywuzzy_hypothesis.py,test_identical_strings_extracted,assert result != [],False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
seatgeek,fuzzywuzzy,test_fuzzywuzzy_hypothesis.py,test_identical_strings_extracted,"assert (choice, 100) in result",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
seatgeek,fuzzywuzzy,test_fuzzywuzzy_hypothesis.py,test_only_identical_strings_extracted,assert result != [],False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
seatgeek,fuzzywuzzy,test_fuzzywuzzy_hypothesis.py,test_only_identical_strings_extracted,assert pchoice == processor(r[0]),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_graph.py,test_data_existence,"self.assertEqual(len(g_data), len(data))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_graph.py,test_data_existence,"self.assertIn(binary, g_data)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_graph.py,test_graph_constraints,"self.assertLessEqual(len(list(graph.edges_at(0))), len(data))",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
seemoo-lab,polypyus,tests/test_graph.py,test_graph_constraints,"self.assertEqual(max((len(binary) for binary in data)), graph._get_max_match_size(0))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_graph.py,test_identity_matching,"self.assertIn(([match], len(match), len(match)), matches)",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_tools.py,test_identity,"self.assertEqual(a, tester)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_tools.py,test_fuzzy_identity,"self.assertEqual(a, template)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_tools.py,test_fuzzy_equality,"self.assertEqual(a, tmpl_2)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_tools.py,test_fuzzy_inequality,"self.assertNotEqual(a, tmpl_2)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_tools.py,test_fuzz_all,"self.assertEqual(a, tester2)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_tools.py,test_longest_common_prefix,"self.assertEqual(fragment.longest_common_prefix(prefix_fragment), prefix_fragment.longest_common_prefix(fragment))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_tools.py,test_longest_common_prefix,"self.assertEqual(len(prefix), fragment.longest_common_prefix(prefix_fragment))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_tools.py,test_inequality,"self.assertNotEqual(MatchFragment(bin_a), bin_b)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
seemoo-lab,polypyus,tests/test_tools.py,test_inequality_longest_prefix,"self.assertLessEqual(MatchFragment(bin_a).longest_common_prefix(MatchFragment(bin_b)), min(len(bin_a), len(bin_b)))",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
seemoo-lab,polypyus,tests/test_tools.py,test_prefix_non_matching_fuzziness,"self.assertLessEqual(MatchFragment(tmpl_1, fuzziness=fuzz_1).longest_common_prefix(MatchFragment(tmpl_2, fuzziness=fuzz_2)), i)",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
shreevatsa,sanskrit,tests/test_data.py,test_from_inverts_to,assert from_short_url(to_short_url(s)) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
shreevatsa,sanskrit,tests/test_data.py,test_to_inverts_from,"assert t == s, (s, t)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left + right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left.apply(right) == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_add_sub,assert left - right == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left != right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left == right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert left == right,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert not left != right,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_ticks.py,test_tick_equality,assert cls(n) != cls(-n),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/io/parser/test_parse_dates.py,test_hypothesis_delimited_date,assert except_out_dateutil == except_in_dateutil,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/io/parser/test_parse_dates.py,test_hypothesis_delimited_date,assert result == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/tslibs/test_ccalendar.py,test_isocalendar,assert result == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sid-the-coder,QuickDA,environment/lib/python3.7/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py,test_on_offset_implementations,assert offset.is_on_offset(dt) == (compare == dt),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
simonw,sqlite-utils,tests/test_hypothesis.py,test_roundtrip_integers,assert list(db['test'].rows) == [row],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
simonw,sqlite-utils,tests/test_hypothesis.py,test_roundtrip_text,assert list(db['test'].rows) == [row],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
simonw,sqlite-utils,tests/test_hypothesis.py,test_roundtrip_binary,assert list(db['test'].rows) == [row],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
simonw,sqlite-utils,tests/test_hypothesis.py,test_roundtrip_floats,assert list(db['test'].rows) == [row],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sio,bash-complete-partial-path,tests/test_tabkey.py,test_shift_tab,"assert bash.complete(command, custom_tabs=tabs_forward) == bash.complete(command, custom_tabs=tabs_forward_and_back)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_ibm_float_packer.py,test_packed_floats_are_four_bytes,assert len(packed) == len(floats) * 4,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_ibm_float_packer.py,test_roundtrip,"assert almost_equal(f, float(u), epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_ibm_float_packer.py,test_roundtrip,assert bytes(byte_data) == bytes(packed),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reversed_sequence_view.py,test_contains,assert all((item in rev for item in seq)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reversed_sequence_view.py,test_length,assert len(rev) == len(seq),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reversed_sequence_view.py,test_get_item,"assert all((rev[i] == b for i, b in enumerate(reversed(seq))))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reversed_sequence_view.py,test_count,assert all((seq.count(a) == rev.count(a) for a in seq)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reversed_sequence_view.py,test_index,assert all((rev.index(a) == list(reversed(seq)).index(a) for a in seq)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reversed_sequence_view.py,test_negative_indexing,"assert all((rev[index] == a for index, a in zip(range(-1, -len(seq), -1), seq)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reversed_sequence_view.py,test_repr,assert r.startswith('ReversedSequenceView'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reversed_sequence_view.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_zero_expected_returns_empty_list,assert headers == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_read_header_successfully,assert read_headers == written_headers,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_uncounted_headers_are_correctly_detected,assert read_headers == written_headers,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_counted_headers_are_correctly_detected,assert read_headers == written_headers,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_valid_bytes_per_sample,"assert bps in {1, 2, 4}",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_samples_per_trace,assert toolkit.samples_per_trace(binary_reel_header) == spt,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_empty_traces_have_same_length_as_trace_header,"assert toolkit.trace_length_bytes(binary_reel_header, bps) == toolkit.TRACE_HEADER_NUM_BYTES",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_on_sample_traces_have_same_length_as_trace_header_plus_one_sample,"assert toolkit.trace_length_bytes(binary_reel_header, bps) == toolkit.TRACE_HEADER_NUM_BYTES + bps",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_read_header_successfully,"assert are_equal(trace_header_written, trace_header)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_correctly_rounttrip_extended_headers,assert pages_read == pages_written,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_toolkit.py,test_pack_values,assert items_written == items_read,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_field_types.py,test_int16_in_range_is_equal_to_int,assert Int16(n) == n,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_field_types.py,test_nnint16_in_range_is_equal_to_int,assert NNInt16(n) == n,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_field_types.py,test_int32_in_range_is_equal_to_int,assert Int32(n) == n,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_field_types.py,test_nnint32_in_range_is_equal_to_int,assert NNInt32(n) == n,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_packer.py,test_compile_bijective_header_packer_successfully,assert cformat[0] == endian,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_packer.py,test_compile_bijective_header_packer_successfully,assert cformat[1] == 'i',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_packer.py,test_compile_bijective_header_packer_successfully,assert cformat[2] == 'I',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_packer.py,test_compile_bijective_header_packer_successfully,"assert field_name_allocations == [['field_a'], ['field_b']]",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_packer.py,test_compile_surjective_header_packer_successfully,assert cformat[0] == endian,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_packer.py,test_compile_surjective_header_packer_successfully,assert cformat[1] == 'i',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_packer.py,test_compile_surjective_header_packer_successfully,"assert field_name_allocations == [['field_a', 'field_c'], ['field_b']]",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_copy,assert h1 is not h2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
sixty-north,segpy,test/test_header.py,test_copy,assert h1.field_a == h2.field_a,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_copy,assert h1.field_a == h2.field_a,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_copy,assert h1.field_a == h2.field_a,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_repr,assert str(a) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_repr,assert str(b) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_repr,assert str(c) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_repr,assert 'field_a' in r,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_repr,assert 'field_b' in r,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_repr,assert 'field_c' in r,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_repr,assert 'ExampleHeader' in r,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_equality,"assert are_equal(lhs, rhs)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_inequality,"assert not are_equal(lhs, rhs)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_header.py,test_pickle_roundtrip,"assert are_equal(h1, h2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_roundtrip.py,test_roundtrip,"assert are_equal(write_header, read_header)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_roundtrip.py,test_roundtrip,assert written_line[:CARD_LENGTH].rstrip().ljust(CARD_LENGTH) == read_line,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_roundtrip.py,test_header_num_lines,assert len(read_header_lines) == CARDS_PER_HEADER,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_roundtrip.py,test_header_line_length,assert all((len(line) == CARD_LENGTH for line in read_header_lines)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_roundtrip.py,test_header_template,assert write_header_lines == list(read_header_lines),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_roundtrip.py,test_header_template,assert write_header_fields.keys() == read_header_fields.keys(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_roundtrip.py,test_header_template,assert written_field_value.strip().startswith(read_field_value.strip()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_datatypes.py,test_integers_are_four_bytes,assert size_in_bytes(ctype) == 4,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_datatypes.py,test_shorts_are_two_bytes,assert size_in_bytes(ctype) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_datatypes.py,test_bytes_are_one_byte,assert size_in_bytes(ctype) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_datatypes.py,test_floats_are_four_bytes,assert size_in_bytes(ctype) == 4,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_batch_sizes_unpadded,assert all((len(batch) == batch_size for batch in batches[:-1])),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_final_batch_sizes,assert len(batches[-1]) <= batch_size,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
sixty-north,segpy,test/test_util.py,test_batch_sizes_padded,assert all((len(batch) == batch_size for batch in batches)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_pad_contents,assert batches[-1][batch_size - pad_length:] == [pad] * pad_length,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_contiguous,assert intervals_are_contiguous(interleaved),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_contiguous_with_offset_start,"assert complements[0] == range(start_index, first_interval_start)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_contiguous_with_offset_end,"assert complements[-1] == range(last_interval_end, end_index)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_intervals_partially_overlap_positive,"assert intervals_partially_overlap(interval_a, interval_b)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_intervals_partially_overlap_positive_reversed,"assert intervals_partially_overlap(interval_a, interval_b)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_intervals_partially_overlap_negative_disjoint,"assert not intervals_partially_overlap(interval_a, interval_b)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_intervals_partially_overlap_negative_equal,"assert not intervals_partially_overlap(interval_a, interval_b)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_rounded_up_is_greater_or_equal,assert r >= integer,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
sixty-north,segpy,test/test_util.py,test_rounded_up_is_a_mutiple,assert r % multiple == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_successfully_extracts_first_sentence,assert first_sentence(t) == sentence_a + '.',False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_magic_name_positive,assert is_magic_name(magic_name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_magic_name_negative,assert not is_magic_name(muggle_name),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_reversed_range_is_equivalent_to_reversed,assert list(reversed_range(r)) == list(reversed(r)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_reversed_reversed_is_what_we_began_with,assert reversed_range(reversed_range(r)) == r,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_ascending_range_result_is_ascending,assert seq.step > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_ascending_range_result_is_descending,assert seq.step < 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_descending_range_result_is_ascending,assert seq.step > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_descending_range_result_is_descending,assert seq.step < 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_range_sense_is_preserved,assert sgn(r.step) == sgn(seq.step),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_ascending_sequence_result_is_ascending,"assert is_sorted(seq, reverse=False, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_ascending_sequence_result_is_descending,"assert is_sorted(seq, reverse=True, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_descending_sequence_result_is_ascending,"assert is_sorted(seq, reverse=False, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_descending_sequence_result_is_descending,"assert is_sorted(seq, reverse=True, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_sequence_sense_is_preserved,assert b == descending != ascending,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_sequence_sorted_ascending_positive,"assert is_sorted(s, reverse=False, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_sequence_sorted_ascending_negative,"assert not is_sorted(s, reverse=False, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_sequence_sorted_descending_positive,"assert is_sorted(s, reverse=True, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_sequence_sorted_descending_negative,"assert not is_sorted(s, reverse=True, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_sequence_sorted_ascending_positive_duplicates,"assert is_sorted(s, reverse=False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_sequence_sorted_ascending_negative_duplicates,"assert not is_sorted(s, reverse=False)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_sequence_sorted_descending_positive_duplicates,"assert is_sorted(s, reverse=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_sequence_sorted_descending_negative_duplicates,"assert not is_sorted(s, reverse=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_sequence_of_one_is_sorted_ascending,"assert is_sorted(r, reverse=False, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_sequence_of_one_is_sorted_descending,"assert is_sorted(r, reverse=True, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_range_sorted_ascending_positive,"assert is_sorted(r, reverse=False, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_range_sorted_ascending_negative,"assert not is_sorted(r, reverse=False, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_range_sorted_descending_positive,"assert is_sorted(r, reverse=True, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_is_range_sorted_descending_negative,"assert not is_sorted(r, reverse=True, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_empty_range_is_sorted_ascending,"assert is_sorted(r, reverse=False, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_empty_range_is_sorted_descending,"assert is_sorted(r, reverse=True, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_range_of_one_is_sorted_ascending,"assert is_sorted(r, reverse=False, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_range_of_one_is_sorted_descending,"assert is_sorted(r, reverse=True, distinct=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_measure_range_stride,assert s == r.step,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_measure_list_stride_regular,assert s == r.step,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_measure_list_stride_irregular,assert s is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_stride_of_sequence_of_one_is_none,assert measure_stride(s) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_stride_of_empty_sequence_is_none,assert measure_stride(s) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_first_sequences,assert first(s) == s[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_last_sequences,assert last(s) == s[-1],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_last_iterable,assert last(iter(s)) == s[-1],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_minmax_sequences,assert a == min(s),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_util.py,test_minmax_sequences,assert b == max(s),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_zero,"assert ibm2ieee(bytes([a, 0, 0, 0])) == 0.0",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_zero_from_ibm_float,assert ibm_a == ibm_b,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_bool,assert bool(IBMFloat.from_float(f)) == bool(f),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_bytes_roundtrip,assert bytes(ibm) == b,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_floats_roundtrip,"assert almost_equal(f, float(ibm), epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_trunc_above_zero,assert trunc(ibm) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_trunc_below_zero,assert trunc(ibm) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_ceil,assert math.ceil(ibm) == i + 1,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_floor,assert math.floor(ibm) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_normalise_subnormal,assert mantissa != 0,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
sixty-north,segpy,test/test_float.py,test_normalise_subnormal,assert ibm.is_subnormal(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_normalise_subnormal,assert not normalized.is_subnormal(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_zero_subnormal,assert mantissa != 0,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
sixty-north,segpy,test/test_float.py,test_zero_subnormal,assert ibm.is_subnormal(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_zero_subnormal,assert z.is_zero(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_abs,assert abs_ibm.signbit >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_negate_non_zero,assert ibm.signbit != negated.signbit,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
sixty-north,segpy,test/test_float.py,test_signbit,assert ltz == ibm.signbit,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_str,assert str(g) == str(ibm),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_is_subnormal,assert ibm.is_subnormal(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_pos,assert ibm == +ibm,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_subnormal_equal,assert p == q,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_add,"assert almost_equal(ieee_c, ibm_c, epsilon=EPSILON_IBM_FLOAT * 4)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_sub,"assert almost_equal(ieee_c, ibm_c, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_conversion_to_int,assert int(ibm) == int(f),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_round,assert round(ibm) == round(g),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_floordiv_ibm,assert ibm_a // ibm_b == ieee_a // ieee_b,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_rfloordiv_ibm,assert ieee_a // ibm_b == ieee_a // ieee_b,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_truediv_ibm,"assert almost_equal(ibm_c, ieee_c, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_rtruediv_ibm,"assert almost_equal(ieee_c1, ieee_c2, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_pow_ibm,"assert almost_equal(ibm_c, ieee_c, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_pow_ibm_complex_result,"assert almost_equal(ibm_c, ieee_c, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_pow_ibm_ieee_result,"assert almost_equal(ieee_c1, ieee_c2, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_rpow_ibm_ieee_results,"assert almost_equal(ieee_c1, ieee_c2, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_rpow_ibm_complex_result,"assert almost_equal(ieee_c1, ieee_c2, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_mod_ibm,"assert almost_equal(ibm_c, ieee_c, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_rmod_ibm,"assert almost_equal(ieee_c1, ieee_c2, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_radd_ibm,"assert almost_equal(ieee_c1, ieee_c2, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_lt_ibm,assert (ibm_a < ibm_b) == (ieee_a < ieee_b),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_gt_ibm,assert (ibm_a > ibm_b) == (ieee_a > ieee_b),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_ge_ibm,assert (ibm_a >= ibm_b) == (ieee_a >= ieee_b),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_le_ibm,assert (ibm_a <= ibm_b) == (ieee_a <= ieee_b),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_float.py,test_mul_ibm,"assert almost_equal(ibm_c, ieee_c, epsilon=EPSILON_IBM_FLOAT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reader.py,test_heuristic_for_2D_works_as_expected,assert reader.dimensionality == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reader.py,test_heuristic_for_3D_works_as_expected,assert reader.dimensionality == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reader.py,test_num_inlines_is_correct,assert reader.num_inlines() == dset.num_traces(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reader.py,test_num_xlines_is_correct,assert reader.num_xlines() == dset.num_traces(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reader.py,test_inline_xline_numbers_is_correct,"assert sorted(reader.inline_xline_numbers()) == sorted(((idx, idx) for idx in range(dset.num_traces())))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reader.py,test_all_inline_xlines_have_a_trace_index,assert reader.has_trace_index(num),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reader.py,test_inline_xlines_map_to_correct_trace_index,assert reader.trace_index(num) == num[0],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_reader.py,test_inline_xlines_map_to_correct_trace_index,assert reader.trace_index(num) == num[1],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_duplicate_items_returns_none,assert catalog is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_arbitrary_mapping,assert len(shared_items) == len(mapping),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_constant_mapping,assert len(shared_items) == len(mapping),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_regular_constant_mapping,assert len(shared_items) == len(mapping),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_regular_mapping,assert len(shared_items) == len(mapping),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_linear_regular_mapping,assert len(shared_items) == len(mapping),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_arbitrary_mapping_2d,assert len(shared_items) == len(mapping),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_linear_regular_mapping_2d,assert len(shared_items) == len(mapping),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_adding_items_puts_them_in_the_catalog,"assert all((catalog[key] == value for key, value in mapping.items()))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_i_range_preserved,assert catalog.i_range == i_range,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_j_range_preserved,assert catalog.j_range == j_range,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_v_range_preserved,assert catalog.v_range == v_range,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment_positive,"assert all(((i, j) in catalog for i, j in product(i_range, j_range)))",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment_negative_i_out_of_range,"assert (i, j) not in catalog",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment_negative_j_out_of_range,"assert (i, j) not in catalog",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_length,assert len(catalog) == num_indices,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_i_min,assert catalog.i_min == i_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_i_max,assert catalog.i_max == i_range.stop - i_range.step,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_j_min,assert catalog.j_min == j_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_j_max,assert catalog.j_max == j_range.stop - j_range.step,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_key_min,"assert catalog.key_min() == (i_range.start, j_range.start)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_key_max,"assert catalog.key_max() == (i_range.stop - i_range.step, j_range.stop - j_range.step)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_value_start,assert catalog.value_first() == first(v_range),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_value_stop,assert catalog.value_last() == last(v_range),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert r.startswith('LastIndexVariesQuickestCatalog2D'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'i_range={!r}'.format(i_range) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'j_range={!r}'.format(j_range) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'v_range={!r}'.format(v_range) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,"assert isinstance(catalog, (LastIndexVariesQuickestCatalog2D, FirstIndexVariesQuickestCatalog2D))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,"assert catalog.key_min() == (i_range.start, j_range.start)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,"assert catalog.key_max() == (last(i_range), last(j_range))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.value_first() == v_range.start,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.value_last() == last(v_range),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.i_min == i_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.i_max == last(i_range),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.j_min == j_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.j_max == last(j_range),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert len(catalog) == num_indices,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert all((d[key] == catalog[key] for key in d)),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,"assert isinstance(catalog, LastIndexVariesQuickestCatalog2D)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,"assert catalog.key_min() == (i_range.start, j_range.start)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,"assert catalog.key_max() == (last(i_range), last(j_range))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,assert catalog.value_first() == v_range.start,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,assert catalog.value_last() == last(v_range),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,assert catalog.i_min == i_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,assert catalog.i_max == last(i_range),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,assert catalog.j_min == j_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,assert catalog.j_max == last(j_range),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,assert len(catalog) == num_indices,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_row_major_general,assert all((d[key] == catalog[key] for key in d)),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_key,"assert all((catalog.key(value) == key for key, value in catalog.items()))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_i_range_preserved,assert catalog.i_range == i_range,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_j_range_preserved,assert catalog.j_range == j_range,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_v_range_preserved,assert catalog.v_range == v_range,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment_positive,"assert all(((i, j) in catalog for i, j in product(i_range, j_range)))",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment_negative_i_out_of_range,"assert (i, j) not in catalog",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment_negative_j_out_of_range,"assert (i, j) not in catalog",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_length,assert len(catalog) == num_indices,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_i_min,assert catalog.i_min == i_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_i_max,assert catalog.i_max == i_range.stop - i_range.step,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_j_min,assert catalog.j_min == j_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_j_max,assert catalog.j_max == j_range.stop - j_range.step,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_key_min,"assert catalog.key_min() == (i_range.start, j_range.start)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_key_max,"assert catalog.key_max() == (i_range.stop - i_range.step, j_range.stop - j_range.step)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_value_start,assert catalog.value_first() == first(v_range),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_value_stop,assert catalog.value_last() == last(v_range),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert r.startswith('FirstIndexVariesQuickestCatalog2D'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'i_range={!r}'.format(i_range) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'j_range={!r}'.format(j_range) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'v_range={!r}'.format(v_range) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,"assert isinstance(catalog, (LastIndexVariesQuickestCatalog2D, FirstIndexVariesQuickestCatalog2D))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,"assert catalog.key_min() == (i_range.start, j_range.start)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,"assert catalog.key_max() == (last(i_range), last(j_range))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.value_first() == v_range.start,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.value_last() == last(v_range),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.i_min == i_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.i_max == last(i_range),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.j_min == j_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert catalog.j_max == last(j_range),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert len(catalog) == num_indices,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_general,assert all((d[key] == catalog[key] for key in d)),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,"assert isinstance(catalog, FirstIndexVariesQuickestCatalog2D)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,"assert catalog.key_min() == (i_range.start, j_range.start)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,"assert catalog.key_max() == (last(i_range), last(j_range))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,assert catalog.value_first() == v_range.start,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,assert catalog.value_last() == last(v_range),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,assert catalog.i_min == i_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,assert catalog.i_max == last(i_range),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,assert catalog.j_min == j_range.start,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,assert catalog.j_max == last(j_range),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,assert len(catalog) == num_indices,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_complex_always_column_major_general,assert all((d[key] == catalog[key] for key in d)),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_key,"assert all((catalog.key(value) == key for key, value in catalog.items()))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_items_keys_are_present,assert all((key in catalog for key in items.keys())),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_items_keys_are_preserved,"assert all((catalog[key] == value for key, value in items.items()))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_length,assert len(catalog) == len(items),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert r.startswith('DictionaryCatalog'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_irange_preserved,assert catalog.i_range == items.i_range,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_jrange_preserved,assert catalog.j_range == items.j_range,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_length,assert len(catalog) == len(items.items),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment,assert all((k in catalog for k in items.items.keys())),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert r.startswith('DictionaryCatalog'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'i_range={!r}'.format(items.i_range) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'j_range={!r}'.format(items.j_range) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_mapping_is_preserved,assert all((catalog[key] == c for key in r)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_length,assert len(catalog) == len(r),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment,assert all((key in catalog for key in r)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert r.startswith('RegularConstantCatalog'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'key_min={}'.format(catalog._key_min) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'key_max={}'.format(catalog._key_max) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'key_stride={}'.format(catalog._key_stride) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_mapping_is_preserved,assert all((catalog[key] == value for key in keys)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_length,assert len(catalog) == len(keys),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment,assert all((key in catalog for key in keys)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert r.startswith('ConstantCatalog'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'keys=[{} items]'.format(len(catalog._keys)) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'value={}'.format(catalog._value) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_mapping_is_preserved,"assert all((catalog[k] == v for k, v in zip(r, values)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_length,assert len(catalog) == len(r),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment,assert all((key in catalog for key in r)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert r.startswith('RegularCatalog'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'key_min={}'.format(catalog._key_min) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'key_max={}'.format(catalog._key_max) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'key_stride={}'.format(catalog._key_stride) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'values=[{} items]'.format(len(catalog._values)) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_mapping_preserved,"assert all((catalog[k] == v for k, v in zip(key_range, value_range)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_length,assert len(catalog) == len(key_range),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_containment,assert all((k in catalog for k in key_range)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert r.startswith('LinearRegularCatalog'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'key_min={}'.format(catalog._key_min) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'key_max={}'.format(catalog._key_max) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'key_stride={}'.format(catalog._key_stride) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'value_first={}'.format(catalog._value_start) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'value_last={}'.format(catalog._value_stop) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert 'value_stride={}'.format(catalog._value_stride) in r,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
sixty-north,segpy,test/test_catalog.py,test_repr,assert check_balanced(r),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_extended_textual_header.py,test_forty_lines_per_page,assert all((len(page) == CARDS_PER_HEADER for page in pages)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_extended_textual_header.py,test_eighty_bytes_per_encoded_line,assert all([len(line.encode(encoding)) == CARD_LENGTH for page in pages for line in page]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_extended_textual_header.py,test_lines_end_with_cr_lf,assert all([line.endswith('\r\n') for page in pages for line in page]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sixty-north,segpy,test/test_extended_textual_header.py,test_end_text_stanza_present,assert pages[-1][0].startswith(END_TEXT_STANZA),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sourmash-bio,sourmash,tests/test__minhash_hypothesis.py,test_set_abundance_num_hypothesis,assert len(mins) == size,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sourmash-bio,sourmash,tests/test__minhash_hypothesis.py,test_set_abundance_num_hypothesis,assert oracle[k] == v,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sourmash-bio,sourmash,tests/test__minhash_hypothesis.py,test_set_abundance_scaled_hypothesis,assert len(mins) == below_max_hash,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
sourmash-bio,sourmash,tests/test__minhash_hypothesis.py,test_set_abundance_scaled_hypothesis,assert oracle[k] == v,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
sourmash-bio,sourmash,tests/test__minhash_hypothesis.py,test_set_abundance_scaled_hypothesis,assert k <= max_hash,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
sourmash-bio,sourmash,tests/test__minhash_hypothesis.py,test_set_abundance_scaled_hypothesis,assert v > 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
sqlfluff,sqlfluff,test/dialects/bigquery_test.py,test_bigquery_relational_operator_parsing,assert not lex_vs,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sqlfluff,sqlfluff,test/dialects/bigquery_test.py,test_bigquery_relational_operator_parsing,assert parsed.raw == raw,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_julier_identity,"torch.testing.assert_allclose(output_mean, expected_output_mean)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_julier_identity,"torch.testing.assert_allclose(output_covariance, expected_output_covariance)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_julier_linear,"torch.testing.assert_allclose(output_mean, expected_output_mean)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_julier_linear,"torch.testing.assert_allclose(output_covariance, expected_output_covariance, atol=0.0001, rtol=0.0001)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_merwe_identity,"torch.testing.assert_allclose(output_mean, expected_output_mean)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_merwe_identity,"torch.testing.assert_allclose(output_covariance, expected_output_covariance)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_merwe_linear,"torch.testing.assert_allclose(output_mean, expected_output_mean, atol=0.0001, rtol=0.0001)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_merwe_linear,"torch.testing.assert_allclose(output_covariance, expected_output_covariance, atol=0.0001, rtol=0.0001)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_merwe_square_root,"torch.testing.assert_allclose(output_mean, expected_output_mean)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_merwe_square_root,"torch.testing.assert_allclose(output_covariance, expected_output_covariance)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_merwe_square_root_additive_nosie,assert _dim == dim,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_merwe_square_root_additive_nosie,"torch.testing.assert_allclose(output_mean, expected_output_mean)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
stanford-iprl-lab,torchfilter,tests/test_unscented_transform.py,test_unscented_transform_merwe_square_root_additive_nosie,"torch.testing.assert_allclose(output_covariance, expected_output_covariance)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_maybe.py,test_left_identity_law,assert Just(value).and_then(f) == f(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_maybe.py,_test_just_equality,assert Just(value) == Just(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_maybe.py,_test_just_inequality,assert Just(value) != Nothing(),False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
suned,pfun,tests/test_maybe.py,_test_nothing_inequality,assert Just(first) != Just(second),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
suned,pfun,tests/test_maybe.py,_test_just_identity_law,assert Just(value).map(identity) == Just(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_maybe.py,test_composition_law,assert Just(value).map(h) == Just(value).map(g).map(f),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_maybe.py,test_just_or_else,assert Just(value).or_else(None) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_maybe.py,test_nothing_or_else,assert Nothing().or_else(value) is value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_maybe.py,test_just_bool,assert bool(Just(value)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_maybe.py,test_flatten,assert flatten(maybe_list) == List((m.get for m in maybe_list if m)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_dict.py,test_setitem,"assert new_d == Dict(d).set('key', 'value')",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_dict.py,test_setitem,assert d != new_d,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
suned,pfun,tests/test_dict.py,test_setitem,assert 'key' not in d,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
suned,pfun,tests/test_dict.py,test_get_existing_key,assert d['key'] == 'value',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_dict.py,test_get_existing_key,assert d.get('key') == Just('value'),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_dict.py,test_get_missing_key,assert d.get('key') == Nothing(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_dict.py,test_update,assert 'key' not in d,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
suned,pfun,tests/test_dict.py,test_update,assert new_d != d,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
suned,pfun,tests/test_dict.py,test_update,assert new_d['key'] == 'value',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_associativity_law,assert e.and_then(f).and_then(g).run(env) == e.and_then(lambda x: f(x).and_then(g)).run(env),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_composition_law,assert effect.success(value).map(h).run(env) == effect.success(value).map(g).map(f).run(env),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_identity_law,assert effect.success(value).map(identity).run(env) == effect.success(value).run(env),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_left_identity_law,assert effect.success(value).and_then(f).run(env) == f(value).run(env),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_right_identity_law,assert effect.success(value).and_then(effect.success).run(env) == effect.success(value).run(env),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_equality,assert effect.success(value).run(env) == effect.success(value).run(env),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_inequality,assert effect.success(first).run(env) != effect.success(second).run(env),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
suned,pfun,tests/test_effect.py,test_lift_cpu_bound,"assert effect.lift_cpu_bound(lambda v1, v2: (v1, v2))(e1, e2).run(None) == (e1.run(None), e2.run(None))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_lift_io_bound,"assert effect.lift_io_bound(lambda v1, v2: (v1, v2))(e1, e2).run(None) == (e1.run(None), e2.run(None))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_combine_cpu_bound,"assert effect.combine_cpu_bound(e1, e2)(lambda v1, v2: (v1, v2)).run(None) == (e1.run(None), e2.run(None))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_combine_io_bound,"assert effect.combine_io_bound(e1, e2)(lambda v1, v2: (v1, v2)).run(None) == (e1.run(None), e2.run(None))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_from_callable_cpu_bound,assert effect.from_cpu_bound_callable(f).run(None) == f(None).get,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_from_callable_io_bound,assert effect.from_io_bound_callable(f).run(None) == f(None).get,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_process_and_thread_pool_initialized_lazily,assert env.process_executor is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_process_and_thread_pool_initialized_lazily,assert env.thread_executor is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_purify,assert effect.purify(f)(x).run(None) == f(x),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_purify,assert effect.purify_io_bound(f)(x).run(None) == f(x),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_effect.py,test_purify,assert effect.purify_cpu_bound(f)(x).run(None) == f(x),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_left_identity_law,assert Right(value).and_then(f) == f(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_equality,assert Left(value) == Left(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_equality,assert Right(value) == Right(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_inequality,assert Left(first) != Left(second),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
suned,pfun,tests/test_either.py,test_inequality,assert Right(first) != Right(second),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
suned,pfun,tests/test_either.py,test_inequality,assert Left(first) != Right(first),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
suned,pfun,tests/test_either.py,test_identity_law,assert Left(value).map(identity) == Left(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_identity_law,assert Right(value).map(identity) == Right(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_composition_law,assert Left(value).map(h) == Left(value).map(g).map(f),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_composition_law,assert Right(value).map(h) == Right(value).map(g).map(f),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_or_else,assert Right(value).or_else(default) == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_or_else,assert Left(value).or_else(default) == default,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_bool,assert bool(Right(value)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_either.py,test_bool,assert not bool(Left(value)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_append,"assert l1.append(l2) == l1 + (l2,)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_left_append_identity_law,assert List() + l == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_getitem,assert l[0] == l[0],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_right_append_identity_law,assert l + List() == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_append_associativity_law,assert x + y + z == x + (y + z),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_associativity_law,assert l.and_then(f).and_then(g) == l.and_then(lambda x: f(x).and_then(g)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_equality,assert List(t) == List(t),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_composition_law,assert l.map(h) == l.map(g).map(f),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_identity_law,assert l.map(identity) == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_inequality,assert List(first) != List(second),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
suned,pfun,tests/test_list.py,test_left_identity_law,assert List([v]).and_then(f) == f(v),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_right_identity_law,assert l.and_then(lambda v: List([v])) == l,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_reverse,assert List(l).reverse() == List(reversed(l)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_filter,"assert List(l).filter(p) == List(builtins.filter(p, l))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_reduce,"assert List(l).reduce(lambda a, b: a + b, 0) == i",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_extend,assert l1.extend(l2) == l1 + l2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_list.py,test_zip,"assert List(l1.zip(l2)) == List(zip(l1, l2))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_functions.py,test_identity,assert functions.identity(a) == a,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_functions.py,test_compose,assert h(arg) == f(g(arg)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_functions.py,test_always,"assert f(*args, **kwargs) == value",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_trampoline.py,test_right_identity_law,assert trampoline.and_then(Done).run() == trampoline.run(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_trampoline.py,test_left_identity_law,assert Done(value).and_then(f).run() == f(value).run(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_trampoline.py,test_associativity_law,assert trampoline.and_then(f).and_then(g).run() == trampoline.and_then(lambda x: f(x).and_then(g)).run(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_trampoline.py,test_equality,assert Done(value) == Done(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_trampoline.py,test_inequality,assert Done(first) != Done(second),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
suned,pfun,tests/test_trampoline.py,test_identity_law,assert Done(value).map(identity).run() == Done(value).run(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_trampoline.py,test_composition_law,assert Done(value).map(g).map(f).run() == Done(value).map(h).run(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_operator.py,test_getitem,"assert op.get_item(a - 1)(t) == operator.getitem(t, a - 1)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_aio_trampoline.py,test_equality,assert Done(value) == Done(value),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
suned,pfun,tests/test_aio_trampoline.py,test_inequality,assert Done(first) != Done(second),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_goes_suvi.py,test_can_handle_query,"assert suvi_client._can_handle_query(time, a.Instrument.suvi) is True",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_goes_suvi.py,test_can_handle_query,"assert suvi_client._can_handle_query(time, a.Instrument.suvi, a.Wavelength(131 * u.Angstrom)) is True",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_goes_suvi.py,test_can_handle_query,assert suvi_client._can_handle_query(time) is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_goes_suvi.py,test_can_handle_query,"assert suvi_client._can_handle_query(time, a.Instrument.aia) is False",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_goes_suvi.py,test_can_handle_query,"assert suvi_client._can_handle_query(time, a.Instrument.suvi, a.goes.SatelliteNumber(16))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_norh.py,test_can_handle_query,assert ans1 is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_norh.py,test_can_handle_query,assert ans1 is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_norh.py,test_can_handle_query,assert ans2 is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_fermi_gbm.py,test_can_handle_query,assert ans1 is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_fermi_gbm.py,test_can_handle_query,assert ans2 is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_fermi_gbm.py,test_can_handle_query,assert ans3 is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_fermi_gbm.py,test_can_handle_query,assert ans4 is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,assert len(res) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(res[1:], UnifiedResponse)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,assert len(res[1:]) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(res[0:1], UnifiedResponse)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,assert len(res[0:1]) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(res[1:, 0], UnifiedResponse)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert len(res[1:, 0]) == 1",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(res[0:1, 0], UnifiedResponse)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert len(res[0:1, 0]) == 1",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(res[0][0], QueryResponseRow)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(res[1][0], QueryResponseRow)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(res[1, 0:1], QueryResponseTable)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(aa, QueryResponseRow)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(aa, QueryResponseColumn)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(aa, UnifiedResponse)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,assert len(table.columns) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(aa, QueryResponseTable)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,assert len(table.columns) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(aa, UnifiedResponse)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,assert len(aa) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,assert len(aa[0]) == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(aa, QueryResponseTable)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(aa, QueryResponseTable)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(aa, QueryResponseTable)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,"assert isinstance(aa, QueryResponseColumn)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_indexing,assert len(res) != 1,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
sunpy,sunpy,sunpy/net/tests/test_fido.py,test_fido_iter,"assert isinstance(resp, QueryResponse)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_lyra_ud.py,test_can_handle_query,assert ans1 is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_lyra_ud.py,test_can_handle_query,assert ans2 is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_goes_ud.py,test_can_handle_query,assert ans1 is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_goes_ud.py,test_can_handle_query,assert ans2 is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
sunpy,sunpy,sunpy/net/dataretriever/sources/tests/test_goes_ud.py,test_can_handle_query,assert ans3 is False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/web/test_webish.py,test_small_content,"self.assertThat(request.content, IsInstance(BytesIO))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_base32.py,test_a2b_b2a_match_Pythons,"self.assertIsInstance(encoded, bytes)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_base32.py,test_a2b_b2a_match_Pythons,self.assertTrue(base32.could_be_base32_encoded(encoded)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_base32.py,test_a2b_b2a_match_Pythons,"self.assertEqual(decoded, input_bytes)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_base32.py,test_a2b_b2a_match_Pythons,"self.assertIsInstance(decoded, bytes)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_client.py,test_cached_result,"self.assertThat(original, Is(additional))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_client.py,test_cache_expired,"self.assertThat(additional, AfterPreprocessing(lambda node: node.get_readonly_uri(), Equals(writecap.get_readonly().to_string())))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_upload.py,test_known_result,"self.assertEqual(b'Jd2LHCRXozwrEJc=', b64encode(ciphertext))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_happiness.py,test_hypothesis_unhappy,assert set(places.keys()) == shares,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_happiness.py,test_hypothesis_unhappy,assert happiness == 4,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_happiness.py,test_more_hypothesis,assert set(places.keys()) == shares,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_happiness.py,test_more_hypothesis,assert set(places.values()).issubset(peers),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_happiness.py,test_more_hypothesis,"assert happiness == min(len(peers), len(shares))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_node.py,test_multiple_ports,"self.assertEqual(t.listening_ports, ['tcp:%d:interface=127.0.0.1' % port1, 'tcp:%d:interface=127.0.0.1' % port2])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_configutil.py,test_everything_valid,"self.assertIs(configutil.validate_config('<test_everything_valid>', cfg, configutil.ValidConfiguration.everything()), None)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_configutil.py,test_copy_config,"self.assertEqual(cfg, copied)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_configutil.py,test_copy_config,"self.assertIsNot(cfg, copied)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tahoe-lafs,tahoe-lafs,src/allmydata/test/test_dirnode.py,test_pack_unpack_unicode_hypothesis,"self.assertEqual(kids, unkids)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
tdda,tdda,tdda/rexpy/testhypo.py,test_matches,self.assertTrue(any(matches)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_fixed_key_values_nested,assert len(col) == len(added_samples_subsamples),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_fixed_key_values_nested,assert len(col[key]) == len(added_samples_subsamples[key]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_fixed_key_values_nested,assert out.dtype == val.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_fixed_key_values_nested,assert out.shape == val.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_fixed_key_values_nested,"assert np.allclose(out, val)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_variable_shape_float32_nested,assert len(col) == len(added_samples_subsamples),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_variable_shape_float32_nested,assert len(col[key]) == len(added_samples_subsamples[key]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_variable_shape_float32_nested,assert out.dtype == val.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_variable_shape_float32_nested,assert out.shape == val.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_variable_shape_float32_nested,"assert np.allclose(out, val)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_variable_shape_uint8_nested,assert len(col) == len(added_samples_subsamples),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_variable_shape_uint8_nested,assert len(col[key]) == len(added_samples_subsamples[key]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_variable_shape_uint8_nested,assert out.dtype == val.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_variable_shape_uint8_nested,assert out.shape == val.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_arrayset_variable_shape_uint8_nested,"assert np.allclose(out, val)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_str_column_variable_shape_nested,assert len(col) == len(added_samples_subsamples),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_str_column_variable_shape_nested,assert len(col[key]) == len(added_samples_subsamples[key]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_str_column_variable_shape_nested,assert out == val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_bytes_column_variable_shape_nested,assert len(col) == len(added_samples_subsamples),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_bytes_column_variable_shape_nested,assert len(col[key]) == len(added_samples_subsamples[key]),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_nested.py,test_bytes_column_variable_shape_nested,assert out == val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_fixed_key_values,assert out.dtype == val.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_fixed_key_values,assert out.shape == val.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_fixed_key_values,"assert np.allclose(out, val)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_fixed_key_values,assert len(col) == len(added_samples),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_variable_shape_float32,assert out.dtype == val.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_variable_shape_float32,assert out.shape == val.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_variable_shape_float32,"assert np.allclose(out, val)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_variable_shape_float32,assert len(col) == len(added_samples),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_variable_shape_uint8,assert out.dtype == val.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_variable_shape_uint8,assert out.shape == val.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_variable_shape_uint8,"assert np.allclose(out, val)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_arrayset_variable_shape_uint8,assert len(col) == len(added_samples),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_str_column_variable_shape,assert col.schema_type == 'variable_shape',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_str_column_variable_shape,assert col.column_type == 'str',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_str_column_variable_shape,assert col.dtype == str,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_str_column_variable_shape,assert out == val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_str_column_variable_shape,assert len(col) == len(added_samples),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_bytes_column_variable_shape,assert col.schema_type == 'variable_shape',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_bytes_column_variable_shape,assert col.column_type == 'bytes',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_bytes_column_variable_shape,assert col.dtype == bytes,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_bytes_column_variable_shape,assert out == val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tensorwerk,hangar-py,tests/property_based/test_pbt_column_flat.py,test_bytes_column_variable_shape,assert len(col) == len(added_samples),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_img_utils.py,test_pad_grayscale,"assert np.array_equal(input_array, unpadded_array)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_img_utils.py,test_pad_rgb,"assert np.array_equal(input_array, unpadded_array)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_img_utils.py,test_pad_to_size,"assert np.array_equal(image, unpadded_dict['image'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_img_utils.py,test_pad_to_size,"assert np.array_equal(bboxes, unpadded_dict['bboxes']), f'{bboxes} {unpadded_dict['bboxes']}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_img_utils.py,test_pad_to_size,"assert np.array_equal(keypoints, unpadded_dict['keypoints'])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_mask_utils.py,test_mask2one_hot,assert np.all(mask == reverse_one_hot(one_hot_mask)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_mask_utils.py,test_mask2one_hot_with_limit,assert one_hot_mask.shape[-1] == num_classes,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_mask_utils.py,test_kaggle_rle,"assert coco_rle == kaggle2coco(kaggle_rle, height, width)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_mask_utils.py,test_kaggle_rle,"assert np.all(mask == kaggle_rle_decode(kaggle_rle, height, width))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_mask_utils.py,test_kaggle_rle,"assert np.all(mask == coco_rle_decode(coco_rle, height, width))",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_mask_utils.py,test_remove_small_connected,assert filtered_mask.shape == mask.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_mask_utils.py,test_remove_small_connected,assert filtered_mask.dtype == mask.dtype,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_mask_utils.py,test_remove_small_connected,"assert set(np.unique(filtered_mask)) - {0, 1} == set()",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_mask_utils.py,test_remove_small_connected,assert (mask - filtered_mask).sum() == areas[areas < min_area].sum(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_mask_utils.py,test_remove_small_connected,"assert np.array_equal(filtered_mask, filtered_mask_2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_geometry_utils.py,test_vs_shapely_zero_angle,"assert math.isclose(rectangle_a_shapely.intersection(rectangle_b_shapely).area, intersection_rectangles(rectangle_a, rectangle_b))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_geometry_utils.py,test_vs_shapely_pi_by_two,"assert math.isclose(rectangle_a_shapely.intersection(rectangle_b_shapely).area, intersection_rectangles(rectangle_a, rectangle_b))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_geometry_utils.py,test_vs_shapely_pi_by_4,"assert math.isclose(rectangle_a_shapely.intersection(rectangle_b_shapely).area, intersection_rectangles(rectangle_a, rectangle_b))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_geometry_utils.py,test_vs_shapely_pi_by_4,"assert math.isclose(rectangle_a_shapely.intersection(rectangle_b_shapely).area, intersection_rectangles(rectangle_a, rectangle_b))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_geometry_utils.py,test_vs_shapely_pi_by_6,"assert math.isclose(rectangle_a_shapely.intersection(rectangle_b_shapely).area, intersection_rectangles(rectangle_a, rectangle_b))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_geometry_utils.py,test_vs_shapely_angle,"assert math.isclose(rectangle_a_shapely.intersection(rectangle_b_shapely).area, intersection_rectangles(rectangle_a, rectangle_b), abs_tol=0.0001)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_cyclic_day_hours,"assert transformed.shape == (len(x), 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_cyclic_day_hours,"assert transformed.shape == (len(x), 2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_cyclic_day_hours,"assert np.array_equal(transformed, transformed2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_cyclic_day_hours,assert x.shape == reverse_transformed.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_cyclic_day_hours,"assert np.allclose(x, reverse_transformed)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_min_max_scaler,assert transformed.shape == x.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_min_max_scaler,assert transformed2.shape == x.T.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_min_max_scaler,"assert np.array_equal(transformed, transformed2.T)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_min_max_scaler,assert x.shape == reverse_transformed.shape,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_min_max_scaler,"assert np.allclose(x, reverse_transformed)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_label_encoder_unseen,"assert np.all(transformed == transformed_1), f'{transformed} {transformed_1}'",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_label_encoder_unseen,assert np.all(x == e.inverse_transform(transformed)),True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_label_encoder_unseen,assert np.all(transformed_2 == list(transformed) + list(e.transform([np.nan]))),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_numerical,assert set(transformed.keys()) == {category_type},False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_numerical,assert set(columns_map.keys()) == set(transformed.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_numerical,assert list(df.columns) == list(inverse_transform.columns),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_numerical,assert encoder.encoders[column_name + '1'] == encoder.encoders[column_name],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_numerical,assert encoder.encoders[column_name + '2'] == encoder.encoders[column_name],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_numerical,"assert np.allclose(df[column_name].values, inverse_transform[column_name].values)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_numerical,"assert np.allclose(df.values, inverse_transform.values), f'{df.values - inverse_transform.values}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_cyclical,assert set(transformed.keys()) == {category_type},False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_cyclical,assert set(columns_map.keys()) == set(transformed.keys()),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_cyclical,assert inverse_transform.shape == df.shape,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_cyclical,assert np.all(inverse_transform.columns == df.columns),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_cyclical,assert np.all(df.dtypes == inverse_transform.dtypes),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_cyclical,"assert np.allclose(df.values, inverse_transform.values)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_categorical,assert df[column].nunique() + 1 == len(encoder.encoders[column].set_classes),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_categorical,"assert len(set(column)) <= max(column) + 1, f'{len(set(column))} {max(column)}'",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_categorical,assert set(transformed.keys()) == {category_type},False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_categorical,assert set(transformed.keys()).intersection(columns_map.keys()) == set(transformed.keys()),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_categorical,assert df.equals(inverse_transform),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder,assert df[column].nunique() + 1 == len(encoder.encoders[column].set_classes),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder,"assert (df.shape[0], 2) == encoded.shape, f'{category_type} {encoded.shape}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder,"assert (df.shape[0],) == encoded.shape, f'{category_type} {encoded.shape} {df.values.shape}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder,"assert set(columns_map.keys()) == set(transformed.keys()), f'{transformed.keys()} {columns_map.keys()}'",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder,assert inverse_transform.shape == df.shape,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder,assert np.all(inverse_transform.columns == df.columns),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder,assert np.all(df.dtypes == inverse_transform.dtypes),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_on_nonfull,assert df[column].nunique() + 1 == len(encoder.encoders[column].set_classes),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_on_nonfull,"assert (df.shape[0], 2) == encoded.shape, f'{category_type} {encoded.shape}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_on_nonfull,"assert (df.shape[0],) == encoded.shape, f'{category_type} {encoded.shape} {df.values.shape}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_on_nonfull,"assert set(columns_map.keys()) == set(transformed.keys()), f'{transformed.keys()} {columns_map.keys()}'",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
ternaus,iglovikov_helper_functions,tests/test_tabular_utils.py,test_encoder_on_nonfull,assert len(df.columns) == len(inverse_transform.columns) + len(columns_map),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
thejohnfreeman,python-typeclasses,tests/test_hash.py,test_reflexive,assert fhash(value).hexdigest() == fhash(value).hexdigest(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
thejohnfreeman,python-typeclasses,tests/test_hash.py,test_injective,assert fhash(a).hexdigest() != fhash(b).hexdigest(),False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_gcd_with_com_factor,assert 1 in numbers or n != 1,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_gcd_with_com_factor,assert i % n == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_gcd_with_uncom_factor,assert n == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_gcd_with_random_numbers,assert i % n == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_lcm_with_random_numbers,assert n % i == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_square_root_mod_prime,assert calc * calc % prime == square,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_factorization,assert mult == num,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_jacobi,"assert jacobi(root * root, mod) == 1",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_jacobi,"assert jacobi(i, mod) == -1",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_jacobi,"assert c == jacobi(a, mod)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_inverse_mod,assert 0 < inv < mod,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_numbertheory.py,test_inverse_mod,assert num * inv % mod == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_constanttime.py,test_ct_lt_u32,"self.assertEqual(i < j, ct_lt_u32(i, j) == 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_constanttime.py,test_ct_gt_u32,"self.assertEqual(i > j, ct_gt_u32(i, j) == 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_constanttime.py,test_ct_le_u32,"self.assertEqual(i <= j, ct_le_u32(i, j) == 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_constanttime.py,test_ct_neq_u32,"self.assertEqual(i != j, ct_neq_u32(i, j) == 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_constanttime.py,test_ct_eq_u32,"self.assertEqual(i == j, ct_eq_u32(i, j) == 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_constanttime.py,test_ct_lsb_prop_u8,"self.assertEqual(i & 1 == 1, ct_lsb_prop_u8(i) == 255)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_constanttime.py,test_ct_lsb_prop_u8,"self.assertEqual(i & 1 == 0, ct_lsb_prop_u8(i) == 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_constanttime.py,test_ct_lsb_prop_u16,"self.assertEqual(i & 1 == 1, ct_lsb_prop_u16(i) == 65535)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_constanttime.py,test_ct_lsb_prop_u16,"self.assertEqual(i & 1 == 0, ct_lsb_prop_u16(i) == 0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_constanttime.py,test_ct_isnonzero_u32,"self.assertEqual(i != 0, ct_isnonzero_u32(i) == 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_jacobi.py,test_multiplications,"self.assertEqual((pj.x(), pj.y()), (pw.x(), pw.y()))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_jacobi.py,test_multiplications,"self.assertEqual(pj, pw)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_jacobi.py,test_precompute,"self.assertEqual(a, b)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_jacobi.py,test_add_scaled_points,"self.assertEqual(c, j_g * (a_mul + b_mul))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_jacobi.py,test_add_one_scaled_point,"self.assertEqual(c, j_g * (a_mul + b_mul))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_jacobi.py,test_add_same_scale_points,"self.assertEqual(c, j_g * (a_mul + b_mul))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_jacobi.py,test_add_different_scale_points,"self.assertEqual(c, j_g * (a_mul + b_mul))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_jacobi.py,test_mul_add_random,"self.assertEqual(res, p_a * mul1 + p_b * mul3)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_der.py,test_oids,assert rest == b'',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_der.py,test_oids,assert decoded_oid == ids,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_ellipticcurve.py,test_p192_mult_tests,assert p1 * inv_m == p192,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_cryptomath.py,test_small_number,"self.assertEqual(numberToByteArray(number, 1), bytearray(struct.pack('>B', number)))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_cryptomath.py,test_big_number,"self.assertEqual(numberToByteArray(number, 4), bytearray(struct.pack('>L', number)))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_cryptomath.py,test_small_number_little_endian,"self.assertEqual(numberToByteArray(number, 1, endian='little'), bytearray(struct.pack('<B', number)))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_cryptomath.py,test_numBits,"self.assertEqual(numBits(number), self.num_bits(number))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_cryptomath.py,test_numBytes,"self.assertEqual(numBytes(number), self.num_bytes(number))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_cryptomath.py,test_small_numbers,"self.assertEqual(bytesToNumber(bytearray(struct.pack('>B', number))), number)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_cryptomath.py,test_multi_byte_numbers,"self.assertEqual(bytesToNumber(bytearray(struct.pack('>I', number))), number)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_cryptomath.py,test_small_numbers_little_endian,"self.assertEqual(bytesToNumber(bytearray(struct.pack('<B', number)), 'little'), number)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,tlslite-ng,unit_tests/test_tlslite_utils_cryptomath.py,test_multi_byte_numbers_little_endian,"self.assertEqual(bytesToNumber(bytearray(struct.pack('<I', number)), 'little'), number)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_ecdsa.py,test_sig_verify,"assert pubkey.verifies(msg, signature)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_ecdsa.py,test_sig_verify,"assert not pubkey.verifies(msg - 1, signature)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tlsfuzzer,python-ecdsa,src/ecdsa/test_pyecdsa.py,test_randrange,"self.assertTrue(1 <= n < order, (1, n, order))",False,False,False,False,False,False,False,False,False,True,True,False,False,False,False
tommikaikkonen,prettyprinter,tests/test_prettyprinter.py,test_bytes_pprint_equals_repr,assert pformat(bytestr) == repr(bytestr),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
tommikaikkonen,prettyprinter,tests/test_prettyprinter.py,test_readable,assert evald == value,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
tommikaikkonen,prettyprinter,tests/test_prettyprinter.py,test_str_to_lines,assert line,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
tommikaikkonen,prettyprinter,tests/test_prettyprinter.py,test_str_to_lines,assert len(line) <= max_len * len('\\Uxxxxxxxx'),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
tommikaikkonen,prettyprinter,tests/test_prettyprinter.py,test_str_to_lines,assert ''.join(lines) == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_normalize_video.py,test_distribution_is_normal_after_transform,"assert samples_from_standard_normal(normalized, significance)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_normalize_video.py,test_preserves_channel_count,assert input_channel_count == output_channel_count,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_pil_video_to_tensor.py,test_transform,assert tensor.size(0) == n_channels,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_pil_video_to_tensor.py,test_transform,assert tensor.size(1) == len(video),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_pil_video_to_tensor.py,test_transform,assert tensor.size(2) == height,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_pil_video_to_tensor.py,test_transform,assert tensor.size(3) == width,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/samplers/test_full_video_sampler.py,test_full_video_sampler,assert idx_slice.stop == length,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/samplers/test_full_video_sampler.py,test_full_video_sampler,assert idx_slice.start == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/samplers/test_full_video_sampler.py,test_full_video_sampler,assert idx_slice.step == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_horizontal_flip_video.py,test_always_flip,assert len(transformed_video) == len(video),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_horizontal_flip_video.py,test_always_flip,assert frame.size == transformed_frame.size,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_horizontal_flip_video.py,test_always_flip,assert frame.mode == transformed_frame.mode,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_horizontal_flip_video.py,test_always_flip,assert np.all(np.array(frame) == np.array(transformed_frame)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_horizontal_flip_video.py,test_never_flip,assert len(transformed_video) == len(video),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_horizontal_flip_video.py,test_never_flip,assert frame.size == transformed_frame.size,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_horizontal_flip_video.py,test_never_flip,assert frame.mode == transformed_frame.mode,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_horizontal_flip_video.py,test_never_flip,assert np.all(np.array(frame) == np.array(transformed_frame)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_time_to_channel.py,test_element_count_is_preserved,assert prod(transformed_frames_size) == prod(frames_size),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_time_to_channel.py,test_first_dim_is_always_larger,assert frames.size(0) <= transformed_frames_size.size(0),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_resize_video.py,test_resizes_to_given_size,assert len(transformed_video) == len(video),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_resize_video.py,test_resizes_to_given_size,"assert (expected_width, expected_height) == frame.size",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_collect_frames.py,test_collect_frames_make_list_from_iterator,assert transform(iter(video)) == video,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_ndarray_to_pil_video.py,test_converts_thwc_to_PIL_video,assert len(pil_video) == t,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_ndarray_to_pil_video.py,test_converts_thwc_to_PIL_video,assert pil_video[0].size[0] == w,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_ndarray_to_pil_video.py,test_converts_thwc_to_PIL_video,assert pil_video[0].size[1] == h,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_ndarray_to_pil_video.py,test_converts_thwc_to_PIL_video,assert all([f.mode == 'RGB' for f in pil_video]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_ndarray_to_pil_video.py,test_converts_cthw_to_PIL_video,assert len(pil_video) == t,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_ndarray_to_pil_video.py,test_converts_cthw_to_PIL_video,assert pil_video[0].size[0] == w,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_ndarray_to_pil_video.py,test_converts_cthw_to_PIL_video,assert pil_video[0].size[1] == h,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_ndarray_to_pil_video.py,test_converts_cthw_to_PIL_video,assert all([f.mode == 'RGB' for f in pil_video]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/label_sets/test_dummy_label_set.py,test_return_label_for_any_video_name,assert label_set[video_name] == label,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/tset_random_resized_crop_video.py,test_resulting_video_are_specified_size,assert len(transformed_video) == len(video),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/tset_random_resized_crop_video.py,test_resulting_video_are_specified_size,"assert (expected_width, expected_height) == frame.size",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_multiscale_crop_video.py,test_transform_always_yields_crops_of_the_correct_size,assert len(transformed_video) == duration,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_multiscale_crop_video.py,test_transform_always_yields_crops_of_the_correct_size,"np.testing.assert_allclose(np.array(frame), np.ones_like(frame))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_multiscale_crop_video.py,test_transform_always_yields_crops_of_the_correct_size,assert frame.height == crop_height,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_multiscale_crop_video.py,test_transform_always_yields_crops_of_the_correct_size,assert frame.width == crop_width,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_time_apply.py,test_applies_given_transform_for_each_frame,assert len(transformed_frames) == len(frames),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_time_apply.py,test_applies_given_transform_for_each_frame,assert transformed_frames == frames,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_time_apply.py,test_applies_given_transform_for_each_frame,assert mock_transform.mock_calls == expected_calls,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_center_crop_video.py,test_crop,"assert (frame.size[1], frame.size[0]) == crop_size",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/samplers/test_clip_sampler.py,test_clip_is_subsampled_from_video_when_video_is_longer_than_clip,assert frame_idx.step == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/samplers/test_clip_sampler.py,test_clip_is_subsampled_from_video_when_video_is_longer_than_clip,assert frame_idx.stop - frame_idx.start == clip_length,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/samplers/test_clip_sampler.py,test_clip_sampler_is_deterministic_in_test_mode,assert frame_idx[i - 1] == frame_idx[i],False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_crop_video.py,test_crop_yields_image_of_specified_size,"assert (frame.size[1], frame.size[0]) == crop_size",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_crop_video.py,test_crop_with_user_provided_padding,"assert (frame.size[1], frame.size[0]) == crop_size",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
torchvideo,torchvideo,tests/unit/transforms/test_random_crop_video.py,test_crop_with_different_padding_modes,"assert (frame.size[1], frame.size[0]) == crop_size",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trailofbits,PrivacyRaven,tests/test_utils_query.py,test_fuzz_establish_query,assert callable(x) is True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trailofbits,PrivacyRaven,tests/test_utils_query.py,test_fuzz_get_target,assert torch.argmax(target) >= 0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
trailofbits,PrivacyRaven,tests/test_utils_query.py,test_fuzz_get_target,assert torch.argmax(target) < 10,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
trailofbits,PrivacyRaven,tests/test_extraction_synthesis.py,test_copycat_preserves_shapes,"assert x_1 == torch.Size([10, 1, 28, 28])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trailofbits,PrivacyRaven,tests/test_extraction_synthesis.py,test_copycat_preserves_shapes,assert y_1 == torch.Size([10]),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trailofbits,PrivacyRaven,tests/test_extraction_synthesis.py,process_data_preserves_shape_and_type,"assert x.size() == torch.Size([10, 28, 28, 1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trailofbits,PrivacyRaven,tests/test_extraction_synthesis.py,process_data_preserves_shape_and_type,assert x.type() == torch.FloatTensor,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
trailofbits,PrivacyRaven,tests/test_utils_data.py,get_emnist_data_returns_data,"assert x.size() == torch.Size([240000, 28, 28])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trailofbits,PrivacyRaven,tests/test_extraction_metrics.py,label_agreement_returns_agreed,assert x > 8,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_check_input_turns_int_into_array,assert len(_check_input(i)) == i,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_2D_seismic_dataset_with_integers,assert len(dataset.sizes) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_2D_seismic_dataset_with_integers,assert dataset.sizes['twt'] == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_2D_seismic_dataset_with_offsets,assert len(dataset.sizes) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_3D_seismic_dataset_with_integers,assert len(dataset.sizes) == 3,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_3D_seismic_dataset_with_integers,assert dataset.sizes['depth'] == s,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_2D_seismic_dataset_with_arrays,assert len(dataset.sizes) == 2,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_2D_seismic_dataset_with_arrays,assert dataset.sizes['twt'] == len(a),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_2D_seismic_dataset_with_multiple_dimensions,assert len(dataset.sizes) == d + 2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_2D_dataset_custom_sampling,assert dataset.twt.data.max() == f + s * r - r,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_2D_dataset_custom_cdp,assert dataset.cdp.data.max() == f + s * t - s,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_2D_dataset_wfirstoffset,assert dataset.offset.data.max() == 4 * 10 + o,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_full_stack_dataset,assert dataset.d3_domain == 'TWT',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_full_stack_dataset,assert dataset.measurement_system == u,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_angle_stack_dataset,assert dataset.d3_domain == d.upper(),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_dataset.py,test_create_angle_stack_dataset,assert len(dataset.sizes) == 4,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_seismic_segy.py,test_segyiotests_writer_from_ds,"assert isinstance(ds, xr.Dataset)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
trhallam,segysak,tests/test_tools.py,test_halfsample,"assert np.allclose(tools.halfsample(test_array), truth_array)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
trhallam,segysak,tests/test_accessor.py,test_full_stack_dataset_xysel,"assert isinstance(res, xr.Dataset)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
trhallam,segysak,tests/test_accessor.py,test_full_stack_dataset_xysel,"assert isinstance(res, xr.Dataset)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
trhallam,segysak,tests/test_accessor.py,test_angle_stack_dataset_xysel,"assert isinstance(res, xr.Dataset)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
trhallam,segysak,tests/test_accessor.py,test_angle_stack_dataset_xysel,"assert isinstance(res, xr.Dataset)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
trhallam,segysak,tests/test_accessor.py,test_full_stack_dataset_xysel,"assert isinstance(res, xr.Dataset)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
trhallam,segysak,tests/test_accessor.py,test_full_stack_dataset_xysel,"assert isinstance(res, xr.Dataset)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
trhallam,segysak,tests/test_accessor.py,test_angle_stack_dataset_xysel,"assert isinstance(res, xr.Dataset)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
trhallam,segysak,tests/test_accessor.py,test_angle_stack_dataset_xysel,"assert isinstance(res, xr.Dataset)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
tryexceptpass,sofi,test/abbreviation_test.py,test_text_and_title,"assert str(Abbreviation(title, text)) == '<abbr title=""' + title + '"">' + text + '</abbr>'",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twisted,pydoctor,pydoctor/test/test_sphinx.py,test_prepareCache,assert not cacheDirectory.exists(),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,assert np.all(x_vec == x_vec_),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,assert shapes is shapes_,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,"assert isinstance(x_dict_, OrderedDict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,assert list(x_dict_.keys()) == list(x_dict.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,assert type(x_dict[kk]) == type(x_dict_[kk]),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,assert str(x_dict[kk].dtype) == str(x_dict_[kk].dtype),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,assert x_dict[kk].dtype == x_dict_[kk].dtype,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,assert x_dict[kk].shape == x_dict_[kk].shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,"assert np.allclose(to_np(x_dict[kk]), to_np(x_dict_[kk]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,"assert np.allclose(x_vec, x_vec_)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_pack_unpack,assert shapes is shapes_,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_get_dtype,assert dtype == dtype2,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_get_dtype,assert str(dtype) == str(dtype2),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_from_np,"assert isinstance(x_np2, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_from_np,"assert np.allclose(x_np, x_np2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_from_np,assert x_np2.dtype == SCIPY_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_torch_api.py,test_from_np,"assert np.allclose(x_np, x_np2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,assert np.all(x_vec == x_vec_),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,assert shapes is shapes_,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,"assert isinstance(x_dict_, OrderedDict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,assert list(x_dict_.keys()) == list(x_dict.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,assert type(x_dict[kk]) == type(x_dict_[kk]),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,assert str(x_dict[kk].dtype) == str(x_dict_[kk].dtype),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,assert x_dict[kk].dtype == x_dict_[kk].dtype,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,assert x_dict[kk].shape == x_dict_[kk].shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,"assert np.allclose(to_np(x_dict[kk]), to_np(x_dict_[kk]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,"assert np.allclose(x_vec, x_vec_)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_pack_unpack,assert shapes is shapes_,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_get_dtype,assert dtype == dtype2,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_get_dtype,assert str(dtype) == str(dtype2),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_from_np,"assert isinstance(x_np2, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_from_np,"assert np.allclose(x_np, x_np2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_from_np,assert x_np2.dtype == SCIPY_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_tensorflow_api.py,test_from_np,"assert np.allclose(x_np, x_np2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,assert np.all(x_vec == x_vec_),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,assert shapes is shapes_,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,"assert isinstance(x_dict_, OrderedDict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,assert list(x_dict_.keys()) == list(x_dict.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,assert type(x_dict[kk]) == type(x_dict_[kk]),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,assert str(x_dict[kk].dtype) == str(x_dict_[kk].dtype),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,assert x_dict[kk].dtype == x_dict_[kk].dtype,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,assert x_dict[kk].shape == x_dict_[kk].shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,"assert np.allclose(x_dict[kk], x_dict_[kk])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,"assert np.allclose(x_vec, x_vec_)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_pack_unpack,assert shapes is shapes_,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_get_dtype,assert dtype == dtype2,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_get_dtype,assert str(dtype) == str(dtype2),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_from_np,"assert isinstance(x_np2, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_from_np,"assert np.allclose(x_np, x_np2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_from_np,assert x_np2.dtype == SCIPY_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_numpy_api.py,test_from_np,"assert np.allclose(x_np, x_np2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,assert np.all(x_vec == x_vec_),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,assert shapes is shapes_,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,"assert isinstance(x_dict_, OrderedDict)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,assert list(x_dict_.keys()) == list(x_dict.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,assert type(x_dict[kk]) == type(x_dict_[kk]),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,assert str(x_dict[kk].dtype) == str(x_dict_[kk].dtype),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,assert x_dict[kk].dtype == x_dict_[kk].dtype,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,assert x_dict[kk].shape == x_dict_[kk].shape,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,"assert np.allclose(to_np(x_dict[kk]), to_np(x_dict_[kk]))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,"assert np.allclose(x_vec, x_vec_)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_pack_unpack,assert shapes is shapes_,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_get_dtype,assert dtype == dtype2,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_get_dtype,assert str(np.dtype(dtype)) == str(dtype2),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_from_np,"assert isinstance(x_np2, np.ndarray)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_from_np,"assert np.allclose(x_np, x_np2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_from_np,assert x_np2.dtype == SCIPY_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
twitter,dict_minimize,tests/test_jax_api.py,test_from_np,"assert np.allclose(x_np, x_np2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose_lte_pass,"assert np_util.isclose_lte(x, y)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose_lte_fail,"assert not np_util.isclose_lte(x, y)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_clip_chk_pass,"assert np.all(x_clip == np.clip(x_clip, lb, ub))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_clip_chk_pass_nan,"assert np.all(np.isnan(x) & np.isnan(x_clip) | (x_clip == np.clip(x_clip, lb, ub)))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_snap_to_pass,assert np.all(x_snap == val),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_linear_rescale_bounds,"assert close_enough(lb1, lb1_)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_linear_rescale_bounds,"assert close_enough(ub1, ub1_)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_linear_rescale_inner,assert np.all(X <= ub1),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_linear_rescale_inner,assert np.all(lb1 <= X),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_linear_rescale_inverse,"assert close_enough(X_, X)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_linear_rescale_bound_modes,"assert close_enough(Y1, Y2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert type(z) == np.bool_,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert z == np.squeeze(z),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert np.isscalar(z),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert np.shape(z) == (),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert type(z) == np.bool_,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert z == np.squeeze(z),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert np.isscalar(z),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert np.shape(z) == (),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert type(z) == np.bool_,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert z == np.squeeze(z),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert np.isscalar(z),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert np.shape(z) == (),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert type(z) == np.bool_,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert z == np.squeeze(z),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert np.isscalar(z),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_isclose,assert np.shape(z) == (),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_argmin_2d_no_nan,"assert X[idx0, idx1] <= np.min(X)",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_argmin_2d_nan,"assert np.isnan(X[idx0, idx1]) == np.any(np.isnan(X))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_cummin,"assert c_min.shape == (n, m)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_cummin,"assert x_key[last_min, jj] <= np.min(x_key[:ii + 1, jj])",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_cummin,"assert c_min[ii, jj] == x_val[last_min, jj]",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_cummin_nan,"assert c_min.shape == (n, m)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_cummin_nan,"assert x_key[last_min, jj] <= np.min(x_key[:ii + 1, jj])",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_cummin_nan,"assert np.isnan(x_val[last_min, jj])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/np_util_test.py,test_cummin_nan,"assert c_min[ii, jj] == x_val[last_min, jj]",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,tchannel-python,tests/test_rw.py,test_number_roundtrip,"assert roundtrip(num, rw.number(width)) == num",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,tchannel-python,tests/test_rw.py,test_len_prefixed_string_roundtrip,"assert roundtrip(s, rw.len_prefixed_string(rw.number(len_width))) == s",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,tchannel-python,tests/test_rw.py,test_len_prefixed_string_binary_roundtrip,"assert roundtrip(s, rw.len_prefixed_string(rw.number(len_width), is_binary=True)) == s",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,tchannel-python,tests/test_rw.py,test_none_r,assert rw.none().read(stream) is None,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/sklearn_funcs_test.py,test_sklearn_model,"assert isinstance(loss, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/sklearn_funcs_test.py,test_sklearn_model,"assert all((isinstance(xx, float) for xx in loss))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/sklearn_funcs_test.py,test_sklearn_model,assert np.shape(loss) == np.shape(test_prob.objective_names),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/sklearn_funcs_test.py,test_inverse_test_case_str,"assert R == (model, dataset, scorer)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/sklearn_funcs_test.py,test_sklearn_model_surr,"assert isinstance(path, bytes)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/sklearn_funcs_test.py,test_sklearn_model_surr,"assert isinstance(loss, tuple)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/sklearn_funcs_test.py,test_sklearn_model_surr,"assert all((isinstance(xx, float) for xx in loss))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/sklearn_funcs_test.py,test_sklearn_model_surr,assert np.shape(loss) == np.shape(test_prob.objective_names),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/sklearn_funcs_test.py,test_sklearn_model_surr,"assert np.allclose(loss0[0], np.array(loss))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/experiment_aggregate_test.py,test_summarize_time,assert time_summary is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
uber,bayesmark,test/experiment_test.py,test_run_study_callback,assert iters_list == list(range(n_calls + 1)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/experiment_test.py,test_run_study_callback,"assert function_evals_cmin[jj, ii] == function_evals[idx0, idx1, ii]",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/experiment_test.py,test_build_suggest_ds,assert suggest_ds.equals(suggest_ds_2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_get_perf_array,"assert perf_array.shape == (n_iter, n_trials)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_get_perf_array,"assert perf_array[ii, jj] == evals[idx0, idx1, jj]",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_compute_aggregates,"assert isinstance(split, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_compute_aggregates,assert perf_da1.sizes[TRIAL] >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_compute_aggregates,assert perf_da2.sizes[TRIAL] >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_compute_aggregates_with_aux,"assert isinstance(split, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_compute_aggregates_with_aux,assert perf_da1.sizes[TRIAL] >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_compute_aggregates_with_aux,assert perf_da2.sizes[TRIAL] >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_compute_aggregates_with_aux,"assert isinstance(split, int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_compute_aggregates_with_aux,assert perf_da1.sizes[TRIAL] >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/experiment_analysis_test.py,test_compute_aggregates_with_aux,assert perf_da2.sizes[TRIAL] >= 1,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_encode_decode,assert np.asarray(labels[idx]) == X,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_encode_decode,assert Y.dtype == dtype,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_encode_decode,"assert close_enough(X, X2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_encoder_to_sklearn,"assert close_enough(Y, Y2.astype(dtype))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_decode_encode,assert Y.ndim >= 1 and Y.shape[-1] == len(labels),False,False,False,True,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_decode_encode,assert np.all(Y.argmax(axis=1) == Y2.argmax(axis=1)),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_decode_encode,"assert np.all(np.sum(Y2 != 0, axis=1) == 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_decode_encode,"assert np.all(np.sum(Y2 == 1, axis=1) == 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_decode_to_sklearn,assert Y.ndim >= 1 and Y.shape[-1] == len(labels),False,False,False,True,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_decode_to_sklearn,assert X.dtype.kind == CAT_KIND,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_decode_to_sklearn,"assert close_enough(X, X2.astype(X.dtype))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bilog_props,"assert close_enough(y, -sp.bilog(-x), equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bilog_props,assert np.isfinite(y) == np.isfinite(x),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bilog_monotonic,assert sp.bilog(x1) < sp.bilog((1 + 1e-06) * x2 + 1e-06),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_bilog_biexp,"assert close_enough(sp.biexp(sp.bilog(x)), x, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_values_warp_unwarp,assert x.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_values_warp_unwarp,"assert y.shape == x.shape + (1,)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_values_warp_unwarp,assert y.dtype == sp.WARPED_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_values_warp_unwarp,assert np.all(lower <= y),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_values_warp_unwarp,assert np.all(y <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_values_warp_unwarp,"assert close_enough(y, y2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_values_warp_unwarp,assert x2.shape == x.shape,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_values_warp_unwarp,"assert close_enough(x2, x3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_values_warp_unwarp,"assert close_enough(x, x2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_warp_unwarp,"assert y.shape == x.shape + (1,)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_warp_unwarp,assert y.dtype == sp.WARPED_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_warp_unwarp,assert np.all(lower <= y),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_warp_unwarp,assert np.all(y <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_warp_unwarp,"assert close_enough(y, y2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_warp_unwarp,assert x2.shape == x.shape,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_warp_unwarp,"assert close_enough(x2, x3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_warp_unwarp,"assert close_enough(x, x2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_unwarp_warp,"assert x_w.shape == x.shape + (1,)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_unwarp_warp,assert x.dtype == range_.dtype,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_unwarp_warp,assert x.dtype == S.dtype,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_unwarp_warp,"assert close_enough(x, x2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_unwarp_warp,assert x_w2.shape == x_w.shape,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_unwarp_warp,"assert close_enough(x_w2, x_w3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_real_range_unwarp_warp,"assert close_enough(x_w, x_w2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_values_warp_unwarp,assert len(v) >= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_values_warp_unwarp,assert x.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_values_warp_unwarp,"assert y.shape == x.shape + (1,)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_values_warp_unwarp,assert y.dtype == sp.WARPED_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_values_warp_unwarp,assert np.all(lower <= y),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_values_warp_unwarp,assert np.all(y <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_values_warp_unwarp,"assert close_enough(y, y2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_values_warp_unwarp,assert x2.shape == x.shape,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_values_warp_unwarp,"assert close_enough(x2, x3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_values_warp_unwarp,"assert close_enough(x, x2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_log_int_values_warp_unwarp,assert len(v) >= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_log_int_values_warp_unwarp,assert x.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_log_int_values_warp_unwarp,"assert y.shape == x.shape + (1,)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_log_int_values_warp_unwarp,assert y.dtype == sp.WARPED_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_log_int_values_warp_unwarp,assert np.all(lower <= y),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_log_int_values_warp_unwarp,assert np.all(y <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_log_int_values_warp_unwarp,"assert close_enough(y, y2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_log_int_values_warp_unwarp,assert x2.shape == x.shape,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_log_int_values_warp_unwarp,"assert close_enough(x2, x3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_log_int_values_warp_unwarp,"assert close_enough(x, x2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_range_warp_unwarp,"assert y.shape == x.shape + (1,)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_range_warp_unwarp,assert y.dtype == sp.WARPED_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_range_warp_unwarp,assert np.all(lower <= y),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_range_warp_unwarp,assert np.all(y <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_range_warp_unwarp,"assert close_enough(y, y2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_range_warp_unwarp,assert x2.shape == x.shape,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_range_warp_unwarp,"assert close_enough(x2, x3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_range_warp_unwarp,assert x.dtype == x2.dtype,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_int_range_warp_unwarp,"assert close_enough(x.astype('f'), x2.astype('f'))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bool_warp_unwarp,"assert y.shape == x.shape + (1,)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bool_warp_unwarp,assert y.dtype == sp.WARPED_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bool_warp_unwarp,assert np.all(lower <= y),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bool_warp_unwarp,assert np.all(y <= upper),False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bool_warp_unwarp,"assert close_enough(y, y2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bool_warp_unwarp,assert x2.shape == x.shape,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bool_warp_unwarp,"assert close_enough(x2, x3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_bool_warp_unwarp,"assert close_enough(x, x2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_cat_warp_unwarp,assert len(set(values)) >= 2,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_cat_warp_unwarp,assert x.ndim == 1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_cat_warp_unwarp,"assert y.shape == x.shape + (len(values),)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_cat_warp_unwarp,assert y.dtype == sp.WARPED_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_cat_warp_unwarp,assert np.all(lower <= y),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_cat_warp_unwarp,assert np.all(y <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_cat_warp_unwarp,"assert close_enough(y, y2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_cat_warp_unwarp,assert x2.shape == x.shape,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_cat_warp_unwarp,"assert close_enough(x2, x3)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_cat_warp_unwarp,"assert close_enough(x, x2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_unwarp_warp,assert X_w2.dtype == sp.WARPED_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_unwarp_warp,assert np.all(lower <= X_w2),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_unwarp_warp,assert np.all(X_w2 <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_unwarp_warp,"assert all((all((close_enough(X[ii][vv], X2[ii][vv]) for vv in X[ii])) for ii in range(len(X))))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_warp_missing,assert X_w.dtype == sp.WARPED_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_warp_missing,assert np.all((lower <= X_w) | np.isnan(X_w)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_warp_missing,assert np.all((X_w <= upper) | np.isnan(X_w)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_warp_missing,"assert close_enough(x_orig, fixed_vars[param])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_warp_missing,"assert close_enough(xx, x_w2)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_warp_missing,assert np.all(np.isnan(xx)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_warp_fixed_vars,assert X_w.dtype == sp.WARPED_DTYPE,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_warp_fixed_vars,assert np.all(lower <= X_w),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_warp_fixed_vars,assert np.all(X_w <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_space_warp_fixed_vars,assert xx[param] == fixed_vars[param],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,assert sorted(G.keys()) == sorted(meta.keys()),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,assert grid == grid2,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,assert grid == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,assert max_interp == 0 if curr_space.values is None else len(curr_space.values) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,assert all((type(xx) in type_whitelist for xx in grid)),False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,assert all((type(xx) == tt for xx in grid)),False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,assert np.all(np.array(grid) == np.unique(grid)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,"assert curr_space.lower is None or close_enough(curr_space.lower, grid[0])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,"assert curr_space.upper is None or close_enough(curr_space.upper, grid[-1])",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,assert np.all(curr_space.values == grid),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/space_test.py,test_joint_grid,assert len(grid) <= max_interp,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/space_test.py,test_unravel_index_empty_2,assert sp.unravel_index(dims) == (),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/stats_test.py,test_robust_standardize_to_sklearn,"assert close_enough(q1 - q0, q_level)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/stats_test.py,test_robust_standardize_to_sklearn,"assert close_enough(X_bo, X_skl, equal_nan=True)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/stats_test.py,test_t_EB_zero_var,assert EB == np.inf,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/stats_test.py,test_t_EB_zero_var,"assert np.allclose(EB, 0.0)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/stats_test.py,test_t_EB_inf,assert EB == np.inf,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/stats_test.py,test_t_EB_inf,assert np.isnan(EB),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/stats_test.py,test_t_EB_coverage,assert np.isfinite(LB) and np.isfinite(UB),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/stats_test.py,test_t_EB_coverage,assert pval >= 0.05 / 100,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,bayesmark,test/stats_test.py,test_t_test_to_EB,"assert np.allclose(np.abs(np.mean(x)), EB)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,tchannel-python,tests/container/test_heap.py,test_smallest_random,"assert heap.smallest(int_heap, lambda x: x == target) in valid",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
uber,bayesmark,test/data_test.py,test_get_problem_type,assert problem_type is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
uber,bayesmark,test/experiment_baseline_test.py,test_compute_baseline,assert baseline_ds is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
uber,bayesmark,test/util_test.py,test_in_or_none,"assert isinstance(val, bool)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/util_test.py,test_in_or_none,assert val == (x in L),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/util_test.py,test_in_or_none,assert val == (x in set(L)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/util_test.py,test_in_or_none_on_none,"assert isinstance(val, bool)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/util_test.py,test_in_or_none_on_none,assert val,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/util_test.py,test_in_or_none_self,"assert isinstance(val, bool)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/util_test.py,test_in_or_none_self,assert val,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/util_test.py,test_shell_join,assert shlex.split(cmd) == list(argv),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/serialize_test.py,test_uuid_to_fname,assert uu == uu_,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/serialize_test.py,test_uuid_to_fname,assert ff == ff_,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/serialize_test.py,test_key_to_fname,assert key == kk,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_get_all_dims,assert all_dims == sorted(set(all_dims)),False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_get_all_dims,assert all_dims == sorted(set(all_dims2)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_subset_lists,assert n >= min_size,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_subset_lists,assert max_size is None or n <= max_size,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_subset_lists,assert set(L2).issubset(set(L)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_subset_lists_empty,assert len(L2) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_subset_lists_empty,assert L2 == [],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_dim_lists,assert n >= min_dims,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_dim_lists,assert max_dims is None or n <= max_dims,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_dim_lists,"assert all((isinstance(ss, str) for ss in L))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_dim_lists,assert da.dims == tuple(L),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_var_lists,assert n >= min_vars,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_var_lists,assert max_vars is None or n <= max_vars,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_var_lists,"assert all((isinstance(hash(ss), int) for ss in L))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_var_lists,assert set(ds) == set(L),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_vars_to_dims_dicts,assert n >= min_vars,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_vars_to_dims_dicts,assert max_vars is None or n <= max_vars,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_vars_to_dims_dicts,"assert all((len(dd) >= min_dims for _, dd in D.items()))",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_vars_to_dims_dicts,"assert max_dims is None or all((len(dd) <= max_dims for _, dd in D.items()))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_vars_to_dims_dicts,assert set(ds) == set(D.keys()),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_vars_to_dims_dicts,"assert all((ds[vv].dims == tuple(dd) for vv, dd in D.items()))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_coords,assert n >= min_side,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_coords,assert max_side is None or n <= max_side,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_coords,"assert all((isinstance(ss, int) for ss in L))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_coords,assert len(set(L)) == len(L),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_coords,assert n >= min_side,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_coords,assert max_side is None or n <= max_side,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_coords,"assert all((isinstance(ss, int) for ss in L))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_coords,assert L == list(range(len(L))),False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_coords_dicts,assert list(D.keys()) == dims,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_coords_dicts,assert all((min_side <= len(cc) for cc in D.values())),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_coords_dicts,assert max_side is None or all((max_side >= len(cc) for cc in D.values())),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_coords_dicts,"assert all((dd in special_dims or all((isinstance(ss, int) for ss in L)) for dd, L in D.items()))",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_coords_dicts,assert all((all((ss == dd for ss in D[dd])) for dd in special_dims)),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_xr_coords_dicts,assert dd in special_dims or len(set(cc)) == len(cc),False,False,False,False,True,False,False,True,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_dataarrays,assert da.dims == tuple(dims),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_dataarrays,assert da.dtype == np.dtype(dtype),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_dataarrays,assert da.coords[dd].values.tolist() == coords[dd],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_dataarrays,assert da.dims == tuple(dims),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_dataarrays,assert all((ss >= min_side for ss in da.sizes.values())),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_dataarrays,assert max_side is None or all((ss <= max_side for ss in da.sizes.values())),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_dataarrays,assert da.dtype == np.dtype(dtype),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_dataarrays,assert all((all((ss == dd for ss in da.coords[dd].values.tolist())) for dd in special_dims)),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_dataarrays,"assert dd in special_dims or all((isinstance(ss, int) for ss in L))",False,False,False,False,False,True,False,True,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_dataarrays,assert dd in special_dims or len(set(L)) == len(L),False,False,False,False,True,False,False,True,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_dataarrays,assert da.dims == tuple(dims),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_dataarrays,assert all((ss >= min_side for ss in da.sizes.values())),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_dataarrays,assert max_side is None or all((ss <= max_side for ss in da.sizes.values())),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_dataarrays,assert da.dtype == np.dtype(dtype),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_dataarrays,"assert all((isinstance(ss, int) for ss in L))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_dataarrays,assert L == list(range(len(L))),False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_dataarrays,assert len(da.dims) >= min_dims,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_dataarrays,assert len(da.dims) <= max_dims,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_dataarrays,assert all((ss >= min_side for ss in da.sizes.values())),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_dataarrays,assert max_side is None or all((ss <= max_side for ss in da.sizes.values())),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_dataarrays,assert da.dtype == np.dtype(dtype),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_dataarrays,"assert all((isinstance(ss, int) for ss in L))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_dataarrays,assert len(set(L)) == len(L),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_datasets,assert list(ds) == list(vars_to_dims.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_datasets,assert all((ds[vv].dims == tuple(vars_to_dims[vv]) for vv in vars_to_dims)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_datasets,assert all((ds[vv].dtype == np.dtype(dtype_d[vv]) for vv in vars_to_dims)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_datasets,assert L == coords[dd],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_datasets_no_dtype,assert list(ds) == list(vars_to_dims.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_datasets_no_dtype,assert all((ds[vv].dims == tuple(vars_to_dims[vv]) for vv in vars_to_dims)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_datasets_no_dtype,assert all((ds[vv].dtype == np.dtype(hxr.DEFAULT_DTYPE) for vv in vars_to_dims)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_coords_datasets_no_dtype,assert L == coords[dd],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_datasets,assert list(ds) == list(vars_to_dims.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_datasets,assert all((ds[vv].dims == tuple(vars_to_dims[vv]) for vv in vars_to_dims)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_datasets,assert all((ds[vv].dtype == np.dtype(dtype_d[vv]) for vv in vars_to_dims)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_datasets,assert all((all((ss == dd for ss in ds.coords[dd].values.tolist())) for dd in special_dims)),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_datasets,assert len(L) >= min_side,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_datasets,assert max_side is None or len(L) <= max_side,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_datasets,"assert dd in special_dims or all((isinstance(ss, int) for ss in L))",False,False,False,False,False,True,False,True,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_fixed_datasets,assert dd in special_dims or len(set(L)) == len(L),False,False,False,False,True,False,False,True,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_datasets,assert list(ds) == list(vars_to_dims.keys()),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_datasets,assert all((ds[vv].dims == tuple(vars_to_dims[vv]) for vv in vars_to_dims)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_datasets,assert all((ds[vv].dtype == np.dtype(dtype_d[vv]) for vv in vars_to_dims)),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_datasets,assert len(L) >= min_side,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_datasets,assert max_side is None or len(L) <= max_side,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_datasets,"assert all((isinstance(ss, int) for ss in L))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_simple_datasets,assert L == list(range(len(L))),False,True,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_datasets,assert n >= min_vars,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_datasets,assert max_vars is None or n <= max_vars,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_datasets,assert all((len(ds[vv].dims) >= min_dims for vv in ds)),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_datasets,assert max_dims is None or all((len(ds[vv].dims) <= max_dims for vv in ds)),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_datasets,assert all((ds[vv].dtype == np.dtype(dtype) for vv in ds)),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_datasets,assert len(L) >= min_side,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_datasets,assert max_side is None or len(L) <= max_side,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_datasets,"assert all((isinstance(ss, int) for ss in L))",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,hypothesis-gufunc,test/extra/test_xr.py,test_datasets,assert len(set(L)) == len(L),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/expected_max_test.py,test_get_expected_max_weights,assert pdf is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
uber,bayesmark,test/expected_max_test.py,test_expected_max,assert E_max_x is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
uber,bayesmark,test/expected_max_test.py,test_expected_min,assert E_min_x is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
uber,bayesmark,test/quantiles_test.py,test_order_stats,assert len(o_stats) == len(X) + 2,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_order_stats,assert not np.any(np.diff(o_stats) < 0),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_order_stats,assert o_stats[0] == -np.inf,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_order_stats,assert o_stats[-1] == np.inf,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_order_stats,assert [-np.inf] + sorted(X) + [np.inf] == list(o_stats),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile,assert ll == -np.inf if len(X) == 0 else ll == np.min(X),False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile,assert uu == -np.inf if len(X) == 0 else uu == np.max(X),False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile,assert mm == np.median(X),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_to_np,assert estimate == estimate_np,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI,assert idx_l <= idx_q,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI,assert idx_q <= idx_u,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI,assert LB <= UB,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI,assert LB <= estimate,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI,assert estimate <= UB,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI_monotone_x,assert LB1 >= LB2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI_monotone_x,assert UB1 >= UB2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI_monotone_x,assert LB1 <= LB2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI_monotone_x,assert UB1 <= UB2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI_monotone_q,assert LB1 <= LB2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI_monotone_q,assert UB1 <= UB2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI_monotone_alpha,assert LB1 <= LB2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_CI_monotone_alpha,assert UB1 >= UB2,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_max_quantile_CI,assert LB0 <= estimate0,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_max_quantile_CI,assert estimate0 <= UB0,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_max_quantile_CI,assert estimate0 == estimate,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_max_quantile_CI,assert LB0 == LB,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_max_quantile_CI,assert UB0 == UB,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_min_quantile_CI,assert LB0 <= estimate0,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_min_quantile_CI,assert estimate0 <= UB0,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_min_quantile_CI,assert estimate0 == estimate,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_min_quantile_CI,assert LB0 == LB,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_min_quantile_CI,assert UB0 == UB,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_min_quantile_CI_to_max,assert estimate0 == -np.inf,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_min_quantile_CI_to_max,"assert -estimate0 in (estimate1, estimate2, estimate3)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_min_quantile_CI_to_max,"assert -LB0 in (UB1, UB2, UB3)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_min_quantile_CI_to_max,"assert -UB0 in (LB1, LB2, LB3)",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_and_CI,assert LB0 <= estimate0,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_and_CI,assert estimate0 <= UB0,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_and_CI,assert estimate0 == estimate,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_and_CI,assert LB0 == LB,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/quantiles_test.py,test_quantile_and_CI,assert UB0 == UB,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/xr_util_test.py,test_is_simple_coords_pass,assert simple,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/xr_util_test.py,test_coord_compat,assert compat,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/xr_util_test.py,test_da_concat,assert len(keys_to_slice) == n,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_sanity,assert len(x_guess) == n_suggest,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_sanity,"assert all((all((close_enough(x_guess[nn][k], x_guess2[nn][k]) for k in x_guess[nn])) for nn in range(len(x_guess))))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_sanity,assert np.all(x_guess == x_guess2),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_sanity,assert type(x_guess_w) == np.ndarray,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_sanity,assert x_guess_w.dtype.kind == 'f',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_sanity,"assert x_guess_w.shape == (n_suggest, D)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_sanity,"assert x_guess_w.shape == (n_suggest, D)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_sanity,assert np.all(x_guess_w <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,assert len(x_guess) == n_suggest,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,assert len(x_guess2) == n_suggest,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,assert not np.all(x_guess == x_guess2),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,assert type(x_guess_w) == np.ndarray,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,assert x_guess_w.dtype.kind == 'f',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,"assert x_guess_w.shape == (n_suggest, D)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,"assert x_guess_w.shape == (n_suggest, D)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,assert np.all(x_guess_w <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,assert type(x_guess_w) == np.ndarray,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,assert x_guess_w.dtype.kind == 'f',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,"assert x_guess_w.shape == (n_suggest, D)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,"assert x_guess_w.shape == (n_suggest, D)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/random_search_test.py,test_random_search_suggest_diff,assert np.all(x_guess_w <= upper),False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_unparse_parse,assert i_parsed_sig == inp,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_unparse_parse,assert o_parsed_sig == out,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_ddict_int_or_dict,assert DD is DD2,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_ddict_int_or_dict,assert DD2.default_factory() == default_val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_dict_int_or_dict,assert DD == D,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_dict_int_or_dict,assert DD['---'] == default_val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_int_int_or_dict,assert len(DD) == 0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_int_int_or_dict,assert DD['---'] == default_val,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_shapes_tuple_of_arrays,assert len(shapes) == len(X),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_shapes_tuple_of_arrays,assert tuple(spec) == np.shape(drawn),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_just_shapes_tuple_of_arrays,assert len(shapes) == len(X),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_just_shapes_tuple_of_arrays,assert tuple(spec) == np.shape(drawn),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_bcast_tuple_of_arrays,assert len(shapes) == len(X),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_bcast_tuple_of_arrays,assert tuple(spec) == np.shape(drawn),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_const_signature_map,assert all((all((v == 0 for v in arg)) for arg in p_)),False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_inverse_signature_map,assert p_ == parsed_sig,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_append_bcast_dims,assert len(bb) == n_extra_per_arg[ii],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_append_bcast_dims,assert cc == core_dims[ii],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_append_bcast_dims,assert np.all(bb[st1] == 1),False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
uber,hypothesis-gufunc,test/test_gufunc.py,test_append_bcast_dims,assert np.all(bb[~st1] == b_dims[len(b_dims) - len(bb):][~st1]),False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
uber,bayesmark,test/experiment_launcher_test.py,test_gen_commands,assert L is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
uber,bayesmark,test/experiment_launcher_test.py,test_dry_run,assert jobs is not None,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
unihd-cag,skillbridge,tests/test_translator.py,test_simple_to_skill,"assert encode_simple(i) == repr(i).replace(""'"", '""')",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
unihd-cag,skillbridge,tests/test_translator.py,test_var_to_skill,assert encode_simple(Var(a)) == a,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
unihd-cag,skillbridge,tests/test_translator.py,test_list_roundtrip,assert python == i or (python is None and i == []),True,False,False,False,False,True,False,False,False,False,False,False,False,False,False
unihd-cag,skillbridge,tests/test_translator.py,test_get_attribute,"assert simple_translator.encode_getattr(obj, name).replace(' ', '') == f'{obj}->{name}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
unihd-cag,skillbridge,tests/test_translator.py,test_set_attribute,assert got == expected,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
unihd-cag,skillbridge,tests/test_translator.py,test_symbol_is_parsed,"assert isinstance(parsed, Symbol)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
unihd-cag,skillbridge,tests/test_translator.py,test_symbol_is_parsed,assert parsed.name == name,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
unihd-cag,skillbridge,tests/test_translator.py,test_symbol_is_dumped,"assert skill == f""'{name}""",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_hub.py,test_attach_sensor,assert sensor_name in hub.peripherals,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_hub.py,test_attach_sensor,"assert hasattr(hub, sensor_name)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_peripheral.py,test_set_brightness,"assert args[1] == self.write.get_bytes(port, 0, brightness)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_peripheral.py,test_play_sound,"assert args[1] == self.write.get_bytes(port, 1, sound.value)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_peripheral.py,test_set_speed,"assert args[1] == self.write.get_bytes(port, 0, self.m._convert_speed_to_val(speed))",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_peripheral.py,test_set_pos,"assert args[1] == self.write.get_bytes_for_set_pos(port, pos, self.m._convert_speed_to_val(speed), max_power)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_peripheral.py,test_rotate,"assert args[1] == self.write.get_bytes_for_rotate(port, angle, self.m._convert_speed_to_val(speed), max_power)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_value_message,"self.hub.peripheral_queue.put.assert_called_with(('value_change', (port, values)))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_combo_value_message,assert l == f'Port {port} changed combo value to {list(msg[2:])}',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_combo_value_message,"self.hub.peripheral_queue.put.assert_called_with(('value_change', (port, list(msg[2:]))))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_hub_properties_message,assert l == f'Hub property:  {msg_original}',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_hub_properties_message,assert l == f'Hub property:  {HubPropertiesMessage.prop_names[prop]} {msg_original}',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_hub_properties_message,"self.hub.peripheral_queue.put.assert_called_with(('value_change', (255, list(msg[5:]))))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_hub_properties_message,assert l == f'Hub property:  {HubPropertiesMessage.prop_names[prop]} {HubPropertiesMessage.operation_names[op]} {remaining}',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_attach_message,assert l == f'Detached IO Port:{port}',False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_attach_message,"self.hub.peripheral_queue.put.assert_any_call(('update_port', (port, self.m.port_info[port])))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_attach_message,"self.hub.peripheral_queue.put.assert_any_call(('port_detected', port))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_attach_message,assert self.m.port_info[port]['name'] == DEVICES[dev_id],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_attach_message,"self.hub.peripheral_queue.put.assert_any_call(('update_port', (port, self.m.port_info[port])))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_attach_message,"self.hub.peripheral_queue.put.assert_any_call(('port_detected', port))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_attach_message,"assert l == f'Attached VirtualIO Port:{port} {self.m.port_info[port]['name']} Port A: {v_port_a}, Port B: {v_port_b}'",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_attach_message,"assert self.m.port_info[port]['virtual'] == (v_port_a, v_port_b)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_attach_message,assert self.m.port_info[port]['name'] == DEVICES[dev_id],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_information_message,"self.hub.peripheral_queue.put.assert_any_call(('update_port', (port, self.m.port_info[port])))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_information_message,"self.hub.peripheral_queue.put.assert_any_call(('port_info_received', port))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_information_message,assert self.m.port_info[port][cap] == capabilities & 1 << i,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_information_message,assert self.m.port_info[port]['modes'][i]['input'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_information_message,assert self.m.port_info[port]['modes'][i + 8]['input'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_information_message,assert self.m.port_info[port]['modes'][i]['output'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_information_message,assert self.m.port_info[port]['modes'][i + 8]['output'],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_information_message,"self.hub.peripheral_queue.put.assert_any_call(('update_port', (port, self.m.port_info[port])))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
virantha,bricknil,test/test_messages.py,test_port_information_message,"self.hub.peripheral_queue.put.assert_any_call(('port_combination_info_received', port))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_diff_lists_equal,"assert list(diff_lists(path, xs, xs)) == []",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_same_list_shuffled_is_not_different,"assert list(diff_lists(path, xs, ys)) == []",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_same_list_shuffled_is_not_different_nested,"assert list(diff_lists(path, xs, ys)) == []",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_added_items_appear_in_diff,"assert len(list(diff_lists(path, xs, ys))) == len(extension)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_list_subtract_same_list,"assert list(list_subtract(xs, xs)) == []",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_list_subtract_same_list,"assert list(list_subtract(xs, ys)) == []",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_list_subtract_recover,"assert list(list_subtract(xs, zs)) == []",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_diff_lists_doesnt_mutate_inputs,assert xs == orig_xs and ys == orig_ys,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_diff_lists_doesnt_mutate_inputs_nested_lists,assert xs == orig_xs and ys == orig_ys,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_two_lists_of_same_size_generator,assert len(xs) == len(ys),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_from_dict_kubernetes_list_type,assert [kube_obj.data for kube_obj in KubeObject.from_dict(data)] == data['items'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_from_dict_kubernetes_obj_type,assert [kube_obj.data for kube_obj in KubeObject.from_dict(data)] == [data],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_difference_no_args,assert d.to_text(kind) == path + ': Message',False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
weaveworks,kubediff,kubedifflib/tests/test_diff.py,test_difference_two_args,assert d.to_text(kind) != '',False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
wemake-services,wemake-python-styleguide,tests/test_checker/test_hypothesis.py,test_no_exceptions,"assert isinstance(violation[0], int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
wemake-services,wemake-python-styleguide,tests/test_checker/test_hypothesis.py,test_no_exceptions,"assert isinstance(violation[1], int)",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
wemake-services,wemake-python-styleguide,tests/test_checker/test_hypothesis.py,test_no_exceptions,"assert violation[2].startswith('WPS'), violation[2]",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wemake-services,wemake-python-styleguide,tests/test_checker/test_hypothesis.py,test_no_exceptions,assert 'WPS0' not in violation[2],False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
wemake-services,wemake-python-styleguide,tests/test_checker/test_hypothesis.py,test_no_exceptions,assert violation[3] == Checker,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating.py,test_object_name_contains_any_unicode___str_does_not_error,"self.assertEqual(str(foo), str(ratings))",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_user_rates_object___rating_object_is_create,"self.assertEqual(score, rating.score)",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_multiple_users_rating_the_object___aggregates_are_updated,"self.assertEqual(ratings.count, len(scores))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_multiple_users_rating_the_object___aggregates_are_updated,"self.assertAlmostEqual(ratings.total, sum(scores))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_multiple_users_rating_the_object___aggregates_are_updated,"self.assertAlmostEqual(ratings.average, mean(scores))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_deleting_the_rating___aggregates_are_updated,"self.assertEqual(ratings.count, len(scores))",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_deleting_the_rating___aggregates_are_updated,"self.assertAlmostEqual(ratings.total, sum(scores))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_deleting_the_rating___aggregates_are_updated,"self.assertAlmostEqual(ratings.average, mean(scores))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_is_true___rating_is_changed,"self.assertTrue(ratings.user_ratings.filter(user=self.user_a, score=first))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_is_true___rating_is_changed,"self.assertEqual(ratings.count, 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_is_true___rating_is_changed,"self.assertEqual(ratings.total, first)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_is_true___rating_is_changed,"self.assertEqual(ratings.average, first)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_is_true___rating_is_changed,"self.assertTrue(ratings.user_ratings.filter(user=self.user_a, score=second))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_is_true___rating_is_changed,"self.assertEqual(ratings.count, 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_is_true___rating_is_changed,"self.assertEqual(ratings.total, second)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_is_true___rating_is_changed,"self.assertEqual(ratings.average, second)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_delete_score_diff__rating_is_changed,"self.assertTrue(ratings.user_ratings.filter(user=self.user_a, score=first))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_delete_score_diff__rating_is_changed,"self.assertEqual(ratings.count, 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_delete_score_diff__rating_is_changed,"self.assertEqual(ratings.total, first)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_delete_score_diff__rating_is_changed,"self.assertEqual(ratings.average, first)",False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_delete_score_diff__rating_is_changed,"self.assertTrue(ratings.user_ratings.filter(user=self.user_a, score=second))",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_delete_score_diff__rating_is_changed,"self.assertEqual(ratings.count, 1)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_delete_score_diff__rating_is_changed,"self.assertEqual(ratings.total, second)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_rating_manager.py,test_same_user_rate_twice_rerate_delete_score_diff__rating_is_changed,"self.assertEqual(ratings.average, second)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_app_settings.py,test_star_height_set_in_the_settings___value_is_setting_value,"self.assertEqual(height, app_settings.STAR_RATINGS_STAR_HEIGHT)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_app_settings.py,test_star_width_not_defined_in_settings___defaults_to_star_height,"self.assertEqual(height, app_settings.STAR_RATINGS_STAR_WIDTH)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_app_settings.py,test_star_width_defined_in_the_settings___value_is_setting_value,"self.assertEqual(width, app_settings.STAR_RATINGS_STAR_WIDTH)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_template_tags_ratings.py,test_several_ratings_are_made___percentage_is_correct_in_result,"self.assertEqual(expected_avg, context['percentage'])",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_template_tags_ratings.py,test_icon_height_is_set___icon_height_is_correct,"self.assertEqual(height, context['icon_height'])",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
wildfish,django-star-ratings,tests/test_template_tags_ratings.py,test_icon_width_is_set___icon_height_is_correct,"self.assertEqual(width, context['icon_width'])",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
windelbouwman,ppci,test/hypo/hypo.py,test_a,assert idom1 == idom2,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
windelbouwman,ppci,test/hypo/hypo.py,test_a,"assert dominates == g.dominates(node, other_node)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
windelbouwman,ppci,test/hypo/hypo.py,test_a,"assert strictly_dominates == g.strictly_dominates(node, other_node)",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
windelbouwman,ppci,test/hypo/wasm.py,test_coremark_crc16,assert res1 == res2,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
xen0l,aws-gate,tests/unit/test_ssh_common.py,test_initialize_key,assert key.key_path == DEFAULT_GATE_KEY_PATH,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
xen0l,aws-gate,tests/unit/test_ssh_common.py,test_initialize_key,assert key.key_type == key_type,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
xen0l,aws-gate,tests/unit/test_ssh_common.py,test_initialize_key,assert key.key_size == key_size,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
xgcm,xhistogram,xhistogram/test/test_chunking_hypotheses.py,test_all_chunking_patterns_1d,"assert h.shape == (nbins_a,)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
xgcm,xhistogram,xhistogram/test/test_chunking_hypotheses.py,test_all_chunking_patterns_1d,"np.testing.assert_allclose(hist, h)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
xgcm,xhistogram,xhistogram/test/test_chunking_hypotheses.py,test_all_chunking_patterns_2d,"assert h.shape == (nbins_a, nbins_b)",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
xgcm,xhistogram,xhistogram/test/test_chunking_hypotheses.py,test_all_chunking_patterns_2d,"np.testing.assert_allclose(hist, h.values)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
xgcm,xhistogram,xhistogram/test/test_chunking_hypotheses.py,test_all_chunking_patterns_dd_hist,assert h.shape == n_bins,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
xgcm,xhistogram,xhistogram/test/test_chunking_hypotheses.py,test_all_chunking_patterns_dd_hist,"np.testing.assert_allclose(hist, h.values)",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_boolean.py,test_any_op,"assert any_op(arrow, skipna) == pandas.any(skipna=skipna)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_boolean.py,test_any_op,"assert any_op(arrow, skipna) == pandas.any(skipna=skipna)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_boolean.py,test_all_op,"assert all_op(arrow, skipna) == pandas.all(skipna=skipna)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_boolean.py,test_all_op,"assert all_op(arrow, skipna) == pandas.all(skipna=skipna)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_algorithms.py,test_stringbuilder_auto,"npt.assert_array_equal(result, pa.array(data))",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_algorithms.py,test_vector8u_auto,assert vec.get_uint8(idx) == np.uint8(data[idx]),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_algorithms.py,test_vector8u_auto,assert vec2.get_uint8(idx) == np.uint8(data[idx]),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_algorithms.py,test_vector8u_auto,assert vec.get_uint8(idx + len(data)) == np.uint8(data[idx]),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_algorithms.py,test_bit_vector_auto,assert vec.get(idx) == bool(data[idx]),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_text.py,test_utf8_size,assert computed == expected,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_text.py,test_cat,"tm.assert_series_equal(result_fr, result_pd)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_text.py,test_slice,"tm.assert_series_equal(result_fr, result_pd)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
xhochy,fletcher,tests/test_text.py,test_zfill,"tm.assert_series_equal(result_fr, result_pd)",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
zalando-incubator,transformer,tests/transformer/test_python.py,test_literal_scalar_uses_repr,assert str(py.Literal(x)) == repr(x),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
zalando-incubator,transformer,tests/transformer/test_scenario.py,test_names_are_unique,assert sorted(set(scenario_names)) == sorted(scenario_names),False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
zalando-incubator,transformer,tests/transformer/test_scenario.py,test_names_are_unique,assert len(paths) == len(scenario_names),False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
zalando-incubator,transformer,tests/plugins/test_resolve.py,test_ignores_non_plugin_stuff_in_module,assert plugins == [plugin_valid],False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
zalando-incubator,transformer,tests/plugins/test_resolve.py,test_ignores_non_plugin_stuff_in_module,"assert any((f.__name__ in msg for msg in caplog.messages)), 'ignored function names should be logged'",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
